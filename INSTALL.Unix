Build Instructions for Unixes
=============================

Table of Contents
-----------------

  Prerequisites
  Configuration of the build
  Manually build the prerequisites
    Compile and install boost
    Compile and install openssl
  Build instructions for specific Linux Distributions
    RHEL/Centos/SL 5
    RHEL/Centos/SL 6
    Fedora 18
    Fedora 19
    Fedora 20
    Ubuntu 10.04.1 LTS
    Ubuntu 12.04 LTS
    Ubuntu 12.10
    Ubuntu 13.04
    Ubuntu 13.10
    Debian 6.0
    Debian 7.0
    OpenSuSE 12.2
    OpenSuSE 12.3
    SLES 11 SP1/SP2
    Slackware 14.0
    Archlinux
  Instructions for other Unixes
    FreeBSD 8.4
    FreeBSD 9.2
    NetBSD 6.1
    Solaris 10
      Solaris 10 (CSW toolchain)
    OpenIndiana 151a8
      OpenIndiana 151a8 (CSW toolchain)

Prerequisites
-------------

- gcc c++ 4.1.x or later (preferably 512 MB RAM or Swap)
- GNU make (preferably 3.82 or newer)
- boost 1.48.0 or later
- optionally (WITH_SSL) openssl 0.9.7 or later
- optionally (WITH_LUA) lua 5.2
  (integrated in subdir 'lua')
- for database support (WITH_SYSTEM_SQLITE3): sqlite3
  WITH_LOCAL_SQLITE3=1 uses the supplied amalgamation
  instead of the system version
  - optionally (WITH_PGSQL)
- for optional authentication mechanisms:
  - optionally (WITH_PAM)
  - optionally (WITH_SASL)
- optionally for testing:
  - optionally (WITH_EXPECT) expect and Tcl 8.4 or later
- optionally (for building the documentation):
  - xsltproc, docboox-xsl-stylesheet: for docbook
  - fop: to produce a nice PDF documentation
  - doxygen: for documentation for programmers
  - dia: to convert images to svg
- optionally (WITH_LIBXML2)
- optionally (WITH_LIBXSLT), needs LIBXML2 too
- optionally (WITH_CJSON): build JSON filtering module
  implemented with cjson
- optionally (WITH_SYSTEM_LIBHPDF): for PDF creation
  using the system version of libhpdf, specify
  WITH_LOCAL_LIBHPDF=1 to use the supplied version in
  the 'libhpdf' subdirectory. In this case also 
  'zlib' and 'libpng' development libraries are needed
- optionally (WITH_ICU): ICU 3.6 or later,
  needed for boost-locale with ICU backend
- optionally (WITH_SYSTEM_FREEIMAGE): for image handling
  using the system version of FreeImage, specify
  WITH_LOCAL_FREEIMAGE=1 to use the supplied version in
  the 'freeimage' subdirectory.
- optionally (WITH_PYTHON): build Python 3 module for
  scripting Wolframe in Python
- optionally (WITH_ORACLE): build Oracle database module

Configuration of the build
--------------------------

First the build system tries to determine automatically
the paths of the software.

Use 'make help' to find out which options exist (e.g. WITH_SSL).

Use 'make <config options> config' to see what variables
the system would use to build Wolframe.

If you get 'NOT SUPPLIED ON THIS PLATFORM' for some variables
you have either to port the system in 'makefiles/gmake/platform.mk'
or you can build and configure your own version of the package.

In this case copy 'makefiles/gmake/config.mk.template' to your
home directory as '~/config.mk'. Customize '~/config.mk' as needed.

Alternatively you can of course pass all the options as variables 
directory to the invocation of make.

Versions of packages just indicate the ones I tested last, this
doesn't mean other versions won't work.

Manually build the prerequisites
--------------------------------

Compile and install boost
-------------------------

./bootstrap.sh --prefix=/usr/local/boost-1.xx.y \
	--with-libraries=thread,filesystem,system,program_options,date_time
./bjam install

For boost-locale and ICU support you have to specify 'regex' and the 'locale'
libraries too:

./bootstrap.sh --prefix=/usr/local/boost-1.xx.y \
	--with-libraries=thread,filesystem,system,program_options,date_time,regex,locale
./bjam install

configure Wolframe in ~/config.mk and
set BOOST_DIR to /usr/local/boost-1.xx.y.

Compile and install openssl
---------------------------

Unless you have a good reason, use the openssl library of
your Linux distribution.

Build instructions for specific Linux Distributions
---------------------------------------------------

RHEL/Centos/SL 5
----------------

Optional packages:
Fetch from normal repository: openssl-devel, pam-devel (0.99.6), cyrus-sasl-devel (2.1.22),
                              postgresql84-devel (8.4.13),
                              zlib-devel (1.2.3-4), libpng-devel (1.2.10-16),
                              libicu-devel (3.6-5.16.1)

Libxml2 is too old (2.6.26), build your own 2.9.1 one.
Libxslt is too old (1.1.17) and we should link it against the one built above,
so also build your own one.

Sqlite is too old, use WITH_LOCAL_SQLITE=1 to build the locally supplied one.

Boost is not available in a decent version (1.33), build your own one.

Use WITH_LOCAL_LIBHPDF=1 for PDF support.

For building the documentation you need 'libxslt', 'doxygen' and
'docbook-style-xsl' (from epel).

For scripting in Python you have to set WITH_PYTHON=1. There are no
official Python 3 packages for this platform, so build your own python there.
Make sure 'python3-config' is in your path.

RHEL/Centos/SL 6
----------------

Optional packages:

Fetch from normal repository: openssl-devel, pam-devel (0.99.6), cyrus-sasl-devel (2.1.22),
                              sqlite-devel (3.3.6), postgresql-devel (8.1.23),
                              libxml2-devel (2.7.6), libxslt-devel (1.1.26),
                              zlib-devel (1.2.3-27), libpng-devel (1.2.48-1),
                              libicu-devel (4.2.1)

Boost is available in an almost usable version (1.39.0), build your own one.

If you need boost-locale with ICU support you have to compile your own boost library.

On RHEL6 there is no licicu-devel on OSC currently (see
http://permalink.gmane.org/gmane.linux.suse.opensuse.buildservice/17779).
Build your own libicu library and build your own boost library with boost-locale.

Use WITH_LOCAL_LIBHPDF=1 for PDF support.

For building the documentation you need 'libxslt', 'doxygen' and
'docbook-style-xsl' (from epel).

For scripting in Python you have to set WITH_PYTHON=1. There are no
official Python 3 packages for this platform, so build your own python there.
Make sure 'python3-config' is in your path.

Fedora 18
---------

No problems with the supplied packages at all, everything builds out of the box:

Required pacakges: boost-devel (1.50.0)
Optional packages: openssl-devel (1.0.1c)
                   pam-devel (1.1.6), cyrus-sasl-devel (2.1.23),
                   sqlite-devel (3.7.13), postgresql-devel (9.2.3),
                   libxml2-devel (2.9.0), libxslt-devel (1.1.27),
                   libpng-devel (1.5.13), zlib-devel (1.2.7),
                   libharu-devel (2.2.1), python3-devel (3.3.0)

Use WITH_SYSTEM_LIBHPDF=1 for PDF support. Install libharu-devel (2.2.1) in
this case.

Use WITH_LOCAL_FREEIMAGE=1 for image manipulation support. The supplied
version of freeimage-devel is too old.

For building the documentation you need 'libxslt', 'docbook-style-xsl' and 'doxygen'.
For building the PDF wolfbook install 'fop'.

When rebuilding the SVG images of the documentation you also need 'dia'.

For running non-gtest tests you need 'expect' (5.45).

For running some tests you need 'telnet' (0.17).

For running the Postgresql tests you need a fully function 'postgresql-server'
with a db user 'wolfusr' (password: 'wolfpwd') owning a database called
'wolframe'.

postgresql-setup initdb
systemctl start postgresql.service
systemctl enable postgresql.service
 
change auth method from 'ident' to 'md5' in pg_hba.conf

For scripting in Python you have to set WITH_PYTHON=1.

Fedora 19
---------

No problems with the supplied packages at all, everything builds out of the box:

Required pacakges: boost-devel (1.53.0)
Optional packages: openssl-devel (1.0.1e)
                   pam-devel (1.1.6), cyrus-sasl-devel (2.1.26),
                   sqlite-devel (3.7.17), postgresql-devel (9.2.4),
                   libxml2-devel (2.9.1), libxslt-devel (1.1.28),
                   libpng-devel (1.5.13), zlib-devel (1.2.7),
                   libharu-devel (2.2.1), python3-devel (3.3.2)

Use WITH_SYSTEM_LIBHPDF=1 for PDF support. Install libharu-devel (2.2.1) in
this case.

Use WITH_LOCAL_FREEIMAGE=1 for image manipulation support. The supplied
version of freeimage-devel is too old.

For building the documentation you need 'libxslt', 'docbook-style-xsl' and 'doxygen'.
For building the PDF wolfbook install 'fop'.

When rebuilding the SVG images of the documentation you also need 'dia'.

For running non-gtest tests you need 'expect' (5.45).

For running some tests you need 'telnet' (0.17).

For running the Postgresql tests you need a fully function 'postgresql-server'
with a db user 'wolfusr' (password: 'wolfpwd') owning a database called
'wolframe'.

postgresql-setup initdb
systemctl start postgresql.service
systemctl enable postgresql.service
 
change auth method from 'ident' to 'md5' in pg_hba.conf

For scripting in Python you have to set WITH_PYTHON=1.

Fedora 20
---------

No problems with the supplied packages at all, everything builds out of the box:

Required pacakges: boost-devel (1.54.0)
Optional packages: openssl-devel (1.0.1e)
                   pam-devel (1.1.8), cyrus-sasl-devel (2.1.26),
                   sqlite-devel (3.8.2), postgresql-devel (9.3.2),
                   libxml2-devel (2.9.1), libxslt-devel (1.1.28),
                   libpng-devel (1.6.3), zlib-devel (1.2.8),
                   libharu-devel (2.2.1), python3-devel (3.3.2)

Use WITH_SYSTEM_LIBHPDF=1 for PDF support. Install libharu-devel (2.2.1) in
this case.

Use WITH_LOCAL_FREEIMAGE=1 for image manipulation support. The supplied
version of freeimage-devel is too old.

For building the documentation you need 'libxslt', 'docbook-style-xsl' and 'doxygen'.
For building the PDF wolfbook install 'fop'.

When rebuilding the SVG images of the documentation you also need 'dia'.

For running non-gtest tests you need 'expect' (5.45).

For running some tests you need 'telnet' (0.17).

For running the Postgresql tests you need a fully function 'postgresql-server'
with a db user 'wolfusr' (password: 'wolfpwd') owning a database called
'wolframe'.

postgresql-setup initdb
systemctl start postgresql.service
systemctl enable postgresql.service
 
change auth method from 'ident' to 'md5' in pg_hba.conf

For scripting in Python you have to set WITH_PYTHON=1.

Ubuntu 10.04.1 LTS
------------------

Optional packages: libpam-dev (1.1.1), libsasl2-dev (2.1.23),
                   libsqlite3-dev (3.6.22), libpq-dev (8.4.7),
                   libxml2-dev (2.7.6), libpng-dev (1.2.42),
                   zlib1g-dev (1.2.3.3.dfsg-15ubuntu1),
                   python3-dev (3.1.2)

libboost-dev is 1.40, too old, missing asio features and property_tree, build
you own boost. gcc on Debian complains a lot about boost header files..

Use WITH_LOCAL_LIBHPDF=1 for PDF support.

Use WITH_LOCAL_FREEIMAGE=1 for image manipulation support. The supplied
version of freeimage-devel is too old.

For building the documentation you need 'xsltproc', 'docbook-xsl' and 'doxygen'.

When rebuilding the SVG images of the documentation you also need 'dia'.

For running non-gtest tests you need 'expect'.

For running the Sasl AAAA tests you need 'sasl2-bin'.

For running the Postgresql database tests you need 'postgresql-client'.

For running the Sqlite3 database tests you need 'sqlite3'.

For running some tests you need 'telnet' (0.17).

For checking the validity of various XML files you need 'libxml2-utils' (for xmllint).

For scripting in Python you have to set WITH_PYTHON=1.

Ubuntu 12.04
------------

Optional packages: libssl-dev (1.0.1),
                   libpam0g-dev (1.1.3), libsasl2-dev (2.1.25),
                   libsqlite3-dev (3.7.9), libpq-dev (9.1.3),
                   libxml2-dev (2.7.8), libxslt1-dev (1.1.26)
                   libpng-dev (1.2.46), python3-dev (3.2.3)

libboost-dev (1.42) is too old. Compile your own one.

Use WITH_LOCAL_LIBHPDF=1 for PDF support.

Use WITH_LOCAL_FREEIMAGE=1 for image manipulation support. The supplied
version of freeimage-devel is too old.

For building the documentation you need 'xsltproc', 'docbook-xsl' and 'doxygen'.

When rebuilding the SVG images of the documentation you also need 'dia'.

For running non-gtest tests you need 'expect'.

For running the Sasl AAAA tests you need 'sasl2-bin'.

For running the Postgresql database tests you need 'postgresql-client'.

For running the Sqlite3 database tests you need 'sqlite3'.

For running some tests you need 'telnet' (0.17).

For checking the validity of various XML files you need 'libxml2-utils' (for xmllint).

For scripting in Python you have to set WITH_PYTHON=1.

Ubuntu 12.10
------------

Required packages: libboost-dev (1.49), libboost-program-options-dev,
                   libboost-filesystem-dev, libboost-thread-dev,
                   libboost-random-dev,  libboost-locale-dev

Optional packages: libssl-dev (1.0.1c),
                   libpam0g-dev (1.1.3), libsasl2-dev (2.1.25),
                   libsqlite3-dev (3.7.13), libpq-dev (9.1.6),
                   libxml2-dev (2.8.0), libxslt1-dev (1.1.26)
                   libpng12-dev (1.2.49), libfreeimage-dev (3.15.1)
                   python3-dev (3.2)

Use WITH_LOCAL_LIBHPDF=1 for PDF support.

Use WITH_LOCAL_FREEIMAGE=1 for image manipulation support. The supplied
version of freeimage-devel is too old.

For building the documentation you need 'xsltproc', 'docbook-xsl' and 'doxygen'.

When rebuilding the SVG images of the documentation you also need 'dia'.

For running non-gtest tests you need 'expect'.

For running the Sasl AAAA tests you need 'sasl2-bin'.

For running the Postgresql database tests you need 'postgresql-client'.

For running the Sqlite3 database tests you need 'sqlite3'.

For running some tests you need 'telnet' (0.17).

For checking the validity of various XML files you need 'libxml2-utils' (for xmllint).

For scripting in Python you have to set WITH_PYTHON=1.

Ubuntu 13.04
------------

Currently libboost breaks in enable_if template, compile your own 1.53.0
version of boost!

Required packages: libboost-dev (1.49), libboost-program-options-dev,
                   libboost-filesystem-dev, libboost-thread-dev,
                   libboost-random-dev,  libboost-locale-dev

Optional packages: libssl-dev (1.0.1c),
                   libpam0g-dev (1.1.3), libsasl2-dev (2.1.25),
                   libsqlite3-dev (3.7.15.2), libpq-dev (9.1.8),
                   libxml2-dev (2.9.0), libxslt1-dev (1.1.27)
                   libpng12-dev (1.2.49), libfreeimage-dev (3.15.1),
                   python3-dev (3.3.1)

Use WITH_LOCAL_LIBHPDF=1 for PDF support.

Use WITH_LOCAL_FREEIMAGE=1 for image manipulation support. The supplied
version of freeimage-devel is too old.

For building the documentation you need 'xsltproc', 'docbook-xsl' and 'doxygen'.

When rebuilding the SVG images of the documentation you also need 'dia'.

For running non-gtest tests you need 'expect'.

For running the Sasl AAAA tests you need 'sasl2-bin'.

For running the Postgresql database tests you need 'postgresql-client'.

For running the Sqlite3 database tests you need 'sqlite3'.

For running some tests you need 'telnet' (0.17).

For checking the validity of various XML files you need 'libxml2-utils' (for xmllint).

For scripting in Python you have to set WITH_PYTHON=1.

Ubuntu 13.10
------------

Required packages: libboost-dev (1.53), libboost-program-options-dev,
                   libboost-filesystem-dev, libboost-thread-dev,
                   libboost-random-dev,  libboost-locale-dev

Optional packages: libssl-dev (1.0.1e),
                   libpam0g-dev (1.1.3), libsasl2-dev (2.1.25),
                   libsqlite3-dev (3.7.17), libpq-dev (9.1.10),
                   libxml2-dev (2.9.1), libxslt1-dev (1.1.28)
                   libhpdf-dev (2.2.1), libfreeimage-dev (3.15.1),
                   python3-dev (3.3.2)

For building the documentation you need 'xsltproc', 'docbook-xsl' and 'doxygen'.

When rebuilding the SVG images of the documentation you also need 'dia'.

For running non-gtest tests you need 'expect'.

For running the Sasl AAAA tests you need 'sasl2-bin'.

For running the Postgresql database tests you need 'postgresql-client'.

For running the Sqlite3 database tests you need 'sqlite3'.

For running some tests you need 'telnet' (0.17).

For checking the validity of various XML files you need 'libxml2-utils' (for xmllint).

For scripting in Python you have to set WITH_PYTHON=1.

Debian 6.0
----------

Optional packages: libpam-dev (1.1.1),
                   libsasl2-dev (2.1.23), libsqlite3-dev (3.7.3),
                   libpq-dev (8.4.7), libxml2-dev (2.7.8),
                   libxslt1-dev (1.1.26), libpng12-dev (1.2.44),
                   zlib1g-dev (1.2.3.4), python3-dev (3.1.3)

libboost-dev is 1.42, slightly too old. Compile your own version.

Use WITH_LOCAL_LIBHPDF=1 for PDF support.

Use WITH_LOCAL_FREEIMAGE=1 for image manipulation support. The supplied
version of freeimage-devel is too old.

For building the documentation you need 'xsltproc', 'docbook-xsl' and 'doxygen'.

When rebuilding the SVG images of the documentation you also need 'dia'.

For running the Sasl AAAA tests you need 'sasl2-bin'.

For running the Postgresql database tests you need 'postgresql-client'.

For running the Sqlite3 database tests you need 'sqlite3'.

For running some tests you need 'telnet' (0.17).

For checking the validity of various XML files you need 'libxml2-utils' (for xmllint).

For scripting in Python you have to set WITH_PYTHON=1.

Debian 7.0
----------

Required packages: libboost-dev (1.49), libboost-program-options-dev,
                   libboost-filesystem-dev, libboost-thread-dev,
                   libboost-random-dev, libboost-locale-dev
Optional packages: libpam-dev (1.1.3),
                   libsasl2-dev (2.1.25), libsqlite3-dev (3.7.13),
                   libpq-dev (9.1.9), libxml2-dev (2.8.0),
                   libxslt1-dev (1.1.26), libhpdf (2.2.1),
                   libpng12-dev (1.2.49), zlib1g-dev (1.2.7),
                   python3-dev (3.2.3)

Use WITH_LOCAL_LIBHPDF=1 for PDF support.

Use WITH_LOCAL_FREEIMAGE=1 for image manipulation support. The supplied
version of freeimage-devel is too old.

For building the documentation you need 'xsltproc', 'docbook-xsl' and 'doxygen'.

When rebuilding the SVG images of the documentation you also need 'dia'.

For running the Sasl AAAA tests you need 'sasl2-bin'.

For running non-gtest tests you need 'expect' (5.45).

For running the Postgresql database tests you need 'postgresql-client'.

For running the Sqlite3 database tests you need 'sqlite3'.

For running some tests you need 'telnet' (0.17).

For checking the validity of various XML files you need 'libxml2-utils' (for xmllint).

For scripting in Python you have to set WITH_PYTHON=1.

OpenSuSE 12.2
-------------

Required packages: boost-devel (1.49.0)
Optional packages: pam-devel (1.1.5), cyrus-sasl-devel (2.1.25),
                   sqlite3-devel (3.7.12.1), postgresql-devel (9.1.1), libxml2-devel (2.7.8),
                   libxslt-devel (1.1.26), zlib-devel (1.2.7), libpng14-devel (1.4.11),
                   python3-devel (3.2.3)

For building the documentation you need 'libxslt', 'docbook-style-xsl' and 'doxygen'.
For building the PDF wolfbook install 'fop'.

When rebuilding the SVG images of the documentation you also need 'dia'.

Use WITH_LOCAL_LIBHPDF=1 for PDF support.

For scripting in Python you have to set WITH_PYTHON=1.

OpenSuSE 12.3
-------------

Required packages: boost-devel (1.49.0)
Optional packages: pam-devel (1.1.6), cyrus-sasl-devel (2.1.25),
                   sqlite3-devel (3.7.14.1), postgresql-devel (9.2.4), libxml2-devel (2.9.0),
                   libxslt-devel (1.1.28), zlib-devel (1.2.7), libpng15-devel (1.5.13),
                   python3-devel (3.3.0), openssl-devel (1.0.1e)

For building the documentation you need 'libxslt', 'docbook-style-xsl' and 'doxygen'.
For building the PDF wolfbook install 'fop'.

When rebuilding the SVG images of the documentation you also need 'dia'.

Use WITH_LOCAL_LIBHPDF=1 for PDF support.

For scripting in Python you have to set WITH_PYTHON=1.

SLES 11 SP1
-----------

Optional packages: pam-devel (1.0.4), cyrus-sasl-devel (2.1.22),
                   sqlite3-devel (3.6.4), postgresql-devel (8.3.9), libxml2-devel (2.7.6),
                   libxslt (1.1.24), zlib-devel (1.2.3), libpng-devel (1.2.31),
                   libicu-devel (4.0.7)

boost is 1.36, compile your own one.

For building the documentation you need 'libxslt', 'docbook-style-xsl' and 'doxygen'.
For building the PDF wolfbook install 'fop'.

When rebuilding the SVG images of the documentation you also need 'dia'.

Use WITH_LOCAL_LIBHPDF=1 for PDF support.

SLES 11 SP2
-----------

Optional packages: pam-devel (1.1.5), cyrus-sasl-devel (2.1.22),
                   sqlite3-devel (3.7.6.3), postgresql-devel (8.3.14), libxml2-devel (2.7.6),
                   libxslt (1.1.24), zlib-devel (1.2.3), libpng-devel (1.2.31),
                   libicu-devel (4.0.7)

boost is 1.36, compile your own one.

For building the documentation you need 'libxslt', 'docbook-style-xsl' and 'doxygen'.
For building the PDF wolfbook install 'fop'.

When rebuilding the SVG images of the documentation you also need 'dia'.

Use WITH_LOCAL_LIBHPDF=1 for PDF support.

Slackware 14.0
--------------

We have boost 1.49.

openssl is there (select the correct "disk" sets while installing)

PAM doesn't exist on Slackware it may be build manually.

Postgresql doesn't exist on Slackware, build your own one:

./configure --prefix=/usr/local/pgsql
make
make install
groupadd -g 990 postgres
useradd -g postgres -u 990 postgres
mkdir /usr/local/pgsql/var
chown -R postgres:users /usr/local/pgsql/var
su postgres
/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/var
exit
cat > /etc/rc.d/rc.postgresql
#!/bin/sh

case "$1" in
        start)
                su -l postgres -s /bin/sh -c "/usr/local/pgsql/bin/pg_ctl  -D /usr/local/pgsql/var -p /usr/local/pgsql/bin/postmaster start  > /dev/null 2>&1" < /dev/null
                ;;
        stop)
                kill `ps -efa | grep postmaster | grep -v grep | awk '{print $2}'`
                ;;
        *)
                echo $"Usage: $0 {start|stop}"
                exit 1
esac

exit 0
(ctrl-D)
chmod 0775 /etc/rc.d/rc.postgresql 
usermod -d /usr/local/pgsql postgres

add PGSQL_DIR=/usr/local/pgsql to Wolframe 'make'

You can of course also take the Postgresql version from SlackBuilds.

Use the local version of FreeImage with WITH_LOCAL_FREEIMAGE=1.

For Python support enable it with WITH_PYTHON=1 and install Python3 from
scratch. Make sure 'python3-config' is in your path:

Install Python 3 with:
./configure --enable-shared
make
make install

Archlinux
---------

Required packages: boost and boost-libs
Optional packages: openssl, pam, libsasl,
                   sqlite, postgresql-libs,
                   libxml2, libxslt, libharu,
                   icu, freeimage, python

For building the documentation you need 'xsltproc', 'docbook-xsl' and 'doxygen'
and 'fop'. Newest versions run only with the SVN version of
'java-xmlgraphics-commons'. Install the package 'java-xmlgraphics-commons-svn'
from the AUR.

When rebuilding the SVG images of the documentation you also need 'dia'.

For building the Oracle database module you need the two packages
'oracle-instantclient-basic', 'oracle-instantclient-sdk' (built
manually from the AUR or from the 'oracle' pacman repository).

Instructions for other Unixes
-----------------------------

FreeBSD 8.4
-----------

Required packages: boost-libs (1.52.0)
Optional packages: cyrus-sasl2 (2.1.26)
                   sqlite3 (3.7.14.1), postgresql92-client (9.2.4),
                   libxml2 (2.8.0), libxslt (1.1.28), png (1.5.14),
                   python33 (3.3.0)

Some boost header files are broken (and they don't fix them!),
for patches see packaging/patches/FreeBSD. They can be applied to
the ports or directly to the installed header files in
'/usr/local/include/boost'.

See 'packaging/patches/FreeBSD' for patches and the ports files.

You need 'gmake' (3.81_4).

So far no PAM support.

Use WITH_LOCAL_LIBHPDF=1 for PDF support.

Use the local version of FreeImage with WITH_LOCAL_FREEIMAGE=1,
as libfreeimageplus is not build in the ports.

FreeImage doesn't build due to a bug in gcc and big double number
handling.

'postgresql92-server' is needed to execute the database tests.

'expect' is needed to execute some tests.
 
FreeBSD 9.2
-----------

Required packages: boost-libs (1.52.0)
Optional packages: cyrus-sasl2 (2.1.26),
                   sqlite3 (3.7.17.1), postgresql92-client (9.2.4),
                   libxml2 (2.8.0), libxslt (1.1.28), png (1.5.17)

Some boost header files are broken (and they don't fix them!),
for patches see packaging/patches/FreeBSD. They can be applied to
the ports or directly to the installed header files in
'/usr/local/include/boost'.

See 'packaging/patches/FreeBSD' for patches and the ports files.

You need 'gmake' (3.82).

So far no PAM support.

Use WITH_LOCAL_LIBHPDF=1 for PDF support.

Use the local version of FreeImage with WITH_LOCAL_FREEIMAGE=1,
as libfreeimageplus is not build in the ports.
FreeImage builds only on 64-bit because of some ill defined constants.

For testing postgresql you also need 'postgresql92-server'.

'expect' is needed to execute some tests.

For scripting in Python you have to set WITH_PYTHON=1. Use the BSD
ports package for python33 as there is no binary Python 3 package.

NetBSD 6.1
----------

Packages are all installed via 'pkgin'.

Required packages: boost (1.53.0)
Optional packages: cyrus-sasl (2.1.26), sqlite3 (3.7.17), postgresql92-client (9.2.4),
                   libxml2 (2.9.1), libxslt (1.1.28), png (1.6.2), 
                   zlib (1.2.8), python33 (3.3.2), icu (51.2)

You need 'gmake' (3.82).

Make sure '/usr/pkg/bin' is part of your PATH.

NetBSD contains SSL libraries per default no packages needed.
Also PAM modules.

For testing you need 'tcl-expect' (8.5.14).

Use WITH_LOCAL_LIBHPDF=1 for PDF support.

For freeimage support build the local version with WITH_LOCAL_FREEIMAGE=1.

For testing postgresql you also need 'postgresql92-server'.

Solaris 10
----------

Solaris 10 (CSW toolchain)
--------------------------

You may have to install a SFWgtar or CSWgtar in order to unpack the
sources. Make sure to rename them to 'gtar' to avoid collisions with
the standard SUN 'tar'!

http://www.opencsw.org

pkgadd -d http://get.opencsw.org/now

pkgutil --install CSWgcc4core CSWgcc4g++ CSWgmake

Make sure the build environment is always set as follows:

PATH=/opt/csw/bin:/usr/ccs/bin:/usr/bin:/bin:/opt/csw/sbin:/usr/sbin:/sbin
export PATH

Stable Boost is too old (CSWboostdevel is 1.33) or it has no ICU locale
support (CSWboost-gcc-dev, 1.49).

There is a boost 1.49 in the unstable repository at:
http://mirror.opencsw.org/opencsw/unstable/sparc/5.10/
Get 'CSWboost-gcc-dev' and install all 'libboost_*' packages
before as prerequisites. Boost ends up in '/opt/csw/cxx' so
make sure to set BOOST_DIR to /opt/csw/gxx/.
Note, the CSW version 1.49 has no support for boost locale and ICU.
If you need ICU support, build boost from scratch.

It has to be compiled from scratch, use the version 1.48.0.

Do not use boost 1.49.0, it has a missing function fchmodat, see
http://lists.boost.org/boost-build/2012/02/25680.php
causing building of libboost_filesystem to fail!

Boost 1.50.0 and 1.51.0 have never been tested with Wolframe, so don't
use those!

Support for 1.52.0 and later is not guaranteed.

SUNWicud/SUNWicu and CSW libicu_dev are both linked for the Forte C++
compiler. You have to compile your own version compiled with the
gcc compiler from CSW:

gtar zxf icu4c-49_1_2-src.tgz
# apply the icu_source_configure patch (for V9 CPU and some standard header files)
cd source/icu
./runConfigureICU Solaris/GCC --prefix=/opt/csw/icu4c-49.1.2
gmake
gmake install

First apply the following patch to 'boost/cstdint.ppp' for boost
(https://svn.boost.org/trac/boost/ticket/6158, see also
'packaging/patches/Solaris/boost-1.48.0' for patch files):

...
namespace boost
{

#if defined(sun) || defined(__sun) 
  typedef signed char int8_t;
#else
  using ::int8_t;             
#endif  
..

Patch the correct architecture (V8 is not really supported, but V8
is also very old) in 'tools/build/v2/user-config.jam':

using gcc : 4.6.3 : g++ : <compileflags>-mcpu=v9 ; 

Apply all compilation patches from 'packaging/patches/Solaris/' now.

Build and install normally:

./bootstrap.sh --prefix=/opt/csw/boost-1.48.0 \
	--with-libraries=thread,filesystem,system,program_options,date_time,regex,locale \
	--with-icu=/opt/csw/icu4c-49.1.2

./b2 -a -sICU_PATH=/opt/csw/icu4c-49.1.2 -d2 install

Optional packages to install from CSW for Wolframe:
  libssl_dev (0.9.8t)
  CSWpostgresql (8.3.1)
  CSWexpect (5.41.1)
  CSWsasl-dev and CSWsasl (2.1.25)
  CSWlibxml2-dev (2-2.7.8)
  CSWlibxslt-dev (1.1.26)
  CSWlibz-dev (1.2.5)
  CSWlibsqlite3-0 and CSWlibsqlite3-dev (3.7.8)

SUNWlxml is too old, use CSWlibxml2.
SUNWlxsl is too old, use CSWlibxslt.
SUNWzlib is missing 64-bit support, use CSWlibz instead!

Use WITH_LOCAL_LIBHPDF=1 for PDF support.

PAM is available natively, just add WITH_PAM=1

For Python scripting you have to compile Python3 by hand, the CSW
packages (CSWpython31 and  CSWpython31-dev) show Forte cflags, so
the packages were build with the Sun compiler.

./configure --prefix=/opt/csw/python-3.3.2/ --enable-shared
gmake
gmake install

Build Wolframe:

LD_RUN_PATH=/opt/csw/lib:/opt/csw/postgresql/lib \
OPENSSL_DIR=/opt/csw PGSQL_DIR=/opt/csw/postgresql \
LIBLT_DIR=/usr BOOST_DIR=/opt/csw/boost-1.48.0 \
	WITH_EXPECT=1 WITH_SSL=1 WITH_SYSTEM_SQLITE3=1 WITH_PGSQL=1 WITH_LUA=1 \
	WITH_LIBXML2=1 WITH_LIBXSLT=1 WITH_PAM=1 WITH_SASL=1 WITH_LOCAL_LIBHPDF=1 \
	WITH_ICU=1 ICU_DIR=/opt/csw/icu4c-49.1.2 \
	WITH_LOCAL_FREEIMAGE=1 \
	WITH_PYTHON=1 \
	gmake \
		CC=gcc CXX=g++ CFLAGS=-mcpu=v9 CXXFLAGS=-mcpu=v9

OpenIndiana 151a8
-----------------

OpenIndiana 151a8 (CSW toolchain)
---------------------------------

Install CSW toolchain (http://www.opencsw.org) and basic development tools:

pkgadd -d http://get.opencsw.org/now

pkgutil --install CSWgcc4core CSWgcc4g++ CSWgmake

You also need the system files:

pkg install pkg:/system/header
pkg install pkg:/developer/library/lint
pkg install system/library/math/header-math

Make sure the build environment is always set as follows:

Make sure /opt/csw/bin is part of your PATH.

Install packages via 'pkgutil'.

Required packages: boost (1.53.0)
Optional packages: CSWlibssl-dev (0.9.8w), CSWsasl and CSWsasl-dev (2.1.25),
                   CSWlibsqlite3-0 and  CSWlibsqlite3-dev (3.7.8),
                   CSWpostgresql-dev (9.1.2), CSWlibxml2-dev (2.7.8),
                   CSWlibxslt-dev1.1.26), CSWlibz-dev (1.2.5)

For testing you need: CSWexpect (5.41.1), CSWpostgresql91-server (9.1.2)

For building boost you need 'CSWlibicu-dev'.

SUNWicud/SUNWicu and CSW libicu_dev are both linked for the Forte C++
compiler. You have to compile your own version compiled with the
gcc compiler from CSW:

gtar zxf icu4c-51_2-src.tgz

apply the solaris XOPEN patch (icu_source_common_uposixdefs_h.patch), then build:

cd source/icu
./runConfigureICU Solaris/GCC --prefix=/opt/csw/icu4c-51.2
gmake
gmake install

Boost itself is not available, so build your own one (use 1.54, I didn't test other
versions so far!):

First apply all patches in 'packaging/patches/Solaris/1.54.0'.
Then build boost with:

./bootstrap.sh --prefix=/opt/csw/boost-1.54.0 \
	--with-icu=/opt/csw/icu4c-51.2 \
	--with-libraries=thread,filesystem,system,program_options,date_time,regex,locale

./b2 -a -sICU_PATH=/opt/csw/icu4c-51.2 -d2 install

For Python scripting you need Python 3. 'CSWpython31-dev' is build with Forte, so
you have to build your own Python:

./configure --prefix=/opt/csw/python-3.3.2/ --enable-shared
gmake
gmake install

