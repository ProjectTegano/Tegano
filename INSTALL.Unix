Build Instructions
==================

Prerequisites
-------------

- gcc c++ 4.1.x or later (preferably 512 MB RAM or Swap)
- GNU make (preferably 3.82 or newer)
- boost 1.43.0 or later
- optionally (WITH_SSL) openssl 0.9.7 or later
- optionally (WITH_LUA) lua 5.1.4 with LuaCoco-1.1.6
  (integrated in subdir 'lua')
- for the optional Qt client
  - optionally (WITH_QT) Qt 4, 4.5.x or later
- for database support
  - optionally (WITH_SQLITE3), WITH_LOCAL_SQLITE3=1 uses the
    supplied amalgamation
  - optionally (WITH_PGSQL)
- for optional authentication mechanisms:
  - optionally (WITH_PAM)
  - optionally (WITH_SASL)
- optionally for testing:
  - optionally (WITH_EXPECT) expect and Tcl 8.4 or later
- optionally (for building the documentation):
  - xsltproc, docboox-xsl-stylesheet: for docbook
  - fop: to produce a nice PDF documentation
  - doxygen: for documentation for programmers
  - dia: to convert images to svg
- optionally (WITH_LIBXML2)
- optionally (WITH_LIBXSLT), needs LIBXML2 too

Configuration of the build
--------------------------

First the build system tries to determine automatically
the paths of the software.

Use 'make help' to find out which options exist (e.g. WITH_SSL).

Use 'make <config options> config' to see what variables
the system would use to build Wolframe.

If you get 'NOT SUPPLIED ON THIS PLATFORM' for some variables
you have either to port the system in 'makefiles/gmake/platform.mk'
or you can build and configure your own version of the package.

In this case copy 'makefiles/gmake/config.mk.template' to your
home directory as '~/config.mk'. Customize '~/config.mk' as needed.

Alternatively you can of course pass all the options as variables 
directory to the invocation of make.

Compile and install boost
-------------------------

./bootstrap.sh --prefix=/usr/local/boost-1.48.0 \
	--with-libraries=thread,filesystem,system,program_options,date_time,regex
./bjam install

configure Wolframe in ~/config.mk and
set BOOST_DIR to /usr/local/boost-1.48.0.

Compile and install openssl
---------------------------

Unless you have a good reason, use the openssl library of
your Linux distribution.

Compile and install Qt
----------------------

./configure --prefix /usr/local/qt-4.7.4 -openssl
make
cd src/3rdparty/webkit/JavaScriptCore/
make
cd -
make install

confiugre Wolframe in ~/config.mk and
set QT_DIR to /usr/local/qt-4.7.4

Build instructions for Linux Distributions
------------------------------------------

RHEL/Centos/SL 5
----------------

Optional packages:
Fetch from normal repository: openssl-devel, pam-devel (0.99.6), cyrus-sasl-devel (2.1.22),
                              sqlite-devel (3.3.6), postgresql-devel (8.1.23), libxml2-devel (2.6.26),
                              libxslt-devel (1.1.17)

Boost is not available in a decent version (1.33), build your own one.

Qt (4.2.1) is too old, compile your own one.

For building the documentation you need 'libxslt', 'doxygen' and
'docbook-style-xsl' (from epel).

RHEL/Centos/SL 6
----------------
(TODO)

Optional packages:
Fetch from normal repository: openssl-devel, pam-devel (0.99.6), cyrus-sasl-devel (2.1.22),
                              sqlite-devel (3.3.6), postgresql-devel (8.1.23),
                              libxml2-devel (2.7.6), libxslt-devel (1.1.26)

Boost is available in an almost usable version (1.39.0), build your own one.

Qt (4.2.1) is too old, compile your own one.

For building the documentation you need 'libxslt', 'doxygen' and
'docbook-style-xsl' (from epel).

Fedora 14
---------

Required pacakges: boost-devel (1.44)
Optional packages: openssl-devel, qt4-devel,
                   pam-devel (1.1.1), cyrus-sasl-devel (2.1.23),
                   sqlite-devel (3.6.23), postgresql-devel (8.4.7),
                   libxml2-devel (2.7.7), libxslt-devel (1.1.26)

Boost is 1.44, but depending on the patch level boost filestystem exists only in
version 2, not in version 3. Build your own one if you get linking problems around
boost::filestystem3:: symbols.

For building the documentation you need 'libxslt', 'docbook-style-xsl' and 'doxygen'.
For building the PDF wolfbook install 'fop'.

When rebuilding the SVG images of the documentation you also need 'dia'.

Fedora 15 
---------

No problems with the supplied packages at all, everything builds out of the box:

Required pacakges: boost-devel (1.46.1)
Optional packages: openssl-devel (0.9.8h), qt4-devel (4.7.2),
                   pam-devel (1.1.3), cyrus-sasl-devel (2.1.23),
                   sqlite-devel (3.7.5), postgresql-devel (9.0.4)

For building the documentation you need 'libxslt', 'docbook-style-xsl' and 'doxygen'.
For building the PDF wolfbook install 'fop'.

When rebuilding the SVG images of the documentation you also need 'dia'.

Fedora 16
---------

No problems with the supplied packages at all, everything builds out of the box:

Required pacakges: boost-devel (1.47.0)
Optional packages: openssl-devel (1.0.0e), qt4-devel (4.7.4),
                   pam-devel (1.1.4), cyrus-sasl-devel (2.1.23),
                   sqlite-devel (3.7.7), postgresql-devel (9.1.1)

For building the documentation you need 'libxslt', 'docbook-style-xsl' and 'doxygen'.
For building the PDF wolfbook install 'fop'.

When rebuilding the SVG images of the documentation you also need 'dia'.

Ubuntu 10.04.1 LTS
------------------

Optional packages: libqt4-dev,
                   libpam-dev (1.1.1), libsasl2-dev (2.1.23),
                   libsqlite3-dev (3.6.22), libpq-dev (8.4.7),
                   libxml2-dev (2.7.6)

libboost-dev is 1.40, too old, missing asio features and property_tree, build
you own boost. gcc on Debian complains a lot about boost header files..

For building the documentation you need 'xsltproc', 'docbook-xsl' and 'doxygen'.

When rebuilding the SVG images of the documentation you also need 'dia'.

For running non-gtest tests you need 'expect'.

For running the Sasl AAAA tests you need 'sasl2-bin'.

For checking the validity of various XML files you need 'libxml2-utils' (for xmllint).

Ubuntu 10.10 Server
-------------------

Optional packages: libssl-dev, libqt4-dev (4.7.0),
                   libpam-dev (1.1.1), libsasl2-dev (2.1.23),
                   libsqlite3-dev (3.7.2), libpq-dev (8.4.7),
                   libxml2-dev (2.7.7)

libboost-dev is 1.42, only missing some new filesystem stuff, but you'll have to
compile your own one.

For building the documentation you need 'xsltproc', 'docbook-xsl' and 'doxygen'.

When rebuilding the SVG images of the documentation you also need 'dia'.

For running non-gtest tests you need 'expect'.

For running the Sasl AAAA tests you need 'sasl2-bin'.

For checking the validity of various XML files you need 'libxml2-utils' (for xmllint).

Ubuntu 11.04
------------

Optional packages: libssl-dev (0.9.8o), libqt4-dev (4.7.2),
                   libpam-dev (1.1.2), libsasl2-dev (2.1.23),
                   libsqlite3-dev (3.7.4), libpq-dev (8.4.8),
                   libxml2-dev (2.7.8), libxslt1-dev (1.1.26)

libboost-dev is 1.42, only missing some new filesystem stuff, but you'll have to
compile your own one.

For building the documentation you need 'xsltproc', 'docbook-xsl' and 'doxygen'.

When rebuilding the SVG images of the documentation you also need 'dia'.

For running non-gtest tests you need 'expect'.

For running the Sasl AAAA tests you need 'sasl2-bin'.

For checking the validity of various XML files you need 'libxml2-utils' (for xmllint).

Ubuntu 11.10
------------

Optional packages: libssl-dev (1.0.0e), libqt4-dev (4.7.4),
                   libpam0g-dev (1.1.3), libsasl2-dev (2.1.24),
                   libsqlite3-dev (3.7.7), libpq-dev (9.1.1),
                   libxml2-dev (2.7.8), libxslt1-dev (1.1.26)
                   libboost-dev (1.46), libboost-program-options1.46-dev,
                   libboost-filesystem1.46-dev, libboost-thread1.46-dev

For building the documentation you need 'xsltproc', 'docbook-xsl' and 'doxygen'.

When rebuilding the SVG images of the documentation you also need 'dia'.

For running non-gtest tests you need 'expect'.

For running the Sasl AAAA tests you need 'sasl2-bin'.

For running the Sqlite3 database tests you need 'sqlite3'.

For checking the validity of various XML files you need 'libxml2-utils' (for xmllint).

Debian 5.0
----------

Optional packages: libqt4-dev, libpam-dev (1.0.1),
                   libsasl2-dev (2.1.22), libsqlite3-dev (3.5.9),
                   libpq-dev (8.3.14), libxml2-dev (2.6.32)

libbost-dev is 1.34, far too old. Compile your own version.

For building the documentation you need 'xsltproc', 'docbook-xsl' and 'doxygen'.

When rebuilding the SVG images of the documentation you also need 'dia'.

For running the Sasl AAAA tests you need 'sasl2-bin'.

For checking the validity of various XML files you need 'libxml2-utils' (for xmllint).

Debian 6.0
----------

Optional packages: libqt4-dev (4.6.3), libpam-dev (1.1.1),
                   libsasl2-dev (2.1.23), libsqlite3-dev (3.7.3),
                   libpq-dev (8.4.7), libxml2-dev (2.7.8)

libboost-dev is 1.42, slightly too old. Compile your own version.

For building the documentation you need 'xsltproc', 'docbook-xsl' and 'doxygen'.

When rebuilding the SVG images of the documentation you also need 'dia'.

For running the Sasl AAAA tests you need 'sasl2-bin'.

For checking the validity of various XML files you need 'libxml2-utils' (for xmllint).

OpenSuSE 11.3
-------------

Optional packages: qt-devel (4.6.3), pam-devel (1.1.1), cyrus-sasl-devel (2.1.23),
                   sqlite3-devel (3.6.23), postgresql-devel (8.4.7)

boost is 1.42, only missing some new filesystem stuff, but you'll have to
compile your own one.

OpenSuSE 11.4
-------------

No problems with the supplied packages at all, everything builds out of the box:

Required packages: boost-devel (1.44.0)
Optional packages: qt-devel (4.7.1), pam-devel (1.1.3), cyrus-sasl-devel (2.1.23),
                   sqlite3-devel (3.7.5), postgresql-devel (9.0.3), libxml2-dev (2.7.8),
                   libxslt-devel (1.1.26)

For building the documentation you need 'libxslt', 'docbook-style-xsl' and 'doxygen'.
For building the PDF wolfbook install 'fop'.

When rebuilding the SVG images of the documentation you also need 'dia'.

SLES 11 SP1
-----------

Optional packages: libqt4-devel (4.6.2), pam-devel (1.0.4), cyrus-sasl-devel (2.1.22),
                   sqlite3-devel (3.6.4), postgresql-devel (8.3.9), libxml2-devel (2.7.6),
                   libxslt (1.1.24)

boost is 1.36, compile your own one.

For building the documentation you need 'libxslt', 'docbook-style-xsl' and 'doxygen'.
For building the PDF wolfbook install 'fop'.

When rebuilding the SVG images of the documentation you also need 'dia'.

Slackware 13.1
--------------

boost is 1.42, only missing some new filesystem stuff, but you'll have to
compile your own one.

openssl and qt are there (select the correct "disk" sets while installing)
Lua is missing, compile your own one.

PAM doesn't exist on Slackware it may be build manually.
Postgresql doesn't exist on Slackware, build your own one:

./configure --prefix=/home/<myname>/postgresql-9.1.2
make
make install

add PGSQL_DIR=~/postgresql-9.1.2 to Wolframe 'make'

Archlinux
---------

Required packages: boost and boost-libs
Optional packages: openssl, qt, pam, libsasl,
                   sqlite3, postgresql-libs,
                   libxml2, libxslt

For building the documentation you need 'xsltproc', 'docbook-xsl' and 'doxygen'.
'fop' (together with 'java-batik', 'java-commons-io', 'java-avalon-framework',
'java-commons-logging', 'java-xmlgraphics-commons')

Change /etc/fop.conf and make sure it contains the line:
CLASSPATH="$CLASSPATH:/usr/share/java/batik/xml-apis-ext.jar"

When rebuilding the SVG images of the documentation you also need 'dia'.

Instructions for other Unixes
-----------------------------

FreeBSD 8.2
-----------

Required packages: boost-libs (1.45.0)
Optional packages: qt4-gui (4.7.1), cyrus-sasl (2.1.23)
                   sqlite3 (3.7.4), postgresql (9.0.3), libxml2 (2.7.8)

You need 'gmake' (3.81_4).

So far no PAM support.

Solaris 10
----------

Solaris 10 with CSW toolchain
-----------------------------

http://www.opencsw.org

pkgadd -d http://get.opencsw.org/now

pkgutil --install CSWgcc4core CSWgcc4g++ CSWgmake


Make sure the build environment is always set as follows:

PATH=/opt/csw/bin:/usr/ccs/bin:/usr/bin:/bin:/usr/csw/sbin:/usr/sbin:/sbin
export PATH

Boost is too old (CSWboostdevel is 1.33)
and has to be compiled from scratch, use the lastest version (1.48.0).

First apply the following patch to 'boost/cstdint.ppp':

...
namespace boost
{

#if defined(sun) || defined(__sun) 
  typedef signed char int8_t;
#else
  using ::int8_t;             
#endif  
..

Patch the correct architecture (V8 is not really supported, but V8
is also very old) in 'tools/build/v2/user-config.jam':

using gcc : 4.6.2 : g++ : <compileflags>-mcpu=v9 ; 

Build and install normally:

./bootstrap.sh --prefix=/opt/csw/boost-1.48.0 \
	--with-libraries=thread,filesystem,system,program_options,date_time,regex
./b2 -d2 install

Optional packages to install from CSW:
  openssl_devel (0.9.8r)
  CSWpostgresql (8.3.1)
  CSWexpect (5.41.1)
  SUNWlxml
  SUNWlxsl

CSWsqlite3 misses the header files, so use internally supplied version with WITH_LOCAL_SQLITE1=1

Build Wolframe:

OPENSSL_DIR=/opt/csw PGSQL_DIR=/opt/csw/postgresql LIBXML2_DIR=/usr \
	LIBXSLT_DIR=/usr LIBLT_DIR=/usr BOOST_DIR=/opt/csw/boost-1.48.0 \
	WITH_EXPECT=1 WITH_SSL=1 WITH_SQLITE3=1 WITH_PGSQL=1 WITH_LUA=1 WITH_LIBXML2=1 \
	WITH_LIBXSLT=1 WITH_LOCAL_SQLITE3=1 \
	gmake \
		CC=gcc CXX=g++ CFLAGS=-mcpu=v9 CXXFLAGS=-mcpu=v9

Broken and non-working instructions for other Unixes
----------------------------------------------------

Solaris 10
----------

So far only gross compilation with a modern gcc 4.6.2 was successfull. But
this causes other problems for all optional packages which now have to
be cross-compiled (or taken from the sysroot).

The only option I see is building a native gcc 4.6.x toolchain and bootstrap
all packages on our own.

Solaris 10 (SFW gcc toolchain)
------------------------------

CAREFUL: NOT WORKING!! COMPILER TOO OLD..
         visibility problems in XXXprovider.cpp
         lots of C++ compatibility issues, gcc 3.4.3 is

You need 'gcc' and 'gmake' from the companion CD (packages
'SUNWgcc' 3.4.6 and 'SUNWgmake' 3.80).

Make sure the build environment is always set as follows:

PATH=/usr/sfw/bin:/usr/ccs/bin:/usr/bin:/bin:/usr/sfw/sbin:/usr/sbin:/sbin
export PATH

Boost has to be compiled from scratch.

First apply the following patch to 'boost/cstdint.ppp':

...
namespace boost
{

#if defined(sun) || defined(__sun) 
  typedef signed char int8_t;
#else
  using ::int8_t;             
#endif  
..

Build and install normally:

./bootstrap.sh --prefix=/usr/local/boost-1.48.0 \
	--with-libraries=thread,filesystem,system,program_options,date_time,regex
./b2 -d2 install

LibXML2 and LibXSLT are there per default (packages 'SMClxml' and 'SMClxslt') and
are installed in '/usr'.

Install optional packages from the companion CD:


Specify pathes for all third party software you want to include in the build

SQLITE3_DIR=/usr/sfw PGSQL_DIR=/usr/sfw LIBXML2_DIR=/usr/ LIBXSLT_DIR=/usr \
OPENSSL_DIR=/usr/sfw BOOST_DIR=/usr/local/boost-1.48.0 \
	gmake \
	WITH_SSL=1 WITH_SQLITE3=1 WITH_PGSQL=1 WITH_LUA=1 WITH_LIBXML2=1 WITH_LIBXSLT=1 \
	CC=gcc CXX=g++

Problems you may encounter during the build:

* In Lua:

  "visibility attribute not supported in this configuration; ignored"

  This can be ignored

* gmake 3.80 has problems with the dependency include snippets, so the
  dependencies may not be respected. A complete build should work though:

  "../makefiles/gmake/depend.mk:42: no file name for `-include'"


Solaris 10 (Sun Forte toolchain)
--------------------------------

CAREFUL: NOT WORKING!! COMPILER TOO BUGGY..
         Also boost is not really well tested on Solaris with Forte,
         furthermore many tests fail (especially asio!)

You need the Sun Forte Compiler (e.g. SunStudio 12.1).
You need GNU tar to unpack boost-1.48.0.tar.gz.

Set your path so that boost build can find the compiler:

export PATH=/opt/sunstudio12.1/bin:/usr/ccs/bin:${PATH}

Build boost with the sun toolset:

./bootstrap.sh --prefix=/usr/local/boost-1.48.0 \
	--with-toolset=sun \
	--with-libraries=thread,filesystem,system,program_options,date_time,regex

Problems:

Boost tarfile can't be unpacked

/usr/local/bin/tar: Archive value 4294967295 is out of gid_t range -2147483648..2147483647

Those messages can be ignored.

Some @LongLinks may appear, though using a GNU tar.

TODO from here:

BOOST_DIR=/usr/local/boost-1.48.0 make CC=cc CXX=CC WITH_SSL=1 WITH_EXPECT=1 WITH_QT=1 WITH_PAM=1 WITH_SASL=1      WITH_SQLITE3=1 WITH_PGSQL=1 WITH_LUA=1 WITH_LIBXML2=1 WITH_LIBXSLT=1

Solaris 10 (Sunfreeware GCC toolchain)
--------------------------------------

CAREFUL: NOT WORKING!! COMPILER TOO OLD..
         visibility problems in XXXprovider.cpp
         lots of C++ compatibility issues, gcc 3.4.3 is

You neeed 'gmake' (3.81) and 'gcc' (3.4.6). Be careful with the PATH
settings so that 'make' is the GNU make and not the native one
'/usr/ccs/bin/make'. Best ist to install Sunfreeware in '/usr/local'
and set the pathes before building as follows:

PATH=/usr/local/bin:/usr/local/ssl/bin:/usr/ccs/bin:/usr/bin:/bin:/usr/local/bin:/opt/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/sbin
LD_LIBRARY_PATH=/usr/local/lib:/usr/local/ssl/lib:/usr/local/apr/lib
export PATH
export LD_LIBRARY_PATH

Boost has to be compiled from scratch.

Get packages from sunfreeware.com (as long it still exists):

Optional packages: sqlite (SMCsqlite, 3.7.2), postgresql (SMCpgsql, 9.1.0)

#qt4-gui (4.7.1), openpam, cyrus-sasl (2.1.23)
#                 libxml2 (2.7.8)

problems you may have:

visibility attribute not supported in this configuration; ignored
