diff --git a/src/tools/msvc/Install.pm b/src/tools/msvc/Install.pm
index 784d788..d2115db 100644
*** a/src/tools/msvc/Install.pm
--- b/src/tools/msvc/Install.pm
*************** sub CopySolutionOutput
*** 167,172 ****
--- 167,179 ----
      my $rem = qr{Project\("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}"\) = "([^"]+)"};
  
      my $sln = read_file("pgsql.sln") || croak "Could not open pgsql.sln\n";
+ 
+     my $vcproj = 'vcproj';
+     if ($sln =~ /Microsoft Visual Studio Solution File, Format Version (\d+)\.\d+/ && $1 >= 11)
+     {
+         $vcproj = 'vcxproj';
+     }
+ 
      print "Copying build output files...";
      while ($sln =~ $rem)
      {
*************** sub CopySolutionOutput
*** 176,201 ****
  
          $sln =~ s/$rem//;
  
!         my $proj = read_file("$pf.vcproj") || croak "Could not open $pf.vcproj\n";
!         if ($proj !~ qr{ConfigurationType="([^"]+)"})
!         {
!             croak "Could not parse $pf.vcproj\n";
!         }
!         if ($1 == 1)
          {
!             $dir = "bin";
!             $ext = "exe";
          }
!         elsif ($1 == 2)
          {
!             $dir = "lib";
!             $ext = "dll";
          }
          else
          {
! 
!             # Static lib, such as libpgport, only used internally during build, don't install
!             next;
          }
          lcopy("$conf\\$pf\\$pf.$ext","$target\\$dir\\$pf.$ext")
            || croak "Could not copy $pf.$ext\n";
--- 183,230 ----
  
          $sln =~ s/$rem//;
  
!         my $proj = read_file("$pf.$vcproj") || croak "Could not open $pf.$vcproj\n";
!         if ($vcproj eq 'vcproj' && $proj =~ qr{ConfigurationType="([^"]+)"})
          {
!             if ($1 == 1)
!             {
!                 $dir = "bin";
!                 $ext = "exe";
!             }
!             elsif ($1 == 2)
!             {
!                 $dir = "lib";
!                 $ext = "dll";
!             }
!             else
!             {
! 
!                 # Static lib, such as libpgport, only used internally during build, don't install
!                 next;
!             }
          }
!         elsif ($vcproj eq 'vcxproj' && $proj =~ qr{<ConfigurationType>(\w+)</ConfigurationType>})
          {
!             if ($1 eq 'Application')
!             {
!                 $dir = "bin";
!                 $ext = "exe";
!             }
!             elsif ($1 eq 'DynamicLibrary')
!             {
!                 $dir = "lib";
!                 $ext = "dll";
!             }
!             else # 'StaticLibrary'
!             {
! 
!                 # Static lib, such as libpgport, only used internally during build, don't install
!                 next;
!             }
          }
          else
          {
!             croak "Could not parse $pf.$vcproj\n";
          }
          lcopy("$conf\\$pf\\$pf.$ext","$target\\$dir\\$pf.$ext")
            || croak "Could not copy $pf.$ext\n";
diff --git a/src/tools/msvc/Mkvcbuild.pm b/src/tools/msvc/Mkvcbuild.pm
index 8d144bd..5682c96 100644
*** a/src/tools/msvc/Mkvcbuild.pm
--- b/src/tools/msvc/Mkvcbuild.pm
*************** sub mkvcbuild
*** 456,461 ****
--- 456,462 ----
      $pgregress->AddReference($libpgport);
  
      $solution->Save();
+     return $solution->{vcver};
  }
  
  #####################
diff --git a/src/tools/msvc/Project.pm b/src/tools/msvc/Project.pm
index 66752f9..c330fde 100644
*** a/src/tools/msvc/Project.pm
--- b/src/tools/msvc/Project.pm
*************** sub AddDefine
*** 162,168 ****
  {
      my ($self, $def) = @_;
  
!     $def =~ s/"/&quot;&quot;/g;
      $self->{defines} .= $def . ';';
  }
  
--- 162,171 ----
  {
      my ($self, $def) = @_;
  
!     unless ($self->{vcver} eq '10.00')
!     {
!         $def =~ s/"/&quot;&quot;/g;
!     }
      $self->{defines} .= $def . ';';
  }
  
*************** sub DisableLinkerWarnings
*** 339,344 ****
--- 342,361 ----
      $self->{disablelinkerwarnings} .= $warnings;
  }
  
+ sub GetFilename
+ {
+     my ($self) = @_;
+ 
+     if ($self->{vcver} eq '10.00')
+     {
+         return $self->{name} . '.vcxproj';
+     }
+     else
+     {
+         return $self->{name} . '.vcproj';
+     }
+ }
+ 
  sub Save
  {
      my ($self) = @_;
*************** sub Save
*** 355,363 ****
      $self->DisableLinkerWarnings('4197') if ($self->{platform} eq 'x64');
  
      # Dump the project
!     open(F, ">$self->{name}.vcproj") || croak("Could not write to $self->{name}.vcproj\n");
      $self->WriteHeader(*F);
!     $self->WriteReferences(*F);
      print F <<EOF;
   <Files>
  EOF
--- 372,452 ----
      $self->DisableLinkerWarnings('4197') if ($self->{platform} eq 'x64');
  
      # Dump the project
!     my $projectFileName = $self->GetFilename();
!     open(F, ">$projectFileName") || croak("Could not write to $projectFileName\n");
      $self->WriteHeader(*F);
!     $self->WriteFiles(*F);
!     $self->Footer(*F);
!     close(F);
! }
! 
! sub GenerateCustomTool
! {
!     my ($self, $desc, $tool, $output, $cfg) = @_;
!     if (!defined($cfg))
!     {
!         return $self->GenerateCustomTool($desc, $tool, $output, 'Debug')
!           .$self->GenerateCustomTool($desc, $tool, $output, 'Release');
!     }
!     return
! "<FileConfiguration Name=\"$cfg|$self->{platform}\"><Tool Name=\"VCCustomBuildTool\" Description=\"$desc\" CommandLine=\"$tool\" AdditionalDependencies=\"\" Outputs=\"$output\" /></FileConfiguration>";
! }
! 
! sub WriteReferences
! {
!     my ($self, $f) = @_;
! 
!     my @references = @{$self->{references}};
! 
!     if ($self->{vcver} eq '10.00')
!     {
!         if (scalar(@references))
!         {
!             print F <<EOF;
!   <ItemGroup>
! EOF
!             foreach my $ref (@references)
!             {
!                 my $refProjectFileName = $ref->GetFilename();
!                 print F <<EOF;
!     <ProjectReference Include="$refProjectFileName">
!       <Project>$ref->{guid}</Project>
!     </ProjectReference>
! EOF
!             }
!             print F <<EOF;
!   </ItemGroup>
! EOF
!         }
!     }
!     else
!     {
!         print $f " <References>\n";
!         foreach my $ref (@references)
!         {
!             print $f
! "  <ProjectReference ReferencedProjectIdentifier=\"$ref->{guid}\" Name=\"$ref->{name}\" />\n";
!         }
!         print $f " </References>\n";
!     }
! }
! 
! sub WriteFiles
! {
!     my ($self, $f) = @_;
!     if ($self->{vcver} eq '10.00')
!     {
!         $self->WriteVcxprojFiles($f);
!     }
!     else
!     {
!         $self->WriteVcprojFiles($f);
!     }
! }
! 
! sub WriteVcprojFiles
! {
!     my ($self, $f) = @_;
      print F <<EOF;
   <Files>
  EOF
*************** EOF
*** 433,467 ****
          print F ' ' x $#dirstack . "  </Filter>\n";
          pop @dirstack;
      }
!     $self->Footer(*F);
!     close(F);
  }
  
! sub GenerateCustomTool
  {
!     my ($self, $desc, $tool, $output, $cfg) = @_;
!     if (!defined($cfg))
      {
!         return $self->GenerateCustomTool($desc, $tool, $output, 'Debug')
!           .$self->GenerateCustomTool($desc, $tool, $output, 'Release');
      }
-     return
- "<FileConfiguration Name=\"$cfg|$self->{platform}\"><Tool Name=\"VCCustomBuildTool\" Description=\"$desc\" CommandLine=\"$tool\" AdditionalDependencies=\"\" Outputs=\"$output\" /></FileConfiguration>";
  }
  
! sub WriteReferences
  {
      my ($self, $f) = @_;
!     print $f " <References>\n";
!     foreach my $ref (@{$self->{references}})
      {
!         print $f
! "  <ProjectReference ReferencedProjectIdentifier=\"$ref->{guid}\" Name=\"$ref->{name}\" />\n";
      }
-     print $f " </References>\n";
  }
  
! sub WriteHeader
  {
      my ($self, $f) = @_;
  
--- 522,656 ----
          print F ' ' x $#dirstack . "  </Filter>\n";
          pop @dirstack;
      }
!     print $f <<EOF;
!  </Files>
! EOF
  }
  
! sub WriteVcxprojFiles
  {
!     my ($self, $f) = @_;
!     print F <<EOF;
!   <ItemGroup>
! EOF
!     my @grammarFiles = ();
!     my @resourceFiles = ();
!     my %uniquefiles;
!     foreach my $f (sort keys %{ $self->{files} })
      {
!         confess "Bad format filename '$f'\n" unless ($f =~ /^(.*)\\([^\\]+)\.[r]?[cyl]$/);
!         my $dir = $1;
!         my $file = $2;
!         if ($f =~ /\.y$/ or $f =~ /\.l$/)
!         {
!             push @grammarFiles, $f;
!         }
!         elsif ($f =~ /\.rc$/)
!         {
!             push @resourceFiles, $f;
!         }
!         elsif (defined($uniquefiles{$file}))
!         {
! 
!             # File already exists, so fake a new name
!             my $obj = $dir;
!             $obj =~ s/\\/_/g;
! 
!             print F <<EOF;
!     <ClCompile Include="$f">
!       <ObjectFileName Condition="'\$(Configuration)|\$(Platform)'=='Debug|$self->{platform}'">.\\debug\\$self->{name}\\${obj}_$file.obj</ObjectFileName>
!       <ObjectFileName Condition="'\$(Configuration)|\$(Platform)'=='Release|$self->{platform}'">.\\release\\$self->{name}\\${obj}_$file.obj</ObjectFileName>
!     </ClCompile>
! EOF
!         }
!         else
!         {
!             $uniquefiles{$file} = 1;
!             print F <<EOF;
!     <ClCompile Include="$f" />
! EOF
!         }
! 
!     }
!     print F <<EOF;
!   </ItemGroup>
! EOF
!     if (scalar(@grammarFiles))
!     {
!         print F <<EOF;
!   <ItemGroup>
! EOF
!         foreach my $grammarFile (@grammarFiles)
!         {
!             (my $outputFile = $grammarFile) =~ s/\.(y|l)$/.c/;
!             if ($grammarFile =~ /\.y$/)
!             {
!                 $outputFile =~ s{^src\\pl\\plpgsql\\src\\gram.c$}{src\\pl\\plpgsql\\src\\pl_gram.c};
!                 print F <<EOF;
!     <CustomBuild Include="$grammarFile">
!       <Message Condition="'\$(Configuration)|\$(Platform)'=='Debug|$self->{platform}'">Running bison on $grammarFile</Message>
!       <Command Condition="'\$(Configuration)|\$(Platform)'=='Debug|$self->{platform}'">cmd /V:ON /c src\\tools\\msvc\\pgbison.bat $grammarFile</Command>
!       <AdditionalInputs Condition="'\$(Configuration)|\$(Platform)'=='Debug|$self->{platform}'">%(AdditionalInputs)</AdditionalInputs>
!       <Outputs Condition="'\$(Configuration)|\$(Platform)'=='Debug|$self->{platform}'">$outputFile;%(Outputs)</Outputs>
!       <Message Condition="'\$(Configuration)|\$(Platform)'=='Release|$self->{platform}'">Running bison on $grammarFile</Message>
!       <Command Condition="'\$(Configuration)|\$(Platform)'=='Release|$self->{platform}'">cmd /V:ON /c src\\tools\\msvc\\pgbison.bat $grammarFile</Command>
!       <AdditionalInputs Condition="'\$(Configuration)|\$(Platform)'=='Release|$self->{platform}'">%(AdditionalInputs)</AdditionalInputs>
!       <Outputs Condition="'\$(Configuration)|\$(Platform)'=='Release|$self->{platform}'">$outputFile;%(Outputs)</Outputs>
!     </CustomBuild>
! EOF
!             }
!             else #if ($grammarFile =~ /\.l$/)
!             {
!                 print F <<EOF;
!     <CustomBuild Include="$grammarFile">
!       <Message Condition="'\$(Configuration)|\$(Platform)'=='Debug|$self->{platform}'">Running flex on $grammarFile</Message>
!       <Command Condition="'\$(Configuration)|\$(Platform)'=='Debug|$self->{platform}'">src\\tools\\msvc\\pgflex.bat $grammarFile</Command>
!       <AdditionalInputs Condition="'\$(Configuration)|\$(Platform)'=='Debug|$self->{platform}'">%(AdditionalInputs)</AdditionalInputs>
!       <Outputs Condition="'\$(Configuration)|\$(Platform)'=='Debug|$self->{platform}'">$outputFile;%(Outputs)</Outputs>
!       <Message Condition="'\$(Configuration)|\$(Platform)'=='Release|$self->{platform}'">Running flex on $grammarFile</Message>
!       <Command Condition="'\$(Configuration)|\$(Platform)'=='Release|$self->{platform}'">src\\tools\\msvc\\pgflex.bat $grammarFile</Command>
!       <AdditionalInputs Condition="'\$(Configuration)|\$(Platform)'=='Release|$self->{platform}'">%(AdditionalInputs)</AdditionalInputs>
!       <Outputs Condition="'\$(Configuration)|\$(Platform)'=='Release|$self->{platform}'">$outputFile;%(Outputs)</Outputs>
!     </CustomBuild>
! EOF
!             }
!         }
!         print F <<EOF;
!   </ItemGroup>
! EOF
!     }
!     if (scalar(@resourceFiles))
!     {
!         print F <<EOF;
!   <ItemGroup>
! EOF
!         foreach my $rcFile (@resourceFiles)
!         {
!             print F <<EOF;
!     <ResourceCompile Include="$rcFile" />
! EOF
!         }
!         print F <<EOF;
!   </ItemGroup>
! EOF
      }
  }
  
! sub WriteHeader
  {
      my ($self, $f) = @_;
!     if ($self->{vcver} eq '10.00')
      {
!         $self->WriteVcxprojHeader($f);
!     }
!     else
!     {
!         $self->WriteVcprojHeader($f);
!         $self->WriteReferences($f);
      }
  }
  
! sub WriteVcprojHeader
  {
      my ($self, $f) = @_;
  
*************** sub WriteHeader
*** 471,489 ****
   <Platforms><Platform Name="$self->{platform}"/></Platforms>
   <Configurations>
  EOF
!     $self->WriteConfiguration($f, 'Debug',
          { defs=>'_DEBUG;DEBUG=1;', wholeopt=>0, opt=>0, strpool=>'false', runtime=>3 });
!     $self->WriteConfiguration($f, 'Release',
          { defs=>'', wholeopt=>0, opt=>3, strpool=>'true', runtime=>2 });
      print $f <<EOF;
   </Configurations>
  EOF
  }
  
! sub WriteConfiguration
  {
!     my ($self, $f, $cfgname, $p) = @_;
!     my $cfgtype = ($self->{type} eq "exe")?1:($self->{type} eq "dll"?2:4);
      my $libcfg = (uc $cfgname eq "RELEASE")?"MD":"MDd";
      my $libs = '';
      foreach my $lib (@{$self->{libraries}})
--- 660,727 ----
   <Platforms><Platform Name="$self->{platform}"/></Platforms>
   <Configurations>
  EOF
!     $self->WriteVcprojConfiguration($f, 'Debug',
          { defs=>'_DEBUG;DEBUG=1;', wholeopt=>0, opt=>0, strpool=>'false', runtime=>3 });
!     $self->WriteVcprojConfiguration($f, 'Release',
          { defs=>'', wholeopt=>0, opt=>3, strpool=>'true', runtime=>2 });
      print $f <<EOF;
   </Configurations>
  EOF
  }
  
! sub WriteVcxprojHeader
  {
!     my ($self, $f) = @_;
! 
!     print $f <<EOF;
! <?xml version="1.0" encoding="Windows-1252"?>
! <Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
!   <ItemGroup Label="ProjectConfigurations">
! EOF
!     $self->WriteVcxprojConfigurationHeader($f, 'Debug');
!     $self->WriteVcxprojConfigurationHeader($f, 'Release');
!     print $f <<EOF;
!   </ItemGroup>
!   <PropertyGroup Label="Globals">
!     <ProjectGuid>$self->{guid}</ProjectGuid>
!   </PropertyGroup>
!   <Import Project="\$(VCTargetsPath)\\Microsoft.Cpp.Default.props" />
! EOF
!     $self->WriteVcxprojConfigurationPropertyGroup($f, 'Release',{ wholeopt=>'false' });
!     $self->WriteVcxprojConfigurationPropertyGroup($f, 'Debug',{ wholeopt=>'false' });
!     print $f <<EOF;
!   <Import Project="\$(VCTargetsPath)\\Microsoft.Cpp.props" />
!   <ImportGroup Label="ExtensionSettings">
!   </ImportGroup>
! EOF
!     $self->WriteVcxprojPropertySheetsPropertyGroup($f, 'Release');
!     $self->WriteVcxprojPropertySheetsPropertyGroup($f, 'Debug');
!     print $f <<EOF;
!   <PropertyGroup Label="UserMacros" />
!   <PropertyGroup>
!     <_ProjectFileVersion>10.0.30319.1</_ProjectFileVersion>
! EOF
!     $self->WriteVcxprojAdditionalProperties($f, 'Debug');
!     $self->WriteVcxprojAdditionalProperties($f, 'Release');
!     print $f <<EOF;
!   </PropertyGroup>
! EOF
!     $self->WriteVcxprojItemDefinitionGroup(
!         $f, 'Debug',
!         {
!             defs=>'_DEBUG;DEBUG=1;',
!             opt=>'Disabled',
!             strpool=>'false',
!             runtime=>'MultiThreadedDebugDLL'
!         }
!     );
!     $self->WriteVcxprojItemDefinitionGroup($f, 'Release',
!         { defs=>'', opt=>'Full', strpool=>'true', runtime=>'MultiThreadedDLL' });
! }
! 
! sub GetAdditionalLinkerDependencies
! {
!     my ($self, $cfgname, $seperator) = @_;
      my $libcfg = (uc $cfgname eq "RELEASE")?"MD":"MDd";
      my $libs = '';
      foreach my $lib (@{$self->{libraries}})
*************** sub WriteConfiguration
*** 497,506 ****
                  last;
              }
          }
!         $libs .= $xlib . " ";
      }
!     $libs =~ s/ $//;
      $libs =~ s/__CFGNAME__/$cfgname/g;
  
      my $targetmachine = $self->{platform} eq 'Win32' ? 1 : 17;
  
--- 735,752 ----
                  last;
              }
          }
!         $libs .= $xlib . $seperator;
      }
!     $libs =~ s/.$//;
      $libs =~ s/__CFGNAME__/$cfgname/g;
+     return $libs;
+ }
+ 
+ sub WriteVcprojConfiguration
+ {
+     my ($self, $f, $cfgname, $p) = @_;
+     my $cfgtype = ($self->{type} eq "exe")?1:($self->{type} eq "dll"?2:4);
+     my $libs = $self->GetAdditionalLinkerDependencies($cfgname, ' ');
  
      my $targetmachine = $self->{platform} eq 'Win32' ? 1 : 17;
  
*************** EOF
*** 558,571 ****
  EOF
  }
  
  sub Footer
  {
      my ($self, $f) = @_;
  
      print $f <<EOF;
-  </Files>
   <Globals/>
  </VisualStudioProject>
  EOF
  }
  
--- 804,979 ----
  EOF
  }
  
+ sub WriteVcxprojConfigurationHeader
+ {
+     my ($self, $f, $cfgname) = @_;
+     print $f <<EOF;
+     <ProjectConfiguration Include="$cfgname|$self->{platform}">
+       <Configuration>$cfgname</Configuration>
+       <Platform>$self->{platform}</Platform>
+     </ProjectConfiguration>
+ EOF
+ }
+ 
+ sub WriteVcxprojConfigurationPropertyGroup
+ {
+     my ($self, $f, $cfgname, $p) = @_;
+     my $cfgtype =
+       ($self->{type} eq "exe")
+       ?'Application'
+       :($self->{type} eq "dll"?'DynamicLibrary':'StaticLibrary');
+ 
+     print $f <<EOF;
+   <PropertyGroup Condition="'\$(Configuration)|\$(Platform)'=='$cfgname|$self->{platform}'" Label="Configuration">
+     <ConfigurationType>$cfgtype</ConfigurationType>
+     <UseOfMfc>false</UseOfMfc>
+     <CharacterSet>MultiByte</CharacterSet>
+     <WholeProgramOptimization>$p->{wholeopt}</WholeProgramOptimization>
+   </PropertyGroup>
+ EOF
+ }
+ 
+ sub WriteVcxprojPropertySheetsPropertyGroup
+ {
+     my ($self, $f, $cfgname) = @_;
+     print $f <<EOF;
+   <ImportGroup Condition="'\$(Configuration)|\$(Platform)'=='$cfgname|$self->{platform}'" Label="PropertySheets">
+     <Import Project="\$(UserRootDir)\\Microsoft.Cpp.\$(Platform).user.props" Condition="exists('\$(UserRootDir)\\Microsoft.Cpp.\$(Platform).user.props')" Label="LocalAppDataPlatform" />
+   </ImportGroup>
+ EOF
+ }
+ 
+ sub WriteVcxprojAdditionalProperties
+ {
+     my ($self, $f, $cfgname) = @_;
+     print $f <<EOF;
+     <OutDir Condition="'\$(Configuration)|\$(Platform)'=='$cfgname|$self->{platform}'">.\\$cfgname\\$self->{name}\\</OutDir>
+     <IntDir Condition="'\$(Configuration)|\$(Platform)'=='$cfgname|$self->{platform}'">.\\$cfgname\\$self->{name}\\</IntDir>
+     <LinkIncremental Condition="'\$(Configuration)|\$(Platform)'=='$cfgname|$self->{platform}'">false</LinkIncremental>
+ EOF
+ }
+ 
+ sub WriteVcxprojItemDefinitionGroup
+ {
+     my ($self, $f, $cfgname, $p) = @_;
+     my $cfgtype =
+       ($self->{type} eq "exe")
+       ?'Application'
+       :($self->{type} eq "dll"?'DynamicLibrary':'StaticLibrary');
+     my $libs = $self->GetAdditionalLinkerDependencies($cfgname, ';');
+ 
+     my $targetmachine = $self->{platform} eq 'Win32' ? 'MachineX86' : 'MachineX64';
+ 
+     my $includes = $self->{includes};
+     unless ($includes eq '' or $includes =~ /;$/)
+     {
+         $includes .= ';';
+     }
+     print $f <<EOF;
+   <ItemDefinitionGroup Condition="'\$(Configuration)|\$(Platform)'=='$cfgname|$self->{platform}'">
+     <ClCompile>
+       <Optimization>$p->{opt}</Optimization>
+       <AdditionalIncludeDirectories>$self->{prefixincludes}src/include;src/include/port/win32;src/include/port/win32_msvc;$includes\%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+       <PreprocessorDefinitions>WIN32;_WINDOWS;__WINDOWS__;__WIN32__;EXEC_BACKEND;WIN32_STACK_RLIMIT=4194304;_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE$self->{defines}$p->{defs}\%(PreprocessorDefinitions)</PreprocessorDefinitions>
+       <StringPooling>$p->{strpool}</StringPooling>
+       <RuntimeLibrary>$p->{runtime}</RuntimeLibrary>
+       <DisableSpecificWarnings>$self->{disablewarnings};\%(DisableSpecificWarnings)</DisableSpecificWarnings>
+       <AdditionalOptions>/MP \%(AdditionalOptions)</AdditionalOptions>
+       <AssemblerOutput>
+       </AssemblerOutput>
+       <AssemblerListingLocation>.\\$cfgname\\$self->{name}\\</AssemblerListingLocation>
+       <ObjectFileName>.\\$cfgname\\$self->{name}\\</ObjectFileName>
+       <ProgramDataBaseFileName>.\\$cfgname\\$self->{name}\\</ProgramDataBaseFileName>
+       <BrowseInformation>false</BrowseInformation>
+       <WarningLevel>Level3</WarningLevel>
+       <SuppressStartupBanner>true</SuppressStartupBanner>
+       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+       <CompileAs>Default</CompileAs>
+     </ClCompile>
+     <Link>
+       <OutputFile>.\\$cfgname\\$self->{name}\\$self->{name}.$self->{type}</OutputFile>
+       <AdditionalDependencies>$libs;\%(AdditionalDependencies)</AdditionalDependencies>
+       <SuppressStartupBanner>true</SuppressStartupBanner>
+       <AdditionalLibraryDirectories>\%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
+       <IgnoreSpecificDefaultLibraries>libc;\%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
+       <StackReserveSize>4194304</StackReserveSize>
+       <GenerateDebugInformation>true</GenerateDebugInformation>
+       <ProgramDatabaseFile>.\\$cfgname\\$self->{name}\\$self->{name}.pdb</ProgramDatabaseFile>
+       <GenerateMapFile>false</GenerateMapFile>
+       <MapFileName>.\\$cfgname\\$self->{name}\\$self->{name}.map</MapFileName>
+       <SubSystem>Console</SubSystem>
+       <TargetMachine>$targetmachine</TargetMachine>
+ EOF
+     if ($self->{disablelinkerwarnings})
+     {
+         print $f
+ "      <AdditionalOptions>/ignore:$self->{disablelinkerwarnings} \%(AdditionalOptions)</AdditionalOptions>\n";
+     }
+     if ($self->{implib})
+     {
+         my $l = $self->{implib};
+         $l =~ s/__CFGNAME__/$cfgname/g;
+         print $f "      <ImportLibrary>$l</ImportLibrary>\n";
+     }
+     if ($self->{def})
+     {
+         my $d = $self->{def};
+         $d =~ s/__CFGNAME__/$cfgname/g;
+         print $f "      <ModuleDefinitionFile>$d</ModuleDefinitionFile>\n";
+     }
+     print $f <<EOF;
+     </Link>
+     <ResourceCompile>
+       <AdditionalIncludeDirectories>src\\include;\%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+     </ResourceCompile>
+ EOF
+     if ($self->{builddef})
+     {
+         print $f <<EOF;
+     <PreLinkEvent>
+       <Message>Generate DEF file</Message>
+       <Command>perl src\\tools\\msvc\\gendef.pl $cfgname\\$self->{name} $self->{platform}</Command>
+     </PreLinkEvent>
+ EOF
+     }
+     print $f <<EOF;
+   </ItemDefinitionGroup>
+ EOF
+ }
+ 
  sub Footer
  {
      my ($self, $f) = @_;
+     if ($self->{vcver} eq '10.00')
+     {
+         $self->WriteReferences($f);
+         $self->VcxprojFooter($f);
+     }
+     else
+     {
+         $self->VcprojFooter($f);
+     }
+ }
+ 
+ sub VcprojFooter
+ {
+     my ($self, $f) = @_;
  
      print $f <<EOF;
   <Globals/>
  </VisualStudioProject>
+ EOF
+ }
+ 
+ sub VcxprojFooter
+ {
+     my ($self, $f) = @_;
+ 
+     print $f <<EOF;
+   <Import Project="\$(VCTargetsPath)\\Microsoft.Cpp.targets" />
+   <ImportGroup Label="ExtensionTargets">
+   </ImportGroup>
+ </Project>
  EOF
  }
  
diff --git a/src/tools/msvc/Solution.pm b/src/tools/msvc/Solution.pm
index b737e1e..651650b 100644
*** a/src/tools/msvc/Solution.pm
--- b/src/tools/msvc/Solution.pm
*************** sub DetermineToolVersions
*** 62,78 ****
  {
      my $self = shift;
  
!     # Determine version of vcbuild command, to set proper verison of visual studio
!     open(P,"vcbuild /? |") || die "vcbuild command not found";
      my $line = <P>;
      close(P);
!     if ($line !~ /^Microsoft\s*\(R\) Visual C\+\+ [^-]+ - \D+(\d+)\.00\.\d+/)
      {
!         die "Unable to determine vcbuild version from first line of output!";
      }
!     if ($1 == 8) { $self->{vcver} = '8.00' }
!     elsif ($1 == 9) { $self->{vcver} = '9.00' }
!     else { die "Unsupported version of Visual Studio: $1" }
      print "Detected Visual Studio version $self->{vcver}\n";
  
      # Determine if we are in 32 or 64-bit mode. Do this by seeing if CL has
--- 62,82 ----
  {
      my $self = shift;
  
!     # Determine version of msbuild command, to set proper verison of visual studio
!     open(P,"msbuild /? |") || die "msbuild command not found";
      my $line = <P>;
      close(P);
! 
!     # don't be too restrictive within this regex as Microsoft localizes the
!     # output of msbuid
!     if ($line !~ /^Microsoft\s*\(R\).Build\D+(\d+)\.\d+\.\d+\.\d+/)
      {
!         die "Unable to determine msbuild version from first line of output!";
      }
!     if ($1 == 2) { $self->{vcver} = '8.00' }
!     elsif ($1 == 3) { $self->{vcver} = '9.00' }
!     elsif ($1 == 4) { $self->{vcver} = '10.00' }
!     else { die "Unsupported version of Visual Studio." }
      print "Detected Visual Studio version $self->{vcver}\n";
  
      # Determine if we are in 32 or 64-bit mode. Do this by seeing if CL has
*************** sub AddProject
*** 446,456 ****
--- 450,505 ----
      return $proj;
  }
  
+ sub GetVisualStudioName
+ {
+     my ($self) = @_;
+     if ($self->{vcver} eq '8.00')
+     {
+         return 'Visual Studio 2005';
+     }
+     elsif ($self->{vcver} eq '9.00')
+     {
+         return 'Visual Studio 2008';
+     }
+     elsif ($self->{vcver} eq '10.00')
+     {
+         return 'Visual Studio 2010';
+     }
+     else
+     {
+         return 'Unknown';
+     }
+ }
+ 
+ sub GetSolutionFileVersion
+ {
+     my ($self) = @_;
+     if ($self->{vcver} eq '8.00')
+     {
+         return '9.00';
+     }
+     elsif ($self->{vcver} eq '9.00')
+     {
+         return '10.00';
+     }
+     elsif ($self->{vcver} eq '10.00')
+     {
+         return '11.00';
+     }
+     else
+     {
+         return 'Unknown';
+     }
+ }
+ 
  sub Save
  {
      my ($self) = @_;
      my %flduid;
  
+     my $solutionFileVersion = $self->GetSolutionFileVersion();
+     my $visualStudioName = $self->GetVisualStudioName();
+ 
      $self->GenerateFiles();
      foreach my $fld (keys %{$self->{projects}})
      {
*************** sub Save
*** 462,477 ****
  
      open(SLN,">pgsql.sln") || croak "Could not write to pgsql.sln\n";
      print SLN <<EOF;
! Microsoft Visual Studio Solution File, Format Version 9.00
! # Visual Studio 2005
  EOF
  
      foreach my $fld (keys %{$self->{projects}})
      {
          foreach my $proj (@{$self->{projects}->{$fld}})
          {
              print SLN <<EOF;
! Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "$proj->{name}", "$proj->{name}.vcproj", "$proj->{guid}"
  EndProject
  EOF
          }
--- 511,527 ----
  
      open(SLN,">pgsql.sln") || croak "Could not write to pgsql.sln\n";
      print SLN <<EOF;
! Microsoft Visual Studio Solution File, Format Version $solutionFileVersion
! # $visualStudioName
  EOF
  
      foreach my $fld (keys %{$self->{projects}})
      {
          foreach my $proj (@{$self->{projects}->{$fld}})
          {
+             my $projectFileName = $proj->GetFilename();
              print SLN <<EOF;
! Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "$proj->{name}", "$projectFileName", "$proj->{guid}"
  EndProject
  EOF
          }
diff --git a/src/tools/msvc/build.pl b/src/tools/msvc/build.pl
index 66b5c4c..151849b 100644
*** a/src/tools/msvc/build.pl
--- b/src/tools/msvc/build.pl
*************** our $config;
*** 33,39 ****
  require "config_default.pl";
  require "config.pl" if (-f "src/tools/msvc/config.pl");
  
! Mkvcbuild::mkvcbuild($config);
  
  # check what sort of build we are doing
  
--- 33,39 ----
  require "config_default.pl";
  require "config.pl" if (-f "src/tools/msvc/config.pl");
  
! my $vcver = Mkvcbuild::mkvcbuild($config);
  
  # check what sort of build we are doing
  
*************** elsif ($ARGV[0] ne "RELEASE")
*** 50,56 ****
  
  # ... and do it
  
! if ($buildwhat)
  {
      system("vcbuild $buildwhat.vcproj $bconf");
  }
--- 50,60 ----
  
  # ... and do it
  
! if ($buildwhat and $vcver eq '10.00')
! {
!     system("msbuild $buildwhat.vcxproj /verbosity:detailed /p:Configuration=$bconf");
! }
! elsif ($buildwhat)
  {
      system("vcbuild $buildwhat.vcproj $bconf");
  }
diff --git a/src/tools/msvc/clean.bat b/src/tools/msvc/clean.bat
index 753ab39..aef1e9f 100755
*** a/src/tools/msvc/clean.bat
--- b/src/tools/msvc/clean.bat
*************** if exist ..\msvc if exist ..\..\..\src c
*** 10,17 ****
--- 10,21 ----
  if exist debug rd /s /q debug
  if exist release rd /s /q release
  for %%f in (*.vcproj) do del %%f
+ for %%f in (*.vcxproj) do del %%f
+ for %%f in (*.vcxproj.user) do del %%f
  if exist pgsql.sln del /q pgsql.sln
  if exist pgsql.sln.cache del /q pgsql.sln.cache
+ if exist pgsql.sdf del /q pgsql.sdf
+ if exist pgsql.suo del /q /a:H pgsql.suo
  del /s /q src\bin\win32ver.rc 2> NUL
  del /s /q src\interfaces\win32ver.rc 2> NUL
  if exist src\backend\win32ver.rc del /q src\backend\win32ver.rc
