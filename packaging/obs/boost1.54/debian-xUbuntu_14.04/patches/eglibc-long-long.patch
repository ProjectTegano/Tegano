Description: Assume that glibc >= 2.17 has int64_t support.
 eglibc 2.18 drops __GLIBC_HAVE_LONG_LONG, as it's assumed to be
 supported everywhere.
Origin: upstream, https://svn.boost.org/trac/boost/changeset/84950?format=diff&new=84950
Bug: https://svn.boost.org/trac/boost/ticket/8731

Index: boost1.54-1.54.0/boost/cstdint.hpp
===================================================================
--- boost1.54-1.54.0.orig/boost/cstdint.hpp	2013-12-16 00:19:30.324631260 +1100
+++ boost1.54-1.54.0/boost/cstdint.hpp	2013-12-16 00:19:30.324631260 +1100
@@ -41,7 +41,10 @@
 // so we disable use of stdint.h when GLIBC does not define __GLIBC_HAVE_LONG_LONG.
 // See https://svn.boost.org/trac/boost/ticket/3548 and http://sources.redhat.com/bugzilla/show_bug.cgi?id=10990
 //
-#if defined(BOOST_HAS_STDINT_H) && (!defined(__GLIBC__) || defined(__GLIBC_HAVE_LONG_LONG))
+#if defined(BOOST_HAS_STDINT_H)                                 \
+  && (!defined(__GLIBC__)                                       \
+      || defined(__GLIBC_HAVE_LONG_LONG)                        \
+      || (defined(__GLIBC__) && ((__GLIBC__ > 2) || ((__GLIBC__ == 2) && (__GLIBC_MINOR__ >= 17)))))
 
 // The following #include is an implementation artifact; not part of interface.
 # ifdef __hpux
