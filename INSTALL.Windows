Prerequisites
-------------

- Visual C++ (cl, link and nmake), VC8 or later
- Platform SDK 6.0a or later
- boost 1.43.0 or later
- optionally (WITH_SSL) openssl 0.9.8 or later
- optionally (WITH_LUA) lua 5.1.4 with LuaCoco-1.1.6
  (integrated in subdir 'lua')
- optionally (WITH_QT) Qt 4, 4.5.x or later
- for optional authentication mechanisms:
  - optionally (WITH_SQLITE3)
  - optionally (WITH_PGSQL)
- optionally (WITH_EXPECT) Expect and Tcl 8.4 or later
- optionally (WITH_LIBXML2)
- optionally for packaging: Wix 3.5 or later

Boost
-----

Get boost from http://boostpro.com or http://boost.teeks99.com

Install for instance into C:\Program Files\Boost\Boost_1_46

configure 'makefile\nmake\config.mk' and 
set BOOST_DIR to C:\Program Files\Boost\Boost_1_46

Compile and install boost
-------------------------

If you insist to compile Boost from scratch, do the following
in a Visual Studio C++ command line:

bootstrap
.\bjam --prefix=C:\<myplace>\boost_1_46_0
	--with-thread --with-filesystem --with-system --with-program_options --with-date_time --with-regex 
	architecture=x86 address-model=64 toolset=msvc 
	install

with variant, architecture, address-mode and toolset fitting your needs.

set BOOST_DIR to C:\<myhome>\boost-1_46_0

These instructions are for boost 1.46, other versions may vary.

Careful: Always check %LIB% and the 'setenv' environment of the SDK! You can
end up in 64-bit code using 32-bit libraries otherwise. :-)

Notes on special Boost versions
-------------------------------

Boost 1.44
----------

Boost 1.44 needs an essential patch, see:
https://svn.boost.org/trac/boost/ticket/4487

Compile and install openssl
---------------------------

Easiest is to get the native Windows binary version from:

http://www.slproweb.com/products/Win32OpenSSL.html

Despite the name you get also 64-bit versions there.

Do not copy the OpenSSL binaries to the Windows system directory, copy
them to the Bin subdirectory of the OpenSSL installation directory!

Install Tcl and Expect
----------------------

Download from http://www.activestate.com/activetcl/ 
(32-bit version, the 64-bit version had no Expect available,
at least at the time of writting)

Install ActiveTcl 8.5 to C:\tcl

Then adapt in 'makefiles\nmake\config.mk':

TCP_DIR = C:\tcl

Install Expect 1.1 with:

cd c:\Tcl\bin
teacup install Expect

Telnet is not enable by default, enable it in "Control Panel",
"Windows Features" or call:

pkgmgr /iu:"TelnetClient"

Compile and install Qt
----------------------

Easiest is to get a precompiled MSVC version of the SDK.
But this version is missing SSL support.

If you insist on compiling on your own:

Get the MinGW version of the SDK.
If you want SSL support, get also OpenSSL (see above).

(The Openssl parts in INCLUDE, LIB and configure are needed if you enable SSL with WITH_SSL=1)

Make sure the SDK variables for compilation and linking are set correctly:

set PLATFORM_SDK=D:\Program Files\Microsoft Platform SDK for Windows Server 2003 R2
set OPENSSL_DIR=D:\Program Files\OpenSSL-1.0.0d
set INCLUDE=%INCLUDE%;%PLATFORM_SDK%\include;%OPENSSL_DIR%\include
set LIB=%LIB%;%PLATFORM_SDK%\lib;%OPENSSL_DIR%\lib
set PATH=%PATH%;%PLATFORM_SDK%\bin

Clean up first the MinGW build with:

nmake confclean
del bin\*.dll bin\*.exe
del lib\*.a

Configure and build it with:

configure -platform win32-msvc2008 -release -openssl
nmake

See also http://qtnode.net/wiki/Qt4_with_Visual_Studio.

Finally adapt QT_DIR in 'makefiles\nmake\config.mk'.

Postgresql C client library
---------------------------

Install all in one package. You may have to install libpq64
as an add-on using the Stack Builder.

Adapt PGSQL_DIR in 'makefiles\nmake\config.mk'.

Compiling Postgresql
--------------------

This is required if you want for instance to build the debug
version of the libpq library.

You need at least ActivePerl installed.

cd src\tools\msvc
copy config_default.pl config.pl

Adapt config.pl to your needs.

You may have to touch preproc.c and preproc.h if build wants
to start bison and you don't have bison installed.

build DEBUG

install C:\<somewhere>

Notes for Postgreslql 9.0.4
---------------------------

If your disable OpenSSL (for instance for debugging), you have
to touch sslinfo.sql in contrib/sslinfo Dito for uuid-ossp.sql,
pgxml.sql.in.

LibXML2
-------

Best is to compile your own libraries

Get sources from: ftp://xmlsoft.org/libxml2/

You have to fix the Makefile.msvc:

There are some + where they don't belong:

+!if "$(WITH_ICU)" == "1"
+LIBS = $(LIBS) icu.lib
+!endif

When there are spaces in the installation prefix, fix it manually in 'config.msvc'
before installing the library:

BINPREFIX="$(PREFIX)\bin"
INCPREFIX="$(PREFIX)\include"
LIBPREFIX="$(PREFIX)\lib"
SOPREFIX="$(PREFIX)\lib"

libxml2-2.7.8
cd win32
cscript configure.js compiler=msvc prefix="D:\Program Files\libxml2-2.7.8.win32" zlib=no iconv=no
#cscript configure.js compiler=msvc prefix="C:\cygwin\home\Andreas\libxml2-2.7.8.win64" zlib=no iconv=no
# if necessary, add qwuotes in config.msvc, PREFIX="C:\Program Files\libxml2-2.7.8.win64"
nmake /nologo /f Makefile.msvc all
nmake /nologo /f Makefile.msvc install

Adapt LIBXML2_DIR in 'makefiles\nmake\config.mk'.

LibXSLT
-------

Best is to compile your own libraries

Get sources from: ftp://xmlsoft.org/libxslt/

libxslt-1.1.26
cd win32
cscript configure.js compiler=msvc prefix="D:\Program Files\libxslt-1.1.26.win32" zlib=no iconv=no
	include="D:\Program Files\libxml2-2.7.8.win32\include"
#cscript configure.js compiler=msvc prefix="C:\cygwin\home\Andreas\libxslt-1.1.26.win64" zlib=no iconv=no
#	include="C:\cygwin\home\Andreas\libxml2-2.7.8.win64\include"
# if necessary, add qwuotes in config.msvc, PREFIX="C:\Program Files\libxml2-2.7.8.win64" and
# INCLUDE="xxx"
# copy libxml2.lib to 'win32\bin.msvc'
nmake /nologo /f Makefile.msvc all
nmake /nologo /f Makefile.msvc install

Adapt LIBXSLT_DIR in 'makefiles\nmake\config.mk'.
