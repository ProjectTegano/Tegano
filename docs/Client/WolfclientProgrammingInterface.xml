<sect1>
	<title>Programming the Interface</title>
	<para>
		Programming means we annotate the XML of the UI form files with
		some extra properties. They control the following things:
		<itemizedlist>
			<listitem>
			<para>
				Which events in the current form replace it with a new form,
				e. g. clicking the <emphasis>Edit</emphasis> button loads
				the form called <emphasis>edit_item</emphasis>.
			</para>
			</listitem>
			<listitem>
			<para>
				When and how requests to the Wolframe server should be sent
				and how the results should be interpreted when adding data
				to the widgets, e.g. executing a <emphasis>save item request</emphasis>
				with all the data in the text fields of the form added to the request
				XML.
			</para>
			</listitem>
		</itemizedlist>
	</para>
	<sect2>
		<title>Mapping XML Data</title>
		<sect3>
			<title>Starting Position</title>
			<para>For mapping data structures from the user interface elements to the
			data description needed to fulfill an interface for a server request we need
			some kind of translation. An implicit mapping would only be able to describe
			very trivial data mappings. After drawing the user interface this translation
			has to be defined. On the other hand the requests answer returned by the server
			has to be mapped to be shown in the user interface elements view. Here applies
			the same: Some kind of translation is needed to map a server data structure
			to the user interface elements.
			</para>
		</sect3>
		<sect3>
			<title>First Example</title>
			<para>
				Let's have a look at a <classname>QLineEdit</classname>
				element of a form and a possible XML representation of the
				data used for a request.
			</para>

			<screenshot>
				<screeninfo>Simple Qt data input form</screeninfo>
				<mediaobject>
					<imageobject role="html">
						<imagedata fileref="images/clients/simple_form.png" format="PNG"/>
					</imageobject>
					<imageobject role="fo">
						<imagedata fileref="images/clients/simple_form.png" format="PNG" width="100%" scalefit="1"/>
					</imageobject>
				</mediaobject>
			</screenshot>

			<programlisting language='xml'>
			<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/clients/qtclient_xml_simple_form.xml" parse="text" />
			</programlisting>

			<para>
				For an insert or update request that transmits all data of the form to the
				server we have to fill the name field and the address field into the request
				data structure XML.
				The translation is defined as dynamic property "action" or "action." plus a suffix for the action identifier
				if needed. We will explain this naming of actions later. The
				value of the property is describing the request and could look as follows:
			</para>

			<programlisting language='text'>
			<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/clients/qtclient_xml_simple_form.request.txt" parse="text" />
			</programlisting>

			<para>
				For the initial filling of the form with data we submit a
				request that just sends an id to the server.
				The answer that is returned by the server has then to be
				translated to fill the name field and the address field
				of the form.
				The translation is defined as dynamic property "answer"
				or "answer." plus a suffix for the action identifier.
				A detailed description of the language in the request
				and answer property value that describes requests and answers 
				will presented in the next chapter. We provide here just an
				example:
			</para>
			<programlisting language='text'>
			<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/clients/qtclient_xml_simple_form.answer.txt" parse="text" />
			</programlisting>
		</sect3>
		<sect3>
			<title>Another Example</title>
			<para>
				Some elements are more complicated than that.
				They present the user a list of options or items the user to pick from, e.g. a list of cities.
			</para>

			<screenshot>
				<screeninfo>More complex Qt data input form with city list to pick from</screeninfo>
				<mediaobject>
					<imageobject role="html">
						<imagedata fileref="images/clients/complex_form.png" format="PNG"/>
					</imageobject>
					<imageobject role="fo">
						<imagedata fileref="images/clients/complex_form.png" format="PNG" width="100%" scalefit="1"/>
					</imageobject>
				</mediaobject>
			</screenshot>

			<para>
				When the form is saved, the currently selected element is written into
				the resulting XML:
			</para>

			<programlisting language='xml'>
			<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/clients/qtclient_xml_complex_form.xml" parse="text" />
			</programlisting>

			<para>
				In this case the widget with the city list can load its own domain data as a separate
				XML request:
			</para>

			<programlisting language='xml'>
			<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/clients/qtclient_xml_complex_form_domain_request.xml" parse="text" />
			</programlisting>

			<para>
				and the corresponding domain load request answer definition in the dynamic property "answer"
				could look like this:
			</para>
			<programlisting language='text'>
			<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/clients/qtclient_xml_complex_form.domainload_answer.txt" parse="text" />
			</programlisting>

			<para>
				The answer contains all possible values in the domain, in our case
				a list of all cities and their internal id.
			</para>

			<programlisting language='xml'>
			<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/clients/qtclient_xml_complex_form_domain_extract.xml" parse="text" />
			</programlisting>
		</sect3>
	</sect2>

	<sect2>
		<title>Switching UI forms</title>
		<para>
			A UI form contains a set of widgets, the dynamic property
			<code>form</code> contains the name of a widget (without
			extension <emphasis>.ui</emphasis>) to load.
		</para>

		<para>
			For linking a push <classname>QPushButton</classname> click in the Qt designer
			to the switching of the form you have to attach a dynamic property
			named <code>form</code>	of type <code>string</code> to the corresponding
			widget of type <classname>QPushButton</classname>:

			<screenshot>
				<screeninfo>Attach form dynamic property to a push button</screeninfo>
				<mediaobject>
					<imageobject role="html">
						<imagedata fileref="images/clients/action_on_pushbutton.png" format="PNG"/>
					</imageobject>
					<imageobject role="fo">
						<imagedata fileref="images/clients/action_on_pushbutton.png" format="PNG" width="100%" scalefit="1"/>
					</imageobject>
				</mediaobject>
			</screenshot>

		</para>

		<para>
			Before loading the next form the client terminates all current
			requests, for instance a save request of the form data.
			In case of an error in an action any defined switching of the form is cancelled.
		</para>
	</sect2>

	<sect2>
		<title>States and properties of widgets</title>

		<para>
			Some properties are reserved for states steering the behavior of the user interface:

			<itemizedlist>
			<listitem>
				<para><code>initialFocus</code>:
				This is a thing which got forgotten in the Qt design.
				We can set a boolean value to one widget in a form which should
				get the initial keyboard focus.
				</para>
			</listitem>
			</itemizedlist>
		</para>
	</sect2>

	<sect2>
		<title>Widget properties as dynamic property values</title>
		<para>
			Dynamic properties can reference properties of widgets
			like for example <code>property = {variable expression}</code>.
		</para>
		<para>
			The expression can reference addressable widgets and their properties.
			Every Qt class has its very own set of properties it understands.
		</para>
	</sect2>
</sect1>
