<sect1>
	<title>Programming the Interface</title>
	<para>
		Programming means we annotate the XML of the UI form files with
		some extra properties. They control the following things:
		<itemizedlist>
			<listitem>
			<para>
				Which events in the current form replace it with a new form,
				e. g. clicking the <emphasis>Edit</emphasis> button loads
				the form called <emphasis>edit_item</emphasis>.
			</para>
			</listitem>
			<listitem>
			<para>
				When and how requests to the Wolframe server should be sent
				and how the results should be interpreted when adding data
				to the widgets, e.g. executing a <emphasis>save item request</emphasis>
				with all the data in the text fields of the form added to the request
				XML.
			</para>
			</listitem>
		</itemizedlist>
	</para>
	<sect2>
		<title>Mapping XML Data</title>
		<sect3>
			<title>Starting Position</title>
			<para>For mapping data structures from the user interface elements to the
			data description needed to fulfill an interface for a server request we need
			some kind of translation. An implicit mapping would only be able to describe
			very trivial data mappings. After drawing the user interface this translation
			has to be defined. On the other hand the requests answer returned by the server
			has to be mapped to be shown in the user interface elements view. Here applies
			the same: Some kind of translation is needed to map a server data structure
			to the user interface elements.
			</para>
		</sect3>
		<sect3>
			<title>First Example</title>
			<para>
				Let's have a look at a <classname>QLineEdit</classname>
				element of a form and a possible XML representation of the
				data used for a request.
			</para>

			<screenshot>
				<screeninfo>Simple Qt data input form</screeninfo>
				<mediaobject>
					<imageobject role="html">
						<imagedata fileref="images/clients/simple_form.png" format="PNG"/>
					</imageobject>
					<imageobject role="fo">
						<imagedata fileref="images/clients/simple_form.png" format="PNG" width="100%" scalefit="1"/>
					</imageobject>
				</mediaobject>
			</screenshot>

			<programlisting language='xml'>
			<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/clients/qtclient_xml_simple_form.xml" parse="text" />
			</programlisting>

			<para>
				For an insert or update request that transmits all data of the form to the
				server we have to fill the name field and the address field into the request
				data structure XML.
				The translation is defined as dynamic property "action" or "action." plus a suffix for the action identifier
				if needed. We will explain this naming of actions later. The
				value of the property is describing the request and could look as follows:
			</para>

			<programlisting language='text'>
			<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/clients/qtclient_xml_simple_form.request.txt" parse="text" />
			</programlisting>

			<para>
				For the initial filling of the form with data we submit a
				request that just sends an id to the server.
				The answer that is returned by the server has then to be
				translated to fill the name field and the address field
				of the form.
				The translation is defined as dynamic property "answer"
				or "answer." plus a suffix for the action identifier.
				A detailed description of the language in the request
				and answer property value that describes requests and answers 
				will presented in the next chapter. We provide here just an
				example:
			</para>
			<programlisting language='text'>
			<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/clients/qtclient_xml_simple_form.answer.txt" parse="text" />
			</programlisting>
		</sect3>
		<sect3>
			<title>Another Example</title>
			<para>
				Some elements are more complicated than that.
				They present the user a list of options or items the user to pick from, e.g. a list of cities.
			</para>

			<screenshot>
				<screeninfo>More complex Qt data input form with city list to pick from</screeninfo>
				<mediaobject>
					<imageobject role="html">
						<imagedata fileref="images/clients/complex_form.png" format="PNG"/>
					</imageobject>
					<imageobject role="fo">
						<imagedata fileref="images/clients/complex_form.png" format="PNG" width="100%" scalefit="1"/>
					</imageobject>
				</mediaobject>
			</screenshot>

			<para>
				When the form is saved, the currently selected element is written into
				the resulting XML:
			</para>

			<programlisting language='xml'>
			<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/clients/qtclient_xml_complex_form.xml" parse="text" />
			</programlisting>

			<para>
				In this case the widget with the city list can load its own domain data as a separate
				XML request:
			</para>

			<programlisting language='xml'>
			<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/clients/qtclient_xml_complex_form_domain_request.xml" parse="text" />
			</programlisting>

			<para>
				and the corresponding domain load request answer definition in the dynamic property "answer"
				could look like this:
			</para>
			<programlisting language='text'>
			<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/clients/qtclient_xml_complex_form.domainload_answer.txt" parse="text" />
			</programlisting>

			<para>
				The answer contains all possible values in the domain, in our case
				a list of all cities and their internal id.
			</para>

			<programlisting language='xml'>
			<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/clients/qtclient_xml_complex_form_domain_extract.xml" parse="text" />
			</programlisting>
		</sect3>
	</sect2>

	<sect2>
		<title>Switching UI forms</title>
		<para>
			A UI form contains a set of widgets, the dynamic property
			<code>form</code> contains the name of a widget (without
			extension <emphasis>.ui</emphasis>) to load.
		</para>

		<para>
			For linking a push <classname>QPushButton</classname> click in the Qt designer
			to the switching of the form you have to attach a dynamic property
			named <code>form</code>	of type <code>string</code> to the corresponding
			widget of type <classname>QPushButton</classname>:

			<screenshot>
				<screeninfo>Attach form dynamic property to a push button</screeninfo>
				<mediaobject>
					<imageobject role="html">
						<imagedata fileref="images/clients/action_on_pushbutton.png" format="PNG"/>
					</imageobject>
					<imageobject role="fo">
						<imagedata fileref="images/clients/action_on_pushbutton.png" format="PNG" width="100%" scalefit="1"/>
					</imageobject>
				</mediaobject>
			</screenshot>

		</para>

		<para>
			Before loading the next form the client terminates all current
			requests, for instance a save request of the form data.
			In case of an error in an action any defined switching of the form is cancelled.
		</para>
	</sect2>

	<sect2>
		<title>States and Behaviour</title>
		<sect3>
		<title>Reserved Private Dynamic Properties</title>
			<para>The <code>_w_</code> prefix is used for internal widget properties not of interest for the user.
			</para>
		</sect3>

		<sect3>
		<title>Reserved Public Dynamic Properties</title>
		<para>The dynamic properties introduced here are edited by the user to stear application behaviour:
		</para>
			<sect4>
			<title>Stearing of Widget Behaviour</title>
			<para>The following properties are reserved for states steering the behavior of the user interface:
			</para>
			<table frame="all" width="100%">
				<title>Properties</title>
				<tgroup cols="2">
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>initialFocus</entry>
						<entry><para>Boolean value for one widget in a form that should
						get the initial keyboard focus.</para></entry>
					</row>
				</tbody>
				</tgroup>
			</table>
			</sect4>

			<sect4>
			<title>User Interface Flow</title>
			<para>The following properties stear the user interface elements flow:
			</para>
			<table frame="all" width="100%">
				<title>Properties</title>
				<tgroup cols="2">
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>form</entry>
						<entry><para>Defines a form to be opened on click (push button). If the widget has an action defined, then the action is executed before and the form is opened when the action succeeds and not opened when it fails.</para></entry>
					</row>
					<row>
						<entry>form:IDENTIFIER</entry>
						<entry><para>Defines a form related to a context menu entry with identifier IDENTIFIER. If the context menu entry has also an action defined, then the action is executed before. The form is opened only if the action succeeds.</para></entry>
					</row>
				</tbody>
				</tgroup>
			</table>
			</sect4>

			<sect4>
			<title>Additional Interface Elements</title>
			<para>The following properties define additional interface elements:
			</para>
			<table frame="all" width="100%">
				<title>Properties</title>
				<tgroup cols="2">
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>contextmenu</entry>
						<entry><para>Defines a context menu with a comma separated list of identifiers of actions defined as propery value. Two following commas without menu entry identifier are used to define a separator.</para></entry>
					</row>
					<row>
						<entry>contextmenu:NAME</entry>
						<entry><para>Defines the (translatable) text of a context menu entry. NAME refers to a non empty name in the list of context menu entries.</para></entry>
					</row>
				</tbody>
				</tgroup>
			</table>
			</sect4>

			<sect4>
			<title>Defining Server Request/Answer</title>
			<para>The following properties are used for the communication with the server:
			</para>
			<table frame="all" width="100%">
				<title>Properties</title>
				<tgroup cols="2">
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>action</entry>
						<entry><para>Defines a server request. This can either be
							a load action request for a widget that is not a push button
							or an action request without answer than OK/ERROR for a push button
						</para></entry>
					</row>
					<row>
						<entry>action:IDENTIFIER</entry>
						<entry><para>Defines an action request either
						related to a context menu entry (when clicked) or
						related to a dataslot declaration of this widget named with IDENTIFIER.</para></entry>
					</row>
					<row>
						<entry>answer</entry>
						<entry><para>Defines the format of the action request answer linked to the widget activation (for example a click on a push button).
						</para></entry>
					</row>
					<row>
						<entry>answer:IDENTIFIER</entry>
						<entry><para>Defines the format of the request answer of the action defined as 'action:IDENTIFIER'
						</para></entry>
					</row>
				</tbody>
				</tgroup>
			</table>
			</sect4>

			<sect4>
			<title>Variables and Symbolic Links</title>
			<para>
			</para>
			<table frame="all" width="100%">
				<title>Properties</title>
				<tgroup cols="2">
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>global:IDENTIFIER</entry>
						<entry><para>Defines an assignment from a global variable IDENTIFIER at initialization and writing the global variable when closing the widget.
						</para></entry>
					</row>
					<row>
						<entry>assign:PROP</entry>
						<entry><para>Defines an assingment of property PROP to the property defined as value "assign:PROP" on data load and refresh
						</para></entry>
					</row>
					<row>
						<entry>link:IDENTIFIER</entry>
						<entry><para>Defines a symbolic link to another widget.
						Defining the property "link:&lt;name&gt;" = &lt;widgetid&gt;: defines &lt;name&gt; to be a reference to the widget with the widgetid set to &lt;widgetid&gt;.
						Links are used to read data from other widgets
						on load and refresh.
						</para></entry>
					</row>
					<row>
						<entry>widgetid</entry>
						<entry><para>Unique identifier of the widget used for identifying it when 
						resolving symbolic links or an address of a request aswer. When not explicitely
						defined it is implicitely defined as unique identifier on widget creation.
						Unique means unique during one run of one client. It's a simple counter plus the name
						of the widget.
						</para></entry>
					</row>
					<row>
						<entry>synonym:NAME</entry>
						<entry><para>Defines a renaming of the identifier NAME to the identifier in the property value.
						Be careful when using synonyms. They are the last construct you should consider to use in the client.
						</para></entry>
					</row>
				</tbody>
				</tgroup>
			</table>
			</sect4>

			<sect4>
			<title>Widget States Depending on Data</title>
			<para>
			</para>
			<table frame="all" width="100%">
				<title>Properties</title>
				<tgroup cols="2">
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>state:IDENFITIER</entry>
						<entry><para>Defines a state of the widget dependent on a condition.
							IDENTIFIER is one of 'enabled', 'disabled', 'hidden', 'visible'. 
							The state condition is defined the property value.
							The value can be a property reference in '{' '}' brackets.
							The condition is true when the property is defined.
							A condition can also be a boolean expression of the form
							&lt;prop&gt; &lt;op&gt; &lt;value&gt;, where &lt;prop&gt; is a property reference in '{' '}'
							brackets, &lt;op&gt; an operator and &lt;value&gt; a constant value
							Valid operators are: '==' (string),'!=' (string),'&lt;=' (integer), '&lt;' (integer) ,'&gt;=' (integer), '&gt;' (integer)
							For 'action' definitions the state 'state:enabled' is dependent on the
							properties referenced in the 'action' value.
						</para></entry>
					</row>
				</tbody>
				</tgroup>
			</table>
			</sect4>

			<sect4>
			<title>Additional Signals and Slots</title>
			<para>
			</para>
			<table frame="all" width="100%">
				<title>Properties</title>
				<tgroup cols="2">
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>datasignal:IDENTIFIER</entry>
						<entry><para>
						Defines a signal of type IDENTIFIER (clicked,doubleclicked,destroyed,signaled,loaded) with the slot name and destination address defined as property value of "datasignal:IDENTIFIER"
						Datasignal destinations can be defined as follows: As widgetid, as slot identifier (declared with 'dataslot'), as widget path.
						A preceding identifier followed by '@' specifies what to do with the widget of the target slot.
						If you specify 'close' there in a form top level widget then the form is closed. Every other identifier
						causes a reload of the widget.
						</para></entry>
					</row>
					<row>
						<entry>dataslot</entry>
						<entry><para>Defines a comma separated list of slots for the signal of with the property value as slot identifer and optionally followed by a widget id in '(..)' brackets that sepcifies a sender from where the signal is accepted.
						</para></entry>
					</row>
				</tbody>
				</tgroup>
			</table>
			</sect4>
		</sect3>
	</sect2>

	<sect2>
		<title>Widget properties as dynamic property values</title>
		<para>
			Dynamic properties can reference properties of widgets
			like for example <code>property = {variable expression}</code>.
		</para>
		<para>
			The expression can reference addressable widgets and their properties.
			Every Qt class has its very own set of properties it understands.
		</para>
	</sect2>
</sect1>
