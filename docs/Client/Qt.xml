<!-- Qt Client -->
<sect1>
	<title>Qt client</title>
	<sect2>
	<title>Architecture</title>
	<para>
		The Qt client is a thin client which executes XML requests
		via the Wolframe protocol and presents XML answers. It shows
		a set of forms using standard Qt widgets. It is cross-platform.
		Qt is currently available on
		<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://doc.qt.digia.com/qt/index.html">http://doc.qt.digia.com/qt/index.html</link>.
	</para>
	</sect2>
	
	<sect2>
	<title>Artifacts</title>
	<para>
		The qtclient renders user interface forms dynamically, this means no
		code generation or compilation is involved when creating user interfaces
		for Wolframe.
	</para>
	<sect3>
		<title>UI forms</title>
		<para>
			The UI files follow the schema
			'qt-ui-4.7.xsd', as documented in
			<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://doc.qt.digia.com/qt/designer-ui-file-format.html">http://doc.qt.digia.com/qt/designer-ui-file-format.html</link>.
			The UI files have the extension <emphasis>.ui</emphasis>
		</para>
		
		<para>
			UI files can be generated with the Qt designer, see
			<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://qt-project.org/doc/qt-4.8/designer-manual.html">http://qt-project.org/doc/qt-4.8/designer-manual.html</link>.
		</para>
	</sect3>
	
	<sect3>
		<title>UI form translations</title>
		<para>
			Currently using the Qt translation format, version 2.0 for form translations
			as described in
			<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://doc.qt.digia.com/qt/linguist-ts-file-format.html">http://doc.qt.digia.com/qt/linguist-ts-file-format.html</link>.
			Those are the files with extension <emphasis>.ts</emphasis>.
		</para>
		<para>
			The translation files can get merged and generated with the <emphasis>lupdate</emphasis>
			tool, then translated with the <emphasis>Qt linguist</emphasis>.
		</para>
		<para>
			The client needs the files in compiled form as files with the extesion
			<emphasis>.qm</emphasis>. The <emphasis>lupdate</emphasis> tool is taking
			care of that.
		</para>
		<para>
			Read more on translations in
			<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://doc.qt.digia.com/qt/linguist-manual.html">http://doc.qt.digia.com/qt/linguist-manual.html</link>.
		</para>
	</sect3>
	
	<sect3>
		<title>Themes</title>
		<para>
			Themes consist of a top-level UI-file (a <classname>QMainWindow</classname>).
			The central widget should be empty (that's where the forms are shown). The menu contains
			some hooks, where the qtclient will add menus.
		</para>
		<para>
			Also a theme has translation files for the menu entries.
		</para>
	</sect3>
	
	<sect3>
		<title>Qt stylesheets</title>
		<para>
			A Qt stylesheet is similar to a CSS in HTML. It influences the
			look-and-feel of the form widgets. 
			The format is described in
			<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://qt-project.org/doc/qt-4.8/stylesheet-syntax.html">http://qt-project.org/doc/qt-4.8/stylesheet-syntax.html</link>.			
			The files have usually the extension <emphasis>.qss</emphasis>.
		</para>
	</sect3>
	
	</sect2>
	
	<sect2>
		<title>"Programming" the interface</title>
		<para>
			Programming means we annotate the XML of th UI form files with
			some extra properties. They steer the following things:
			<itemizedlist>
				<listitem>
				<para>
					On which events to replace the current form with a new form,
					e. g. clicking the <emphasis>Edit</emphasis> button should load
					the form called <emphasis>edit_item</emphasis>.
				</para>
				</listitem>
				<listitem>
				<para>
					When and how requests to the Wolframe server should be sent
					and how the results should be interpreted when adding data
					to the widgets, e.g. executing a <emphasis>save item request</emphasis>
					with all the data in the text fields of the form added to the request
					XML.
				</para>
				</listitem>
			</itemizedlist>
		</para>
		
		<sect3>
			<title>Mapping XML data</title>
			<para>
				Every widget in the Qt class hierarchy has a default way, how data
				is serialized into the request XML and how it is deserialized from
				the answer XML. For instance a <classname>QLineEdit</classname>
			</para>
		</sect3>
	</sect2>
</sect1>

	<!--

Domain data

Domain data gets choosen based on the current interface language.

Simple schema:

<domain>
   <form>form1</form>
   <widget>widget1</widget>
   <language>de_CH</language>
   <values>
      <value id="language_independent_key">translated value</value>
      ...
   </values>
</domain>

widget1 is for instance a drop down selection (single select) or
a list multi-selection.

The tree are encoded as in:

<domain>
   <form>form1</form>
   <widget>widget1</widget>
   <language>de_CH</language>
   <tree>
     <item id="language_independent_key">
        <value>translated value</value>
        <description>translated value</value>
        ...
        <tree>
          <item id="language_independent_key">
            <value>translated value</value>
            <description>translated value</value>
            ...
        </tree>
     </item>
   </tree>
</domain>

Items in a tree can have a tuple of (key,value) at the moment
(correspond to the columns in the tree view).

Should not be cached on the client.

Current data

<xml version="1.0" encoding="UTF-8"?>
<form1>
  <first>Jon</first>
  <last>Doe</last>
  <working>true</working>
 ..
  <vegetable>
    <value>language_independent_key</value>
    ...
    <value>language_independent_key</value>
  </vegetable>
</form1>

The top-level tag corresponds to the UIform name.

The name of the tags correspond to the name of the widgets in the
UIform.

Values are the contents of the UI fields (e.g. text field).
For lists, drop-downs and groups of checkboxes those are the
language-independent keys in the values of the domain or the
ids in the nodes in the tree.

Must not be cached on the client.

Dynamic Properties

They influence the behaviour of the generic client. All "propramming"
is done by setting dynamic properties in main windows or widgets

initialFocus	boolean, sets initial focus on widget
action		one of 'create', 'delete', 'update' or 'read', will
		disappear in the future and be replaced just with one
		'request'
		valid only in forms (for read mainly) and
		in push buttons
initAction	valid only in forms currently
form		next form to show, currently only working on buttons
doctype		the document of the XML to generate, when the user
		generates an action on the element, 
		e.g. 'CategoryHierarchyRequest.simpleform'
		currently only working on buttons
rootelement	the root element of the XML to generate, e.g. 'document'
		currently only working on buttons
state		some widgets support restoring the state, usually
		from the global variables, e.g. state {global.widgetState}
global.*	global variables, once stored, they are kept and
		can be addressed as '{global.name}' everywhere else
{x.y}		dereference a variable, e.g.
		{widgetname.property}
		{global.stored_variable}
		
		currently there exist the following properties for
		the corresponding classes:

		QEditLine	state	the text entered
				text	the text entered
		QListWidget	state	expanded 
				id	the currently selected item
					(single selection for now)
		QTreeWidget	state	expanded states and selection
				id	the currently selected item
					(single selection for now)
		*		*	any other property is added
					as attribute to the request,
					e.g. 'id', 'search' in configurator,
					those are business layer specific, i.e.
					the client only sends them
					
-->	
	
