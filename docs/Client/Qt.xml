<!-- Qt Client -->
<sect1>
	<title>Qt client</title>
	<sect2>
	<title>Architecture</title>
	<para>
		The Qt client is a thin client which executes XML requests
		via the Wolframe protocol and presents XML answers. It shows
		a set of forms using standard Qt widgets. Qt is currently
		available on
		<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://doc.qt.digia.com/qt/index.html">http://doc.qt.digia.com/qt/index.html</link>.
	</para>
	</sect2>
	
	<sect2>
	<title>Artifacts</title>
	<sect3>
		<title>UI forms</title>
		<para>
			The qtclient renders UI forms dynamically, this means no
			code generation is involved. The UI files follow the schema
			'qt-ui-4.7.xsd', as documented in
			<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://doc.qt.digia.com/qt/designer-ui-file-format.html">http://doc.qt.digia.com/qt/designer-ui-file-format.html</link>.
			The UI files have the extension <emphasis>.ui</emphasis>
		</para>
		
		<para>
			UI files can be generated with the Qt designer, see
			<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://qt-project.org/doc/qt-4.8/designer-manual.html">http://qt-project.org/doc/qt-4.8/designer-manual.html</link>.
		</para>
	</sect3>
	
	<sect3>
		<title>UI form translations</title>
		<para>
			Currently using the Qt translation format, version 2.0 for form translations.
			Those are the files with extension <emphasis>.ts</emphasis>. The clients needs
			the files in compiled form as files with the extesion <emphasis>.qm</emphasis>.
		</para>
	</sect3>
	
	</sect2>
</sect1>

	<!--

UIFormTranslation

language: de_CH, en_US, etc.

source:

Currently using the Qt translation format, version 2.0
(files with extentions .ts in directory 'i18n').
Could also be gettext PO files and others.

binary:

Lookup tables similar to gettext MO files. Those are used
productive at runtime to translate the forms.

Should be cashed on the client.

UIStylesheet

A Qt stylesheet similar to CSS in HTML influencing the look-and-feel
of the form widgets. Syntax check not really possible (maybe with
a QSS-loader and interpreter program?). The format is plain text ASCII.

Currently in the 'themes/XXX/' directory as '*.qss' files.

The Qt designer currently doesn't load and apply external stylesheets, only 
manual local style changes to widgets are possible.

Can also be embedded as a top-level form property 'styleSheet' directly into
the form, but then we get an DRY-problem! So this is just an option for 
rendering/designing as a transitional format! Unless of couse we use one
theme UI loading may form UIs..

Should be cashed on the client.

Domain data

Currently the *.xml files in the 'data' directory. Per form and widget
there is a XML file containing the pickable values.

Could be embedded in the UI, but translations get complicated this way.

Could be big, so paging and partial model updates could be an issue
(think a million cities and a completion widget).

Domain data gets choosen based on the current interface language.

Simple schema:

<domain>
   <form>form1</form>
   <widget>widget1</widget>
   <language>de_CH</language>
   <values>
      <value id="language_independent_key">translated value</value>
      ...
   </values>
</domain>

widget1 is for instance a drop down selection (single select) or
a list multi-selection.

The tree are encoded as in:

<domain>
   <form>form1</form>
   <widget>widget1</widget>
   <language>de_CH</language>
   <tree>
     <item id="language_independent_key">
        <value>translated value</value>
        <description>translated value</value>
        ...
        <tree>
          <item id="language_independent_key">
            <value>translated value</value>
            <description>translated value</value>
            ...
        </tree>
     </item>
   </tree>
</domain>

Items in a tree can have a tuple of (key,value) at the moment
(correspond to the columns in the tree view).

Should not be cached on the client.

Current data

<xml version="1.0" encoding="UTF-8"?>
<form1>
  <first>Jon</first>
  <last>Doe</last>
  <working>true</working>
 ..
  <vegetable>
    <value>language_independent_key</value>
    ...
    <value>language_independent_key</value>
  </vegetable>
</form1>

The top-level tag corresponds to the UIform name.

The name of the tags correspond to the name of the widgets in the
UIform.

Values are the contents of the UI fields (e.g. text field).
For lists, drop-downs and groups of checkboxes those are the
language-independent keys in the values of the domain or the
ids in the nodes in the tree.

Must not be cached on the client.

Theme

Currently those are the files in 'themes/XXX'. They just contain an
empty main window and some menu hooks.

Are not a class per se. They are a form (with a menu and statusbar) and
a stylesheet and some translations. Can be seen as a special form. They
may also disappear completly and all data is contained in each UIForm
(makes the loading process a little bit more tricky).

Dynamic Properties

They influence the behaviour of the generic client. All "propramming"
is done by setting dynamic properties in main windows or widgets

initialFocus	boolean, sets initial focus on widget
action		one of 'create', 'delete', 'update' or 'read', will
		disappear in the future and be replaced just with one
		'request'
		valid only in forms (for read mainly) and
		in push buttons
initAction	valid only in forms currently
form		next form to show, currently only working on buttons
doctype		the document of the XML to generate, when the user
		generates an action on the element, 
		e.g. 'CategoryHierarchyRequest.simpleform'
		currently only working on buttons
rootelement	the root element of the XML to generate, e.g. 'document'
		currently only working on buttons
state		some widgets support restoring the state, usually
		from the global variables, e.g. state {global.widgetState}
global.*	global variables, once stored, they are kept and
		can be addressed as '{global.name}' everywhere else
{x.y}		dereference a variable, e.g.
		{widgetname.property}
		{global.stored_variable}
		
		currently there exist the following properties for
		the corresponding classes:

		QEditLine	state	the text entered
				text	the text entered
		QListWidget	state	expanded 
				id	the currently selected item
					(single selection for now)
		QTreeWidget	state	expanded states and selection
				id	the currently selected item
					(single selection for now)
		*		*	any other property is added
					as attribute to the request,
					e.g. 'id', 'search' in configurator,
					those are business layer specific, i.e.
					the client only sends them
					
-->	
	
