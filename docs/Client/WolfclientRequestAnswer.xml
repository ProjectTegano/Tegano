<sect1>
<title>Programming server requests/answers</title>
<para>
</para>
	<sect2>
	<title>Adressing widget data</title>
	<para>
	Widget data elements elements are addressed by using the relative path of the element
	from the widget where the request or answer was specified. The relative path is 
	a sequence of widget object names separated by dots ('.'). Only atomic element 
	references are specified in request/answer structure.
	</para>
	<sect3>
	<title>Biggest common ancestor path</title>
	<para>
	The grouping of elements into structures is
	done by the biggest common ancestor path of all atomic element references in
	a structure. It is assumed that this biggest common ancestor is addressing the structure.
	If for example a structure has the atomic widget element references "home.user.name"
	and "home.user.id" then we assume that "home.user" is adressing the structure 
	containing "name" and "id" in the widget data.
	</para>
	</sect3>
	<sect3>
	<title>Addressing atomic elements</title>
	<table frame="all" width="100%">
		<title>Basic elements of request/answer</title>
		<tgroup cols="2">
		<thead>
			<row>
				<entry>Description</entry>
				<entry>Syntax</entry>
			</row>
		</thead>

		<tbody>
			<row>
				<entry>Constant (server request only)</entry>
				<entry>string with single (') or double (") quotes or numeric integral constant</entry>
			</row>
			<row>
				<entry>Mandatory attribute</entry>
				<entry>name={variablepath}</entry>
			</row>
			<row>
				<entry>Mandatory content value</entry>
				<entry>name{{variablepath}}</entry>
			</row>
			<row>
				<entry>Optional attribute</entry>
				<entry>name={variablepath:?}</entry>
			</row>
			<row>
				<entry>Optional content value</entry>
				<entry>name{{variablepath:?}}</entry>
			</row>
			<row>
				<entry>Optional attribute with default</entry>
				<entry>name={variablepath:default}</entry>
			</row>
			<row>
				<entry>Optional content with default value</entry>
				<entry>name{{variablepath:default}}</entry>
			</row>
			<row>
				<entry>Ignored attribute</entry>
				<entry>name={?}</entry>
			</row>
			<row>
				<entry>Ignored content value</entry>
				<entry>name{{?}}</entry>
			</row>
			<row>
				<entry>Ignored sub structure</entry>
				<entry>name{?}</entry>
			</row>
		</tbody>
		</tgroup>
	</table>
	</sect3>
	<sect3>
	<title>Special path elements</title>
	<para>Variable references can address other widgets than sub widgets of the current widget.
	</para>
		<sect4>
		<title>Addressing the form widget</title>
		<para>The reserved path element 'main' addresses the form widget root.</para>
		</sect4>

		<sect4>
		<title>Widget links</title>
		<para>A dynamic property with the prefix 'link:' followed by an identifier
		as name declares the widget with the widget id as dynamic property value of
		the link definition to be referencable by name. The referencing name 
		is the identifier after the prefix 'link:'. So if we for example define
		a dynamic property 'link:myform' with a widget id as value, then we can
		use the variable 'myform' in a widget path to address the widget.</para>
		<para>
		The mechanism of widget links is mainly used for implementing form/sub-form
		relationships. A form opens a subform and passes its widget id to it with the
		form parameter 'widgetid=..'.
		A link is defined to the sub-form with the widget id passed to it. 
		The subform signals some action to the parent that can address the data
		entered in the subform via this link.
		</para>
		</sect4>
	</sect3>
	</sect2>

	<sect2>
	<title>Data structures</title>
	<para>Structure elements are separated by semicolon ';' and put into '{' brackets '}' 
	with the name of the structure in front.
	</para>
		<sect3>
		<title>Example</title>
		<para>The following example shows an address as structure:
		</para>
		<programlisting language='text'>
		<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/clients/request_struct.txt" parse="text" />
		</programlisting>
		</sect3>
	</sect2>

	<sect2>
	<title>Arrays</title>
	<para>Arrays are marked with opened and closed square brackets '[' ']' without specifying dimension (arbitrary size or empty when missing).
	</para>
		<sect3>
		<title>Description</title>
		<table frame="all" width="100%">
			<title>Types of arrays</title>
			<tgroup cols="2">
			<thead>
				<row>
					<entry>Description</entry>
					<entry>Syntax</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>Arbitrary Size Array of Content Values</entry>
					<entry>name[]{{variablepath}}</entry>
				</row>
				<row>
					<entry>Arbitrary Size Array of Structures</entry>
					<entry>name[]{structure definition}</entry>
				</row>
			</tbody>
			</tgroup>
		</table>
		</sect3>

		<sect3>
		<title>Example</title>
		<para>
		The following example shows an array of addresses:
		</para>
		<programlisting language='text'>
		<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/clients/request_array.txt" parse="text" />
		</programlisting>
		</sect3>

		<para>
		The widget element paths used to address the widget elements have to have a common ancestor path.
		In our example this would be 'address'. The common ancestor path is determining how elements
		are grouped together in the widget. It tells what belongs together to the same array element
		in the widget. Without common common ancestor path it would be impossible to determine what 
		is forming a structure in the widget data. It distinguishes the case of having an array of
		adresses and the case of having an array of surnames, and array of prenames and an array
		of streets. The later makes not much sense here. With the common prefix we state how entities
		are grouped together to structures in the representation in the widget.
		</para>
	</sect2>

	<sect2>
	<title>Indirection and recursion</title>
	<para>Indirection allows to define recursive structures. Indirection means that an element is 
	specified as reference that is expanded when the element appears in the data structure to map.
	The grouping element of the indirection elements is the common ancestor of all non indirection 
	elements in the structure containing the indirection.
	</para>

		<sect3>
		<title>Description</title>
		<table frame="all" width="100%">
			<title>Types of indirections</title>
			<tgroup cols="3">
			<thead>
				<row>
					<entry>Description</entry>
					<entry>Syntax (name equals ancestor name)</entry>
					<entry>Syntax (name differs from ancestor name)</entry>
				</row>
			</thead>

			<tbody>
				<row>
					<entry>Single Element Indirection</entry>
					<entry>^ancestor</entry>
					<entry>^item:ancestor</entry>
				</row>
				<row>
					<entry>Multiple Indirection</entry>
					<entry>^ancestor[]</entry>
					<entry>^item:ancestor[]</entry>
				</row>
			</tbody>
			</tgroup>
		</table>
		</sect3>

		<sect3>
		<title>Example (arbitrary tree)</title>
		<para>Example representing a tree with arbitrary number of children per node:
		</para>
		<programlisting language='text'>
		<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/clients/request_arbitraryTree.txt" parse="text" />
		</programlisting>
		</sect3>
		<sect3>
		<title>Example (binary tree)</title>
		<para>Example representing a binary tree:
		</para>
		<programlisting language='text'>
		<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/clients/request_binaryTree.txt" parse="text" />
		</programlisting>
		</sect3>
	</sect2>
</sect1>








