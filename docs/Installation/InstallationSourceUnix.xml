<!-- Unix -->
	<sect1>
		<title>Building on Unix systems</title>

<!-- prerequisites -->
		<sect2>
			<title>Prerequisites</title>

		<para>
			For building <application>Wolframe</application> on 
			Unix systems you need at least the following software:
		</para>
		
		<itemizedlist>
			<listitem>
				<para>A recent C/C++ compiler, the following ones are known to work:
				</para>
				
				<itemizedlist>
					<listitem>
						<para>gcc 4.1.x or newer, <ulink url="http://gcc.gnu.org">http://gcc.gnu.org</ulink></para>
					</listitem>
					<listitem>
						<para>clang 3.4 or newer, <ulink url="http://clang.llvm.org">http://clang.llvm.org</ulink></para>
					</listitem>
					<listitem>
						<para>Intel Compiler ICC 14.0 or newer, <ulink url="http://software.intel.com/en-us/c-compilers">http://software.intel.com/en-us/c-compilers</ulink></para>
					</listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				<para>GNU make 3.81 or newer (but preferably 3.82 or newer) from <ulink url="https://www.gnu.org/software/make/">https://www.gnu.org/software/make/</ulink></para>
			</listitem>
			<listitem>
				<para>Boost 1.48.0 or newer from <ulink url="http://www.boost.org">http://www.boost.org</ulink></para>
			</listitem>
		</itemizedlist>
		
		<para>
			Depending on the features you want to use you also may need
			the following software:
		</para>

		<itemizedlist>
			<listitem>
				<para>
					The OpenSSL library 0.9.7 or newer, for encryption and authentication,
					<ulink url="http://www.openssl.org">http://www.openssl.org</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					The Sqlite database library, version 3.5.0 or newer, for storing user data
					and authentication data in a Sqlite database,
					<ulink url="http://sqlite.org">http://sqlite.org</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					The PostgreSQL database client library, version 8.1 or newer, for storing user data
					and authentication data in a PostgreSQL database,
					<ulink url="http://postgresql.org">http://postgresql.org</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					The Oracle OCI client library, version 11.2 or newer, for storing user data
					and authentication data in an Oracle database,
					<ulink url="http://www.oracle.com">http://www.oracle.com</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					The libxml2 library, version 2.7.6 or newer, for filtering XML data,
					<ulink url="http://xmlsoft.org/">http://xmlsoft.org/</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					The libxslt library, version 1.1.26 or newer, for the transformation of
					XML data,
					<ulink url="http://xmlsoft.org/">http://xmlsoft.org/</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					Python 3, version 3.3.0 or newer, for writting applications in Python,
					<ulink url="https://www.python.org">https://www.python.org</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					The libhpdf library, version 2.2.1 or newer, for PDF generation and printing,
					<ulink url="http://libharu.org/">http://libharu.org/</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					The FreeImage package, version 3.15.4 or newer, for image manipulation,
					<ulink url="http://freeimage.sourceforge.net">http://freeimage.sourceforge.net</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					The ICU library, version 3.5 or newer, for text normalization and conversion,
					<ulink url="http://site.icu-project.org/">http://site.icu-project.org</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					A PAM library, for instance Linux PAM, version 1.0.4 or newer, for authentication via PAM,
					<ulink url="http://www.linux-pam.org/">http://www.linux-pam.org</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					The Cyrus SASL library, version 2.1.22 or newer, for authentication via SASL,
					<ulink url="http://cyrusimap.org">http://cyrusimap.org/</ulink>
				</para>
			</listitem>
		</itemizedlist>
		
		<para>
			For testing the <application>Wolframe</application> software you need:
		</para>

		<itemizedlist>
			<listitem>
				<para>
					Expect 5.40 or newer, for running the Expect tests,
					<ulink url="http://expect.sourceforge.net/">http://expect.sourceforge.net/</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					A working telnet
				</para>
			</listitem>
			<listitem>
				<para>
					A PostgreSQL or Oracle database when you want to run the database tests
				</para>
			</listitem>
		</itemizedlist>
		
		<para>
			For building the documentation and manpages you need:
		</para>

		<itemizedlist>
			<listitem>
				<para>
					Doxygen for developer documentation,
					<ulink url="http://www.doxygen.org">http://www.doxygen.org</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					Docbook 4.5 or newer and the XSL toolchain,
					<ulink url="http://www.docbook.org">http://www.docbook.org</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					The FOP PDF generator for documentation in PDF format,
					<ulink url="http://xmlgraphics.apache.org/fop/">http://xmlgraphics.apache.org/fop/</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					Dia for conversion of SVG images,
					<ulink url="http://live.gnome.org/Dia">http://live.gnome.org/Dia</ulink>
				</para>
			</listitem>
		</itemizedlist>
		
		</sect2>

<!-- Basic build instructions -->		
		<sect2>
			<title>Basic build instructions</title>
			
		<para>
			<application>Wolframe</application> is build and installed by simply calling:

		        <programlisting language='shell'>
	make
	make install
			</programlisting>
		</para>
		
		<para>
			The makefiles understand the standard GNU targets like 'clean', 'distclean', 'test', 'install',
			'uninstall', etc. Also the standard installation variables 'DESTDIR' and 'prefix' are understood.
			The whole list of options can be seen with:
			
		        <programlisting language='shell'>
	make help
			</programlisting>
		</para>

		<para>
			There is no configure. Porting to platforms and distributions
			is done in the makefiles. For most platforms we provide reasonable
			default values in <filename>makefiles/gmake/platform.mk</filename>.
		</para>

		<para>
			Optional features are enabled by using 'WITH_XXX' variables when
			calling make, e. g. to enable SSL support you call make like this:

		        <programlisting language='shell'>
	make WITH_SSL=1
			</programlisting>
		</para>

		<para>
			Additional variables can be set when 3rdParty software is not in
			the standard location, for instance:
			
		        <programlisting language='shell'>
	make BOOST_DIR=/usr/local/boost-1.55.0
			</programlisting>

		</para>
		
		<para>
			You can check how your software will be build with:

		        <programlisting language='shell'>
	make config
			</programlisting>
			
			If you get a 'NOT SUPPLIED ON THIS PLATFORM' you have to
			provide the variables explicitly as mentioned above in
			the example with 'BOOST_DIR'.
		</para>
		
		<para>
			A complete build may look like this:

		        <programlisting language='shell'>
	make WITH_SSL=1 WITH_EXPECT=1 WITH_PAM=1 WITH_SASL=1 \
		WITH_SYSTEM_SQLITE3=1 WITH_PGSQL=1 WITH_ORACLE=1 \
		WITH_LUA=1 WITH_LIBXML2=1 WITH_LIBXSLT=1 \
		WITH_LOCAL_LIBHPDF=1 WITH_ICU=1 WITH_LOCAL_FREEIMAGE=1 \
		WITH_PYTHON=1 WITH_CJSON=1 WITH_TEXTWOLF=1 \
		CC='ccache gcc' CXX='ccache g++' \
		CCFLAGS='-Werror' CXXFLAGS='-Werror' \
		clean all test install
			</programlisting>

		</para>
		
		</sect2>

<!-- compilers -->
		<sect2>
			<title>GCC compiler</title>
			
			<para>
				Compilation with GNU gcc is the default on all
				Unix platforms. It corresponds to the call:
		        <programlisting language='shell'>
	make CC=gcc CXX=g++
			</programlisting>								
			
			</para>
			
			<para>
				Per default all reasonable warnings are enabled.
				To add your own flags you can set 'CFLAGS' or
				'CXXFLAGS' respectively for instance to turn
				compiler warnings into fatal errors with:

		        <programlisting language='shell'>
	make CFLAGS='-Werror' CXXFLAGS='-Werror'
			</programlisting>	
			
				or

		        <programlisting language='shell'>
	make CFLAGS='-g -O0' CXXFLAGS='-g -O0'
			</programlisting>	
			
				to turn off optimization and to enable debug information.
			</para>
			<para>
				Certain embedded 3rdParty software may choose to
				have it's own flags for compilation, you can't override
				those in the make invocation.
			</para>
		</sect2>
		
		<sect2>
			<title>clang compiler</title>
			
			<para>
				Compilation with clang is possible, only set the
				correct compiler variables:
		        <programlisting language='shell'>
	make CC=clang CXX=clang++
			</programlisting>	
			
			</para>
			<para>							
			
				Also here you can set 'CFLAGS' and 'CXXFLAGS' at will.
			</para>
		</sect2>				

		<sect2>
			<title>Intel compiler</title>
			
			<para>
				Compilation with the Intel C compiler is done with:
		        <programlisting language='shell'>
	source /opt/intel/bin/iccvars.csh intel64 
	make CC=icc CXX=icpc
			</programlisting>	
			
			</para>							
			<para>
				(where '/opt/intel/bin/icc' is the location of the Intel
				compiler).
			</para>
			
			<para>
				Also here you can set 'CFLAGS' and 'CXXFLAGS' at will.
			</para>
			
			<para>
				When running the tests or any binaries you have to
				make sure that 'LD_LIBRARY_PATH' is set correctly
				(the example is for csh/tcsh, Intel 64-bit):
		        <programlisting language='shell'>
	setenv LD_LIBRARY_PATH $PROD_DIR/lib/intel64
			</programlisting>	
			</para>
		</sect2>
		
		<sect2>
			<title>Using ccache and distcc</title>
			
			<para>
				Ccache (<ulink url="http://ccache.samba.org/">http://ccache.samba.org/</ulink>) and
				DistCC (<ulink url="https://code.google.com/p/distcc/">https://code.google.com/p/distcc/</ulink>)
				can be used to cache respectively distribute the compilation of
				<application>Wolframe</application>.
			</para>
			
			<para>
				Call make as follows:
		        <programlisting language='shell'>
	make CC='ccache gcc' CXX='ccache g++'
			</programlisting>
			
			or

		        <programlisting language='shell'>
	make CC='distcc gcc' CXX='distcc g++'
			</programlisting>
			
			</para>
			
			<para>
				If you want to use ccache and distcc in parallel, use
				the following commands:
		        <programlisting language='shell'>
	export DISTCC_HOSTS='server1 server2 server3'
	export CCACHE_PREFIX=distcc
	make CC='ccache gcc' CXX='ccache g++'
			</programlisting>

			</para>
			
		</sect2>
		
		<sect2>
			<title>Platform-specific build instructions</title>
			
			<sect3>
				<title>FreeBSD</title>
			
				<para>
					You need GNU make, BSD make doesn't work.
					You have to install the 'gmake' package.
				</para>
				
				<para>
					Both FreeBSD 8 and FreeBSD 9 are supported.
				</para>
			</sect3>

			<sect3>
				<title>NetBSD</title>
			
				<para>
					You need GNU make, BSD make doesn't work.
					You have to install the 'gmake' package.
				</para>
			
				<para>
					NetBSD 6 is supported, NetBSD 5 not.
				</para>
				
				<para>
					Packages are installed with 'pkgin' into the
					directory <filename>/usr/pkg</filename>. Make
					sure <filename>/usr/pkg/bin</filename> is part
					of your PATH.
				</para>
			</sect3>
			
			<sect3>
				<title>OpenIndiana 151a8</title>
				
				<para>
					The official gcc is too old to build Boost. The Forte compiler
					is not free and has big problems to compile modern
					C++ code. So we must use the CSW/gcc/C++ toolchain
					for <application>Wolframe</application>.
				</para>
				
				<para>
					Install the CSW toolchain (<ulink url="http://www.opencsw.org">http://www.opencsw.org</ulink>)
					and basic development tools:
					<programlisting language='shell'>
	pkgadd -d http://get.opencsw.org/now
	pkgutil --install CSWgcc4core CSWgcc4g++ CSWgmake					
					</programlisting>					
				</para>
				
				<para>
					You also need some system files:
					<programlisting language='shell'>
	pkg install pkg:/system/header
	pkg install pkg:/developer/library/lint
	pkg install system/library/math/header-math
					</programlisting>
				</para>

				<para>
					Make sure <filename>/opt/csw/bin</filename> is part of your PATH.
				</para>
				
				<para>
					Install packages with 'pkgutil --install'.
				</para>
			</sect3>

			<sect3>
				<title>Solaris 10</title>

				<para>
					We only build for SPARC and Solaris 10 currently.
				</para>

				<para>
					You may have to install a 'SFWgtar' or 'CSWgtar' in order to unpack the
					sources. Make sure to rename them to 'gtar' to avoid collisions with
					the standard 'tar'!
				</para>
					
				<para>
					The official gcc is too old to build Boost. The Forte compiler
					is not free and has big problems to compile modern
					C++ code. So we must use the CSW/gcc/C++ toolchain
					for <application>Wolframe</application>.
				</para>
				
				<para>
					Install the CSW toolchain (<ulink url="http://www.opencsw.org">http://www.opencsw.org</ulink>)
					and basic development tools:
					<programlisting language='shell'>
	pkgadd -d http://get.opencsw.org/now
	pkgutil --install CSWgcc4core CSWgcc4g++ CSWgmake					
					</programlisting>					
				</para>
				
				<para>
					Make sure the build environment is always set as follows:

					<programlisting language='shell'>
PATH=/opt/csw/bin:/usr/ccs/bin:/usr/bin:/bin:/opt/csw/sbin:/usr/sbin:/sbin
export PATH
					</programlisting>
				</para>
				
				<para>
					Install official packages with 'pkgadd -d' and CSW packages
					with 'pkgutil --install'.
				</para>
				
				<para>
					Building Wolframe is more complex as on other platforms, so
					we provide this working example invocation of make:
					<programlisting language='shell'>
	LD_RUN_PATH=/opt/csw/lib:/opt/csw/postgresql/lib \
	OPENSSL_DIR=/opt/csw PGSQL_DIR=/opt/csw/postgresql \
	LIBLT_DIR=/usr BOOST_DIR=/opt/csw/boost-1.48.0 \
		WITH_EXPECT=1 WITH_SSL=1 WITH_SYSTEM_SQLITE3=1 WITH_PGSQL=1 WITH_LUA=1 \
		WITH_LIBXML2=1 WITH_LIBXSLT=1 WITH_PAM=1 WITH_SASL=1 WITH_LOCAL_LIBHPDF=1 \
		WITH_ICU=1 ICU_DIR=/opt/csw/icu4c-49.1.2 \
		WITH_LOCAL_FREEIMAGE=1 \
		WITH_PYTHON=1 \
		gmake \
			CC=gcc CXX=g++ CFLAGS=-mcpu=v9 CXXFLAGS=-mcpu=v9
					</programlisting>
				</para>
					
			</sect3>

		</sect2>

<!-- Boost -->
		<sect2>
			<title>Boost</title>
			
				<para>
					Boost (<ulink url="http://www.boost.org">http://www.boost.org</ulink>) is the only
					library which is absolutely required in order to build
					<application>Wolframe</application>.
				</para>
			
			<sect3>
				<title>Build your own version of Boost</title>
			
				<para>
					The following Boost libraries are required for building
					<application>Wolframe</application>:

		        <programlisting language='shell'>
	./bootstrap.sh --prefix=/usr/local/boost-1.55.0 \
		--with-libraries=thread,filesystem,system,program_options,date_time
	./bjam install
			</programlisting>

				If you want to build the ICU normalization
				module (WITH_ICU=1) you will have to build 'boost-locale'
				with ICU support and you have to enable the
				'regex' and the 'locale' boost libraries too:

		        <programlisting language='shell'>
	./bootstrap.sh --prefix=/usr/local/boost-1.55.0 \
		--with-libraries=thread,filesystem,system,program_options,date_time,regex,locale
	./bjam install
			</programlisting>
			</para>
			
			<para>
				The location of the Boost library can be set when
				building <application>Wolframe</application> as follows:
				
		        <programlisting language='shell'>
	make BOOST_DIR=/usr/local/boost-1.48.0
			</programlisting>				

			</para>
			
			</sect3>
			
			<sect3>
				<title>RedHat, Fedora, CentOS, Scientific Linux and similar Linux distributions</title>

			<sect4>
				<title>RedHat/Centos/Scientific Linux 5 and similar Linux distributions</title>
				
				<para>
					The official Boost packages are not recent enough. Build your own
					Boost version here.
				</para>
				
				<para>
					If you want ICU support you will also need the 'libicu-devel' package.
				</para>
			</sect4>

			<sect4>
				<title>RedHat 6</title>
				
				<para>
					The official Boost packages are not recent enough. Build your own
					Boost version here.
				</para>

				<para>
					If you want ICU support you will also need the 'libicu-devel' package.
				</para>
				
				<para>
					We currently build the official packages without ICU support.
					The reason is that there is no 'libicu-devel' package available
					for RHEL6 on OBS (see
					<ulink url="http://permalink.gmane.org/gmane.linux.suse.opensuse.buildservice/17779">http://permalink.gmane.org/gmane.linux.suse.opensuse.buildservice/17779</ulink>).
				</para>
				
				<para>
					Get a Redhat developer license to get the 'libicu-devel'
					package or build your own libicu library and build your own
					Boost library with boost-locale and ICU support.
				</para>
			</sect4>
			
			<sect4>
				<title>Centos/Scientific Linux 6 and similar Linux distributions</title>
				
				<para>
					The official Boost packages are not recent enough. Build your own
					Boost version here.
				</para>

				<para>
					If you want ICU support you will also need the 'libicu-devel' package.
				</para>
			</sect4>

			<sect4>
				<title>Fedora and similar Linux distributions</title>
				
				<para>
					You need the 'boost-devel' package. This package
					contains also the boost-locale and ICU backend.
				</para>
			</sect4>
			
			</sect3>
			
			<sect3>
				<title>Debian, Ubuntu and similar Linux distributions</title>
				
				<sect4>
					<title>Debian 6</title>
				
					<para>
						The official Boost packages are not recent enough. Build your own
						Boost version here.
					</para>
				</sect4>

				<sect4>
					<title>Debian 7</title>
					<para>
						You need the following packages:
						'libboost-dev', 'libboost-program-options-dev',
						'libboost-filesystem-dev', 'libboost-thread-dev',
						'libboost-random-dev'.
					</para>
					
					<para>
						If you want ICU support you will also need the
						'libboost-locale-dev' package.
					</para>
					
				</sect4>

				<sect4>
					<title>Ubuntu 10.04.1 LTS, Ubuntu 12.04</title>
				
					<para>
						The official Boost packages are not recent enough. Build your own
						Boost version here.
					</para>
				</sect4>
				
				<sect4>
					<title>Ubuntu 12.10</title>

					<para>
						You need the following packages:
						'libboost-dev', 'libboost-program-options-dev',
						'libboost-filesystem-dev', 'libboost-thread-dev',
						'libboost-random-dev'.
					</para>

					<para>
						If you want ICU support you will also need the 
						'libboost-locale-dev' package.
					</para>
				</sect4>

				<sect4>
					<title>Ubuntu 13.04</title>
					<para>
						Currently libboost breaks in enable_if template, compile your own 
						Boost version here.						
					</para>
				</sect4>
				
				<sect4>
					<title>Ubuntu 13.10</title>
					<para>
						You need the following packages:
						'libboost-dev', 'libboost-program-options-dev',
						'libboost-filesystem-dev', 'libboost-thread-dev',
						'libboost-random-dev'.
					</para>

					<para>
						If you want ICU support you will also need the 
						'libboost-locale-dev' package.
					</para>
				</sect4>
			</sect3>

			<sect3>
				<title>openSUSE, SLES and similar Linux distributions</title>		

				<sect4>
					<title>OpenSuSE 12.3, 13.1</title>
					<para>
						You need the 'boost-devel' package.
					</para>
				</sect4>

				<sect4>
					<title>SLES 11 SP1, SP2 and SP3</title>
					<para>
						The official Boost packages are not recent enough. Build your own
						Boost version here.
					</para>
				</sect4>
			</sect3>

			<sect3>
				<title>ArchLinux</title>
				<para>
					You need the 'boost' and 'boost-libs' packages.
					The official Boost packages contains support for 
					boost-locale and the ICU backend.
				</para>
			</sect3>

			<sect3>
				<title>Slackware</title>
				<para>
					You need the 'boost' package. This package is
					part of the 'l' package series.
					The official Boost package contains support for 
					boost-locale and the ICU backend.
				</para>
			</sect3>
			
			<sect3>
				<title>FreeBSD</title>

				<para>
					You need the 'boost-libs' package.
				</para>

				<para>
					Some boost header files are broken, for patches
					see <filename>packaging/patches/FreeBSD</filename>.
					They can be applied to the ports directory before
					rebuilding Boost or directly to the installed header files in
					<filename>/usr/local/include/boost</filename>.
				</para>
			</sect3>

			<sect3>
				<title>NetBSD</title>

				<para>
					You need the 'boost-libs' package.
				</para>
			</sect3>
			
			<sect3>
				<title>OpenIndiana 151a8</title>

				<para>
					We don't use the CSW boost packages.
				</para>
				
				<para>
					As long you don't need ICU support you can
					build Boost as follows:
				</para>
				
				<para>
					First apply all patches found in
					<filename>packaging/patches/Solaris/1.54.0</filename>.
				</para>
				
				<para>
					Then build boost with:
					<programlisting language='shell'>
	./bootstrap.sh --prefix=/opt/csw/boost-1.54.0 \
		--with-libraries=thread,filesystem,system,program_options,date_time
	./b2 -a -d2 install
					</programlisting>
				</para>
				
				<para>
					<emphasis role="bold">Note</emphasis>: The only
					tested version for now is version 1.54.0! Other
					versions of Boost may work or not..
				</para>
			</sect3>

			<sect3>
				<title>Solaris 10</title>
				<para>
					We don't use the CSW boost packages.
				</para>
				
				<para>
					As long you don't need ICU support you can
					build Boost as follows:
				</para>
								
				<para>
					Apply the following patch to <filename>boost/cstdint.ppp</filename> for boost
					(<ulink url="https://svn.boost.org/trac/boost/ticket/6158">https://svn.boost.org/trac/boost/ticket/6158</ulink>, see also
					<filename>packaging/patches/Solaris/boost-1.48.0</filename> for patch files):

					<programlisting language='shell'>
	...
	namespace boost
	{

	#if defined(sun) || defined(__sun) 
		typedef signed char int8_t;
	#else
		using ::int8_t;             
	#endif  
	..
					</programlisting>
				</para>
				
				<para>
					Patch the correct architecture (V8 is not really supported, but V8
					is also very old) in <filename>tools/build/v2/user-config.jam</filename>:

					<programlisting language='shell'>
	using gcc : 4.6.3 : g++ : &lt;compileflags>-mcpu=v9 ; 
					</programlisting>
				</para>
				
				<para>
					Then build boost with:
					<programlisting language='shell'>
	./bootstrap.sh --prefix=/opt/csw/boost-1.48.0 \
		--with-libraries=thread,filesystem,system,program_options,date_time
	./b2 -a -d2 install
					</programlisting>
				</para>
				
				<para>
					<emphasis role="bold">Note</emphasis>: The only
					tested version for now is version 1.48.0! Other
					versions of Boost may work or not:
				</para>

				<para>
					Do not use boost 1.49.0, it has a missing function fchmodat, see
					<ulink url="http://lists.boost.org/boost-build/2012/02/25680.php">http://lists.boost.org/boost-build/2012/02/25680.php</ulink>
					causing building of libboost_filesystem to fail!
				</para>
				
				<para>
					Boost 1.50.0 and 1.51.0 have never been tested with Wolframe, so don't
					use those!
				</para>
				
				<para>
					Support for 1.52.0 and later is not guaranteed.
				</para>
			</sect3>
			
		</sect2>
<!-- SSL -->
		<sect2>
			<title>Secure Socket Layer (SSL)</title>
			
			<para>
				The <application>Wolframe</application> protocol can
				be secured with SSL. You have to specify the following
				when building:

		        <programlisting language='shell'>
	make WITH_SSL=1
			</programlisting>				
			</para>
			
			<para>
				Currently only OpenSSL (<ulink url="http://www.openssl.org">http://www.openssl.org</ulink>)
				is supported. The location of the library can be overloaded with:
		        <programlisting language='shell'>
	make WITH_SSL=1 OPENSSL_DIR=/usr/local/openssl-1.0.1.f
			</programlisting>				
			</para>				
			
			<para>
				Use the most recent version of the OpenSSL library available
				for you platform.
			</para>

			<sect3>
				<title>RedHat, Fedora, CentOS, Scientific Linux and similar Linux distributions</title>
				
				<para>
					You need the 'openssl-devel' package.
				</para>
			</sect3>

			<sect3>
				<title>Debian, Ubuntu and similar Linux distributions</title>
				
				<para>
					You need the 'libssl-dev' package.
				</para>
			</sect3>

			<sect3>
				<title>openSUSE, SLES and similar Linux distributions</title>		
				<para>
					You need the 'openssl-devel' package.
				</para>
			</sect3>

			<sect3>
				<title>ArchLinux</title>
				<para>
					You need the 'openssl' package.
				</para>
			</sect3>

			<sect3>
				<title>Slackware</title>
				<para>
					You need the 'openssl' package. This package is
					part of the 'n' package series.
				</para>
			</sect3>

			<sect3>
				<title>FreeBSD</title>
				<para>
					FreeBSD contains all necessary SSL libraries per default,
					you don't have to install any special packages.
				</para>
			</sect3>

			<sect3>
				<title>NetBSD</title>
				<para>
					NetBSD contains all necessary SSL libraries per default,
					you don't have to install any special packages.
				</para>
			</sect3>

			<sect3>
				<title>OpenIndiana 151a8</title>
				
				<para>
					You need the 'CSWlibssl-dev' package.
				</para>
			</sect3>

			<sect3>
				<title>Solaris 10</title>
				
				<para>
					You need the 'libssl_dev' package.
				</para>
			</sect3>
		</sect2>

<!-- Sqlite3 -->		
		<sect2>
			<title>SQLite database support</title>
			
			<para>
				<application>Wolframe</application> can use
				an Sqlite3 database (<ulink url="http://sqlite.org">http://sqlite.org</ulink>)
				as backend for data storage and for authentication and
				autorization.
			</para>
			
			<para>
				You enable the building of a loadable Sqlite3 database
				module with:

		        <programlisting language='shell'>
	make WITH_SYSTEM_SQLITE3=1
			</programlisting>
							
			</para>
			
			<para>
				If you don't have a recent Sqlite version on your
				system you can also build the module against the
				embedded version:

		        <programlisting language='shell'>
	make WITH_LOCAL_SQLITE3=1
			</programlisting>				
			
			</para>

			<para>
				The location of the Sqlite library can be overloaded with:
		        <programlisting language='shell'>
	make WITH_SYSTEM_SQLITE3=1 SQLITE3_DIR=/usr/local/sqlite-3.4.3
			</programlisting>				
			</para>
			
			<para>
				You can also override all compilation and linking flags
				of Sqlite separately:
		        <programlisting language='shell'>
	make WITH_SYSTEM_SQLITE3=1 \
		SQLITE3_INCLUDE_DIR=/usr/local/sqlite-3.4.3/include \
		SQLITE3_LIB_DIR= /usr/local/sqlite-3.4.3/lib \
		SQLITE3_LIBS=-lsqlite3
			</programlisting>				
			</para>
			
			<para>
				When building with 'WITH_SYSTEM_SQLITE3' it is enough to install the
				correct development library.
			</para>
				
			<sect3>
				<title>RedHat/Centos/Scientific Linux 5 and similar Linux distributions</title>
				
				<para>
					The official Sqlite package is too old, use the
					embedded version of Sqlite with 'WITH_SYSTEM_SQLITE3=1'.
				</para>
			</sect3>

			<sect3>
				<title>RedHat/Centos/Scientific Linux 6, Fedora and similar Linux distributions</title>
				
				<para>
					You need the 'sqlite-devel' package.
				</para>
			</sect3>
			
			<sect3>
				<title>Debian, Ubuntu and similar Linux distributions</title>
				
				<para>
					You need the 'libsqlite3-dev' package.
				</para>
				
				<para>
					For running the Sqlite3 database tests you also 
					need the 'sqlite3' package.
				</para>
			</sect3>

			<sect3>
				<title>openSUSE, SLES and similar Linux distributions</title>		
				<para>
					You need the 'sqlite3-devel' package.
				</para>

				<para>
					For running the Sqlite3 database tests you also 
					need the 'sqlite3' package.
				</para>
			</sect3>

			<sect3>
				<title>ArchLinux</title>
				<para>
					You need the 'sqlite' package.
				</para>
			</sect3>

			<sect3>
				<title>Slackware</title>
				<para>
					You need the 'sqlite' package. This package is
					part of the 'ap' package series.
				</para>
			</sect3>

			<sect3>
				<title>FreeBSD</title>
				<para>
					You need the 'sqlite3' package.
				</para>
			</sect3>

			<sect3>
				<title>NetBSD</title>
				<para>
					You need the 'sqlite3' package.
				</para>
			</sect3>

			<sect3>
				<title>OpenIndiana 151a8</title>
				
				<para>
					You need the 'CSWlibsqlite3-0' and the 'CSWlibsqlite3-dev' packages.
				</para>
			</sect3>			

			<sect3>
				<title>Solaris 10</title>
				
				<para>
					You need the 'CSWlibsqlite3-0' and the 'CSWlibsqlite3-dev' packages.
				</para>
			</sect3>
	
		</sect2>

<!-- PostgreSQL -->
		<sect2>
			<title>PostgreSQL database support</title>
			
			<para>
				<application>Wolframe</application> can use
				a PostgreSQL database (<ulink url="http://postgresql.org">http://postgresql.org</ulink>)
				as backend for data storage and for authentication and
				autorization.
			</para>
			
			<para>
				You enable the building of a loadable PostgreSQL database
				module with:

		        <programlisting language='shell'>
	make WITH_PGSQL=1
			</programlisting>
							
			</para>

			<para>
				The location of the PostgreSQL library can be overloaded with:
		        <programlisting language='shell'>
	make WITH_PGSQL=1 PGSQL_DIR=/usr/local/postgresql-9.1.3
			</programlisting>				
			</para>
			
			<para>
				You can also override all compilation and linking flags
				of PostgreSQL separately:
		        <programlisting language='shell'>
	make WITH_PGSQL=1 \
		PGSQL_INCLUDE_DIR=/usr/local/postgresql-9.1.3/include \
		PGSQL_LIB_DIR=/usr/local/postgresql-9.1.3/lib \
		PGSQL_LIBS=-lpq
			</programlisting>				
			</para>
							
			<sect3>
				<title>RedHat, Fedora, CentOS, Scientific Linux and similar Linux distributions</title>
				
				<para>
					You need the 'postgresql-devel' package.
				</para>
				
				<para>
					For Centos/RHEL/SciLi 5 you can choose between the
					'postgresql-devel'package (which is version 8.1)
					or the 'postgresql84-devel' package. The 8.4
					version is recommended over 8.1.
				</para>
				
				<para>
					For running the Postgresql tests you need a fully function 'postgresql-server'
					with a db user 'wolfusr' (password: 'wolfpwd') owning a database called
					'wolframe'.
				</para>
				
				<para>
					Setting up a test user in PostgreSQL is done with:
					<programlisting language='shell'>
	postgresql-setup initdb
	systemctl start postgresql.service
	systemctl enable postgresql.service
					</programlisting>
					
					change the authentication method from 'ident' to 'md5' in
					<filename>pg_hba.conf</filename>.
				</para>
			</sect3>
			
			<sect3>
				<title>Debian, Ubuntu and similar Linux distributions</title>
				
				<para>
					You need the 'libpq-dev' package.
				</para>
				
				<para>
					For running the PostgreSQL database tests you also
					need the 'postgresql-client' package.
				</para>
			</sect3>

			<sect3>
				<title>openSUSE, SLES and similar Linux distributions</title>		
				<para>
					You need the 'postgresql-devel' package.
				</para>
			</sect3>

			<sect3>
				<title>ArchLinux</title>
				<para>
					You need the 'postgresql-libs' package.
				</para>
				
				<para>
					If you want to test you also have to set
					up the PostgreSQL server which comes
					in the 'postgresql' package.
				</para>
				
			</sect3>

			<sect3>
				<title>Slackware</title>
				<para>
					A PostgreSQL package is not available on Slackware,
					build your own one with:
					<programlisting language='shell'>
	./configure --prefix=/usr/local/pgsql
	make
	make install
	groupadd -g 990 postgres
	useradd -g postgres -u 990 postgres
	mkdir /usr/local/pgsql/var
	chown -R postgres:users /usr/local/pgsql/var
	su postgres
	/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/var
	exit
	cat > /etc/rc.d/rc.postgresql
	#!/bin/sh

	case "$1" in
		start)
			su -l postgres -s /bin/sh -c "/usr/local/pgsql/bin/pg_ctl  -D /usr/local/pgsql/var -p /usr/local/pgsql/bin/postmaster start  > /dev/null 2>&amp;1" &lt; /dev/null
			;;
		stop)
			kill `ps -efa | grep postmaster | grep -v grep | awk '{print $2}'`
			;;
		*)
			echo $"Usage: $0 {start|stop}"
			exit 1
	esac

	exit 0
	(ctrl-D)
	chmod 0775 /etc/rc.d/rc.postgresql 
	usermod -d /usr/local/pgsql postgres
					</programlisting>
				</para>
				
				<para>
					Compile <application>Wolframe</application> now with:
					<programlisting language='shell'>
	make WITH_PGSQL=1 \
		PGSQL_DIR=/usr/local/pgsql
					</programlisting>
					
				</para>
				
				<para>
					Alternatively you can of course also build the 'postgresql'
					package with the help of SlackBuilds.
				</para>
			</sect3>

			<sect3>
				<title>FreeBSD</title>
				<para>
					You need the 'postgresql92-client' package.
				</para>

				<para>
					For testing you also need the 'postgresql92-server' package.
				</para>
			</sect3>

			<sect3>
				<title>NetBSD</title>
				<para>
					You need the 'postgresql92-client' package.
				</para>

				<para>
					For testing you also need the 'postgresql92-server' package.
				</para>
			</sect3>

			<sect3>
				<title>OpenIndiana 151a8</title>
				
				<para>
					You need the 'CSWpostgresql-dev' package.
				</para>
				
				<para>
					For testing you also need the 'CSWpostgresql91-server' package.
				</para>
			</sect3>			

			<sect3>
				<title>Solaris 10</title>

				<para>
					You need the 'CSWpostgresql-dev' package.
				</para>

				<para>
					For testing you also need the 'CSWpostgresql91-server' package.
				</para>
			</sect3>
			
		</sect2>

<!-- Oracle -->
		<sect2>
			<title>Oracle database support</title>
			
			<para>
				<application>Wolframe</application> can use
				a Oracle database (<ulink url="http://www.oracle.com">http://www.oracle.com</ulink>)
				as backend for data storage and for authentication and
				autorization.
			</para>
			
			<para>
				<emphasis role="bold">Import note</emphasis>: Make sure you
				have all the licenses to develop with Oracle and to install an
				Oracle database! The <application>Wolframe</application> team
				doesn't take any responsability if licenses are violated!
			</para>
			
			<para>
				You enable the building of a loadable Oracle database
				module with:

		        <programlisting language='shell'>
	make WITH_ORACLE=1
			</programlisting>
							
			</para>

			<para>
				The location of the Oracle instantclient library can be overloaded with:
		        <programlisting language='shell'>
	make WITH_ORACLE=1 ORACLE_DIR=/opt/oracle/instantclient_11_2
			</programlisting>				
			</para>
			
			<para>
				You can also override all compilation and linking flags
				of Oracle separately:
		        <programlisting language='shell'>
	make WITH_ORACLE=1 \
		ORACLE_INCLUDE_DIR=/usr/lib/oracle/11_2/client64 \
		ORACLE_LIB_DIR=/usr/lib/oracle/11_2/client64 \
		ORACLE_LIBS=-lclntsh
			</programlisting>				
			</para>

			<para>
				If you want to run the tests for Oracle you'll have to set up an Oracle
				database. Then install the 'wolframe' database and the 'wolfusr' database
				user. Sql example files can be found in
				<filename>contrib/database/oracle</filename>.
			</para>
							
			<sect3>
				<title>RedHat, Fedora, CentOS, Scientific Linux and similar Linux distributions</title>
				
				<para>
					For building the Oracle database module you have to download the RPM packages
					<filename>oracle-instantclient12.1-basic-12.1.0.1.0-1.i386.rpm</filename> and
					<filename>oracle-instantclient12.1-devel-12.1.0.1.0-1.i386.rpm</filename>.
					You can of course also install the zipfiles and install those.
				</para>

				<para>
					From the system repositories you'll need the 'libaio' package.
				</para>
				
				<para>
					If you want to use the 'sqlplus' command line tool for manual testing you also
					have to install the package
					<filename>oracle-instantclient12.1-sqlplus-12.1.0.1.0-1.i386.rpm</filename>.
					If you want a history in sqlplus it's highly recommended that you install
					a command line history wrapper like for instance 'rlwrap'.
				</para>
								
			</sect3>
			
			<sect3>
				<title>Debian, Ubuntu and similar Linux distributions</title>

				<para>
					For building the Oracle database module you have to download the RPM packages
					<filename>oracle-instantclient12.1-basic-12.1.0.1.0-1.i386.rpm</filename> and
					<filename>oracle-instantclient12.1-devel-12.1.0.1.0-1.i386.rpm</filename>.
				</para>
				
				<para>
					To install those RPM files you'll need the 'alien' tool. You can of course
					also install the zipfiles and install those.
				</para>

				<para>
					From the system repositories you'll need the 'libaio1' package.
				</para>
				
				<para>
					If you want to use the 'sqlplus' command line tool for manual testing you also
					have to install the package
					<filename>oracle-instantclient12.1-sqlplus-12.1.0.1.0-1.i386.rpm</filename>.
					If you want a history in sqlplus it's highly recommended that you install
					a command line history wrapper like for instance 'rlwrap'.
				</para>								
			</sect3>

			<sect3>
				<title>openSUSE, SLES and similar Linux distributions</title>		

				<para>
					For building the Oracle database module you have to download the RPM packages
					<filename>oracle-instantclient12.1-basic-12.1.0.1.0-1.i386.rpm</filename> and
					<filename>oracle-instantclient12.1-devel-12.1.0.1.0-1.i386.rpm</filename>.
					You can of course also install the zipfiles and install those.
				</para>

				<para>
					From the system repositories you'll need the 'libaio1' package.
				</para>
				
				<para>
					If you want to use the 'sqlplus' command line tool for manual testing you also
					have to install the package
					<filename>oracle-instantclient12.1-sqlplus-12.1.0.1.0-1.i386.rpm</filename>.
					If you want a history in sqlplus it's highly recommended that you install
					a command line history wrapper like for instance 'rlwrap'.
				</para>
			</sect3>

			<sect3>
				<title>ArchLinux</title>
				<para>
					You need the two packages 'oracle-instantclient-basic'
					and 'oracle-instantclient-sdk'.
				</para>

				<para>
					Have a look at <ulink url="https://wiki.archlinux.org/index.php/Oracle_client">https://wiki.archlinux.org/index.php/Oracle_client</ulink>
					on how to install the Oracle packages. Basically you have two
					options: either you use the 'oracle' pacman repository or you
					download the Oracle packages by hand and run the build scripts
					from AUR.
				</para>
				
				<para>
					If you want to use the 'sqlplus' command line tool for manual testing you also
					have to install the package 'oracle-instantclient-sqlplus'.
					If you want a history in sqlplus it's highly recommended that you install
					a command line history wrapper like for instance 'rlwrap'.
				</para>
				
			</sect3>

			<sect3>
				<title>Slackware</title>
				<para>
					Simply download the zipfiles and install them to a directory,
					let's say '/opt/oracle/instantclient_12_1':
					<programlisting language='shell'>
	mkdir -p /opt/oracle
	cd /opt/oracle
	unzip instantclient-basic-linux.x64-12.1.0.1.0.zip
	unzip instantclient-sdk-linux.x64-12.1.0.1.0.zip
					</programlisting>
				</para>
				
				<para>
					Add the following line to <filename>/etc/ld.so.conf</filename> and
					reload the cached shared libraries:
					<programlisting language='shell'>
	echo "/opt/oracle/instantclient_12_1" >> /etc/ld.so.conf
	ldconfig
					</programlisting>				
				</para>
				
				<para>
					Call 'make' with:
					<programlisting language='shell'>
	make WITH_ORACLE=1 ORACLE_DIR=/opt/oracle/instantclient_12_1
					</programlisting>
				</para>				
			</sect3>

			<sect3>
				<title>FreeBSD</title>
				<para>
					There are no plans for an Oracle module on FreeBSD.
				</para>
			</sect3>

			<sect3>
				<title>NetBSD</title>
				<para>
					There are no plans for an Oracle module on NetBSD.
				</para>
			</sect3>

			<sect3>
				<title>OpenIndiana 151a8</title>
				
				<para>
					There are no plans for an Oracle module on OpenIndiana.
				</para>
			</sect3>

			<sect3>
				<title>Solaris 10</title>

				<para>
					For building the Oracle database module you need
					the two packages 'oracle-instantclient-basic',
					'oracle-instantclient-sdk' (both 11.2 and 12.1
					are ok, 12.1 needs a higher patchlevel of the SUNW C library though).
				</para>
				
				<para>
					Unpack the ZIPs for instance to '/opt/oracle/instantclient_11_2' and build
					set ORACLE_DIR accordingly (together with WITH_ORACLE=1).
				</para>
			</sect3>

		</sect2>

<!-- libxml2/libxslt -->
		<sect2>
			<title>XML filtering support with libxml2 and libxslt</title>
			
			<para>
				<application>Wolframe</application> can use
				libxml2 and libxslt (<ulink url="http://xmlsoft.org/">http://xmlsoft.org/</ulink>)
				for filtering and the conversion of XML data.
			</para>
			
			<para>
				You can build only filtering with libxml2. But if you enable libxslt
				filtering you also have to enable libxml2 filtering.
			</para>
			
			<para>
				You enable the building of a loadable libxml2/libxslt filtering
				module with:

		        <programlisting language='shell'>
	make WITH_LIBXML2=1 WITH_LIBXSLT=1
			</programlisting>
							
			</para>
			
			<para>
				The location of those two libraries can be overloaded with:
		        <programlisting language='shell'>
	make WITH_LIBXML2=1 WITH_LIBXSLT=1 \
		LIBXML2_DIR=/usr/local/libxml2-2.9.1 \
		LIBXSLT_DIR=/usr/local/libxslt-1.1.28
			</programlisting>				
			</para>
			
			<para>
				You can also override all compilation and linking flags
				of libxml2 and libxslt separately:
		        <programlisting language='shell'>
	make WITH_LIBXML2=1 WITH_LIBXSLT=1 \
		LIBXML2_INCLUDE_DIR=/usr/local/libxml2-2.9.1/include \
		LIBXML2_LIB_DIR=/usr/local/libxml2-2.9.1/lib \
		LIBXML2_LIBS=-lxml2 \
		LIBXSLT_INCLUDE_DIR=/usr/local/libxslt-1.1.28/include \
		LIBXSLT_LIB_DIR=/usr/local/libxslt-1.1.28/lib \
		LIBXSLT_LIBS=-lxslt
			</programlisting>				
			</para>
							
			<sect3>
				<title>RedHat/Centos/Scientific Linux 5 and similar Linux distributions</title>
				
				<para>
					The official libxml2 and libxslt package is too old, compile
					your own versions. Make sure your own libxslt version uses
					the libxml2 version you compiled and not the system one!
				</para>
				
				<para>
					If you don't need working iconv support for non-UTF8 character
					sets you may also try to use the provided packages 
					'libxml2-devel' and 'libxslt-devel' but we cannot recommend this.
				</para>
			</sect3>

			<sect3>
				<title>RedHat/Centos/Scientific Linux 6, Fedora and similar Linux distributions</title>
				
				<para>
					You need the 'libxml2-devel' and 'libxslt-devel' packages.
				</para>
			</sect3>
			
			<sect3>
				<title>Debian, Ubuntu and similar Linux distributions</title>
				
				<para>
					You need the 'libxml2-dev' and 'libxslt1-dev ' packages.
				</para>				
			</sect3>

			<sect3>
				<title>openSUSE, SLES and similar Linux distributions</title>		
				<para>
					You need the 'libxml2-devel' and 'libxslt-devel' packages.
				</para>
			</sect3>

			<sect3>
				<title>ArchLinux</title>
				<para>
					You need the 'libxml2' and 'libxslt' packages.
				</para>
			</sect3>

			<sect3>
				<title>Slackware</title>
				<para>
					You need the 'libxml2' and the 'libxslt' packages. Both packages are
					part of the 'l' package series.
				</para>
			</sect3>

			<sect3>
				<title>FreeBSD</title>
				<para>
					You need the 'libxml2' and 'libxslt' packages.
				</para>
			</sect3>

			<sect3>
				<title>NetBSD</title>
				<para>
					You need the 'libxml2' and 'libxslt' packages.
				</para>
			</sect3>

			<sect3>
				<title>OpenIndiana 151a8</title>
				
				<para>
					You need the 'CSWlibxml2-dev' and 'CSWlibxslt-dev' packages.
				</para>
			</sect3>			

			<sect3>
				<title>Solaris 10</title>

				<para>
					Both standard packages 'SUNWlxml' and 'SUNWlxsl' are
					too old, we use the two CSW packages 'CSWlibxml2-dev'
					and 'CSWlibxslt-dev'.
				</para>				
			</sect3>			
						
		</sect2>

<!-- Textwolf -->
		<sect2>
			<title>XML filtering support with Textwolf</title>
			
			<para>
				<application>Wolframe</application> can use
				Textwolf (<ulink url="http://textwolf.net">http://textwolf.net</ulink>)
				for filtering and the conversion of XML data.
			</para>
			
			<para>
				The textwolf library is embedded in the subdirectory
				<filename>3rdParty/textwolf</filename>.
			</para>
			
			<para>
				You enable the building of a loadable Textfolw filtering
				module with:

		        <programlisting language='shell'>
	make WITH_TEXTWOLF=1
			</programlisting>
							
			</para>
			
			<para>
				<emphasis role="bold">Note</emphasis>: If you plan to
				run tests when building the <application>Wolframe</application>
				you should enable Textwolf as many tests rely on it's presence.
			</para>						
		</sect2>
		

<!-- cJSON -->
		<sect2>
			<title>JSON filtering support with cJSON</title>
			
			<para>
				<application>Wolframe</application> can use
				cJSON (<ulink url="http://sourceforge.net/projects/cjson/">http://sourceforge.net/projects/cjson/</ulink>)
				for filtering and the conversion of JSON data.
			</para>
			
			<para>
				The cjson library is embedded in the subdirectory
				<filename>3rdParty/libcjson</filename>.
			</para>
			
			<para>
				You enable the building of a loadable cJSON filtering
				module with:

		        <programlisting language='shell'>
	make WITH_CJSON=1
			</programlisting>
							
			</para>
									
		</sect2>
		
<!-- Lua -->
		<sect2>
			<title>Scripting support with Lua</title>
			
			<para>
				<application>Wolframe</application> can be scripted
				with Lua (<ulink url="http://www.lua.org">http://www.lua.org</ulink>).
			</para>
			
			<para>
				The Lua interpreter is embedded in the subdirectory
				<filename>3rdParty/lua</filename>.
			</para>
			
			<para>
				You enable the building of a loadable Lua scripting
				module with:

		        <programlisting language='shell'>
	make WITH_LUA=1
			</programlisting>
							
			</para>
									
		</sect2>

<!-- Python -->
		<sect2>
			<title>Scripting support with Python</title>
			
			<para>
				<application>Wolframe</application> can be scripted
				with Python (<ulink url="https://www.python.org">https://www.python.org</ulink>).
			</para>
						
			<para>
				The module supports only version 3 of the Python interpreter,
				version 2 is not supported.
			</para>
			
			<para>
				You enable the building of a loadable Python scripting
				module with:

		        <programlisting language='shell'>
	make WITH_PYTHON=1
			</programlisting>
							
			</para>
			
			<para>
				The location of the Python library can be overloaded with:
		        <programlisting language='shell'>
	make WITH_PYTHON=1 \
		PYTHON_DIR=/usr/local/Python-3.3.5
			</programlisting>				
			</para>
			
			<para>
				You can also override all compilation and linking flags
				of the Python library separately:
		        <programlisting language='shell'>
	make WITH_PYTHON=1 \
		PYTHON_CFLAGS=-I/usr/include/python3.3m -I/usr/include/python3.3m \
		PYTHON_LDFLAGS=-lpthread -Xlink -export-dynamic \
		PYTHON_LIBS=-lpython3.3m
			</programlisting>				
			
			</para>
			<para>
				Normally you should not change those flags by hand and
				rely on the results of the 'python-config' script.
			</para>
							
			<sect3>
				<title>RedHat/Centos/Scientific Linux 5 and 6 and similar Linux distributions</title>
				
				<para>
					There are no official Python packages for version 3 of Python.
					Build your own version of Python. Make sure the location of
					'python3-config' is in your path.
				</para>				
			</sect3>

			<sect3>
				<title>Fedora and similar Linux distributions</title>
				
				<para>
					You need the 'python3-devel' package.
				</para>
			</sect3>
			
			<sect3>
				<title>Debian, Ubuntu and similar Linux distributions</title>
				
				<para>
					You need the 'python3-dev' package.
				</para>				
			</sect3>

			<sect3>
				<title>openSUSE, SLES and similar Linux distributions</title>		
				<para>
					You need the 'python3-devel' package.
				</para>
			</sect3>

			<sect3>
				<title>ArchLinux</title>
				<para>
					You need the 'python' package.
				</para>
			</sect3>

			<sect3>
				<title>Slackware</title>
				<para>
					On Slackware you have to build your own version of Python with:
					<programlisting language='shell'>
	./configure --enable-shared
	make
	make install
					</programlisting>
				</para>

				<para>
					Alternatively you can of course also build the 'python3'
					package with the help of SlackBuilds.
				</para>
			</sect3>

			<sect3>
				<title>FreeBSD</title>
				<para>
					Build the BSD ports package for 'python33'.
					There is no binary Python 3 package.
				</para>
			</sect3>

			<sect3>
				<title>NetBSD</title>
				<para>
					You need the 'python33' package.
				</para>
			</sect3>

			<sect3>
				<title>OpenIndiana 151a8</title>
				
				<para>
					We cannot use 'CSWpython31-dev' because it's build
					with the Forte compiler.
				</para>
				
				<para>
					We build our own Python 3 with:
					<programlisting language='shell'>
	./configure --prefix=/opt/csw/python-3.3.2/ --enable-shared
	gmake
	gmake install
					</programlisting>
				</para>
				
			</sect3>			

			<sect3>
				<title>Solaris 10</title>
				
				<para>
					We cannot use 'CSWpython31-dev' because it's build
					with the Forte compiler.
				</para>
				
				<para>
					We build our own Python 3 with:
					<programlisting language='shell'>
	./configure --prefix=/opt/csw/python-3.3.2/ --enable-shared
	gmake
	gmake install
					</programlisting>
				</para>
			</sect3>
			
		</sect2>

<!-- libhpdf -->
		<sect2>
			<title>Printing support with libhpdf</title>
			
			<para>
				<application>Wolframe</application> can print
				with libhpdf (<ulink url="http://libharu.org/">http://libharu.org/</ulink>,
				also called libharu).
			</para>
									
			<para>
				You enable the building of a loadable libhpdf printing
				module with:

		        <programlisting language='shell'>
	make WITH_SYSTEM_LIBHPDF=1
			</programlisting>
							
			</para>
			
			<para>
				You can also link against the embedded version of
				libhpdf in '3rdParty/libhpdf' instead of the one of
				the Linux distribution:
		        <programlisting language='shell'>
	make WITH_LOCAL_LIBHPDF=1
			</programlisting>
			</para>
			
			<para>
				The location of the libhpdf library can be overloaded with:
		        <programlisting language='shell'>
	make WITH_SYSTEM_LIBPHDF=1 \
		LIBHPDF_DIR=/usr/local/libharu-2.2.1
			</programlisting>				
			</para>

			<para>
				You can also override all compilation and linking flags
				of the libhpdf library separately:
		        <programlisting language='shell'>
	make WITH_SYSTEM_LIBPHDF=1 \
		LIBHPDF_INCLUDE_DIR=/usr/local/libharu-2.2.1/include \
		LIBHPDF_LIB_DIR=/usr/local/libharu-2.2.1/lib \
		LIBHPDF_LIBS=-lhpdf
			</programlisting>				
			
			</para>
			
			<para>
				Though most Linux distributions have a 'libhpdf' package we
				recommend to use the embedded version 2.3.0RC2 as this version
				contains many patches.
			</para>
			
			<sect3>
				<title>RedHat/Centos/Scientific Linux, Fedora and similar Linux distributions</title>
				
				<para>
					You need the 'zlib-devel' and 'libpng-devel' packages to
					build libhpdf.
				</para>				
				
				<para>
					On Fedora you can also try to use the 'libhpdf-devel' package.
				</para>
			</sect3>

			<sect3>
				<title>Debian, Ubuntu and similar Linux distributions</title>
				
				<para>
					You need the 'zlib1g-dev' and 'libpng12-dev' packages to
					build libhpdf.
				</para>				

				<para>
					You can also try to use the 'libhpdf-devel' package.
				</para>
			</sect3>

			<sect3>
				<title>openSUSE, SLES and similar Linux distributions</title>		
				<para>
					You need the 'zlib-devel' and 'libpng12-devel' or 'libpng15-devel' packages to
					build libhpdf.
				</para>

				<para>
					You can also try to use the 'libhpdf-devel' package.
				</para>
			</sect3>

			<sect3>
				<title>ArchLinux</title>
				<para>
					You need the 'zlib' and 'libpng' packages to
					build libhpdf.
				</para>

				<para>
					You can also try to use the 'libharu' package.
				</para>
			</sect3>

			<sect3>
				<title>Slackware</title>
				<para>
					On Slackware you have to build your own version of libhpdf.
					You need the 'zlib' and 'libpng' packages.
				</para>
				<para>
					Both packages are part of the 'l' package series.
				</para>
			</sect3>

			<sect3>
				<title>FreeBSD</title>
				<para>
					Build the embedded version of libhpdf with 'WITH_LOCAL_LIBHPDF=1'.
				</para>
				<para>
					You need the 'png'  package for this.
				</para>
			</sect3>

			<sect3>
				<title>NetBSD</title>
				<para>
					Build the embedded version of libhpdf with 'WITH_LOCAL_LIBHPDF=1'.
				</para>
				<para>
					You need the 'png' and the 'zlib' packages for this.
				</para>
			</sect3>

			<sect3>
				<title>OpenIndiana 151a8</title>
				
				<para>
					Build the embedded version of libhpdf with 'WITH_LOCAL_LIBHPDF=1'.
				</para>
				<para>
					You need the 'CSWlibz-dev' package for this.
				</para>
			</sect3>			

			<sect3>
				<title>Solaris 10</title>
				
				<para>
					Build the embedded version of libhpdf with 'WITH_LOCAL_LIBHPDF=1'.
				</para>
				<para>
					You need the 'CSWlibz-dev' package for this.
				</para>
				<para>
					'SUNWzlib' is missing 64-bit support so don't use it!
				</para>
			</sect3>			
						
		</sect2>

<!-- FreeImage -->
		<sect2>
			<title>Image processing with FreeImage</title>
			
			<para>
				<application>Wolframe</application> can manipulate
				various image formats with the help of
				the FreeImage project (<ulink url="http://freeimage.sourceforge.net">http://freeimage.sourceforge.net</ulink>).
			</para>
									
			<para>
				You enable the building of a loadable FreeImage processing
				module with:

		        <programlisting language='shell'>
	make WITH_SYSTEM_FREEIMAGE=1
			</programlisting>
							
			</para>
			
			<para>
				You can also link against the embedded version of
				FreeImage in '3rdParty/freeimage' instead of the one of
				the Linux distribution:
		        <programlisting language='shell'>
	make WITH_LOCAL_FREEIMAGE=1
			</programlisting>
			</para>
			
			<para>
				The location of the FreeImage package can be overloaded with:
		        <programlisting language='shell'>
	make WITH_SYSTEM_FREEIMAGE=1 \
		FREEIMAGE_DIR=/usr/local/FreeImage-3.15.4
			</programlisting>				
			</para>

			<para>
				You can also override all compilation and linking flags
				of the FreeImage package separately:
		        <programlisting language='shell'>
	make WITH_SYSTEM_FREEIMAGE=1 \
		FREEIMAGE_INCLUDE_DIR=/usr/local/FreeImage-3.15.4/include \
		FREEIMAGE_LIB_DIR=/usr/local/FreeImage-3.15.4/lib \
		FREEIMAGE_LIBS=-lfreeimage \
		FREEIMAGEPLUS_INCLUDE_DIR=/usr/local/FreeImage-3.15.4/include \
		FREEIMAGEPLUS_LIB_DIR=/usr/local/FreeImage-3.15.4/lib \
		FREEIMAGEPLUS_LIBS=-lfreeimageplus
			</programlisting>				
			
			</para>
			
			<para>
				Though there are FreeImage packages on most Linux distributions
				you may still want to use the locally embedded version.
			</para>
						
			<sect3>
				<title>RedHat/Centos/Scientific Linux and similar Linux distributions</title>
				
				<para>
					There are FreeImage packages, but they are usually quite old.
					Better build you own version if FreeImage.
				</para>
				
				<para>
					You need the 'zlib-devel' and 'libpng-devel' packages to
					build FreeImage.
				</para>		
			</sect3>

			<sect3>
				<title>Fedora and similar Linux distributions</title>
				
				<para>
					You need the 'zlib-devel' and 'libpng-devel' packages to
					build FreeImage.
				</para>		

				<para>
					You may also try to use 'freeimage-devel' package.
				</para>
			</sect3>

			<sect3>
				<title>Debian, Ubuntu and similar Linux distributions</title>
				
				<para>
					You need the 'zlib1g-dev' and 'libpng12-dev' packages to
					build FreeImage.
				</para>				

				<para>
					You can also try to use the 'libfreeimage-devel' package.
				</para>
			</sect3>

			<sect3>
				<title>openSUSE, SLES and similar Linux distributions</title>		
				<para>
					You need the 'zlib-devel' and 'libpng12-devel' or 'libpng15-devel' packages to
					build FreeImage.
				</para>

				<para>
					You can also try to use the 'freeimage-devel' package.
				</para>
			</sect3>

			<sect3>
				<title>ArchLinux</title>
				<para>
					You need the 'freeimage' package.
				</para>
			</sect3>

			<sect3>
				<title>Slackware</title>
				<para>
					On Slackware you have to build your own version of FreeImage.
					You need the 'zlib' and 'libpng' packages.
					Both packages are part of the 'l' package series.
				</para>

				<para>
					Alternatively you can of course also build the 'FreeImage'
					package with the help of SlackBuilds.
				</para>
			</sect3>

			<sect3>
				<title>FreeBSD</title>
				<para>
					Build the embedded version of FreeImage with 'WITH_LOCAL_FREEIMAGE=1'.
				</para>

				<para>
					You need the 'png'  package for this.
				</para>
				
				<para>
					There is a FreeImage port but it doesn't build the libfreeimageplus
					library we need.
				</para>

				<para>
					<emphasis role="bold">Note</emphasis>: FreeImage doesn't build on
					32-bit currently because gcc doesn't support some 64-bit constants on FreeBSD.
				</para>
			</sect3>

			<sect3>
				<title>NetBSD</title>
				<para>
					Build the embedded version of FreeImage with 'WITH_LOCAL_FREEIMAGE=1'.
					You need the 'png' and the 'zlib' packages for this.
				</para>
			</sect3>

			<sect3>
				<title>OpenIndiana 151a8</title>
				
				<para>
					Build the embedded version of FreeImage with 'WITH_LOCAL_FREEIMAGE=1'.
				</para>
				<para>
					You need the 'CSWlibz-dev' package for this.
				</para>
			</sect3>			

			<sect3>
				<title>Solaris 10</title>
				
				<para>
					Build the embedded version of FreeImage with 'WITH_LOCAL_FREEIMAGE=1'.
				</para>
				<para>
					You need the 'CSWlibz-dev' package for this.
				</para>
				<para>
					'SUNWzlib' is missing 64-bit support so don't use it!
				</para>
			</sect3>			
						
		</sect2>

<!-- zlib and libpng -->
		<sect2>
			<title>zlib and libpng</title>
			
			<para>
				FreeImage and libhpdf need the zlib and libpng libraries.
			</para>
									
			<para>
				The location of the zlib and libpng package can be overloaded with:
		        <programlisting language='shell'>
	make \
		LIBZ_DIR=/usr/local/zlib-1.2.8 \
		LIBPNG_DIR=/usr/local/libpng-1.6.10
			</programlisting>				
			</para>

			<para>
				You can also override all compilation and linking flags
				of the zlib and libpng packages separately:
		        <programlisting language='shell'>
	make \
		LIBZ_INCLUDE_DIR=/usr/local/zlib-1.2.8/include \
		LIBZ_LIB_DIR=/usr/local/zlib-1.2.8/lib \
		LIBZ_LIBS=-lz \
		LIBPNG_INCLUDE_DIR=/usr/local/libpng-1.6.10/include \
		LIBPNG_LIB_DIR=/usr/local/libpng-1.6.10/libs \
		LIBPNG_LIBS=-lpng
			</programlisting>				
			
			</para>
									
		</sect2>

<!-- ICU -->
		<sect2>
			<title>Support for ICU</title>
			
			<para>
				<application>Wolframe</application> can use
				the International Components for Unicode
				(ICU, <ulink url="http://site.icu-project.org/">http://site.icu-project.org</ulink>)
				library for text normalization and conversion.
			</para>
			
			<para>
				For this to work you need the ICU library itself
				(ICU4C, at least version 3.6) and the 'boost-locale'
				library has to have the	ICU backend enabled.
				This is not the	case in all Linux distributions.
			</para>
			
			<para>
				<emphasis role="bold">Note</emphasis>: The
				<application>Wolframe</application> server doesn't
				depend directly on the ICU library, only the ICU
				normalization module does!
			</para>
									
			<para>
				You enable the building of a loadable ICU normalization
				module with:

		        <programlisting language='shell'>
	make WITH_ICU=1
			</programlisting>
							
			</para>
						
			<para>
				The location of the ICU library can be overloaded with:
		        <programlisting language='shell'>
	make WITH_ICU=1 \
		ICU_DIR=/usr/local/icu4c-52_1
			</programlisting>				
			</para>

			<para>
				You can also override all compilation and linking flags
				of the ICU library separately:
		        <programlisting language='shell'>
	make WITH_ICU=1 \
		ICU_INCLUDE_DIR=/usr/local/icu4c-52_1/include \
		ICU_LIB_DIR=/usr/local/icu4c-52_1/lib \
		ICU_LIBS=-licuuc -licudata -licui18n
			</programlisting>				
			
			</para>
			
			<sect3>
				<title>RedHat/Centos/Scientific Linux, Fedora and similar Linux distributions</title>
				
				<para>
					Boost is too old, build your own Boost locale and ICU support.
				</para>		
			</sect3>
			
			<sect3>
				<title>Fedora and similar Linux distributions</title>
				
				<para>
					You need the 'boost-devel' package. The
					official Boost packages have support for
					Boost locale and the ICU backend.
				</para>
			</sect3>

			<sect3>
				<title>Debian, Ubuntu and similar Linux distributions</title>

				<sect4>
					<title>Debian 6</title>
				
					<para>
						The official Boost packages are too old, 
						build your own Boost locale and ICU support.
					</para>		
				</sect4>

				<sect4>
					<title>Debian 7</title>
					<para>
						You need 'libboost-locale-dev' package.
					</para>
				</sect4>

				<sect4>
					<title>Ubuntu 10.04.1 LTS, Ubuntu 12.04</title>
				
					<para>
						The official Boost packages are not recent enough.
						Build your own Boost version with ICU support here.
					</para>
				</sect4>
				
				<sect4>
					<title>Ubuntu 12.10</title>

					<para>
						You need 'libboost-locale-dev' package.
					</para>
				</sect4>

				<sect4>
					<title>Ubuntu 13.04</title>
					
					<para>
						The official Boost packages have problems.
						Build your own Boost version with ICU support here.
					</para>
				</sect4>
				
				<sect4>
					<title>Ubuntu 13.10</title>

					<para>
						You need 'libboost-locale-dev' package.
					</para>
				</sect4>
			</sect3>

			<sect3>
				<title>openSUSE, SLES and similar Linux distributions</title>		

				<sect4>
					<title>OpenSuSE 12.3, 13.1</title>
					<para>
						You need the 'boost-devel' package. The
						official Boost packages have support for
						Boost locale and the ICU backend.
					</para>
				</sect4>

				<sect4>
					<title>SLES 11 SP1, SP2 and SP3</title>
					<para>
						The official Boost packages are not recent enough
						and lack ICU support.
						Build your own Boost with ICU support here.
					</para>
				</sect4>
			</sect3>

			<sect3>
				<title>ArchLinux</title>
				<para>
					You need the 'boost-libs' package. The
					official Boost package have support for
					Boost locale and the ICU backend.
				</para>
			</sect3>

			<sect3>
				<title>Slackware</title>

				<para>
					The official Boost package contains support for 
					boost-locale and the ICU backend.
					This package is	part of the 'l' package series.
				</para>
			</sect3>

			<sect3>
				<title>FreeBSD</title>
				<para>
					The official Boost packages don't contain a
					boost-locale with ICU backend.
				</para>
				
				<para>
					Build Boost in this case with the patched from
					<filename>packaging/patches/FreeBSD</filename>
					applied.
				</para>
				
				<para>
					You also need the 'icu' package in this case.
				</para>
			</sect3>

			<sect3>
				<title>NetBSD</title>
				<para>
					<emphasis role="bold">Note</emphasis>: The Boost locale and ICU support is currently broken,
					see also <ulink url="https://github.com/Wolframe/Wolframe/issues/59">https://github.com/Wolframe/Wolframe/issues/59</ulink>.						
				</para>
			</sect3>

			<sect3>
				<title>OpenIndiana 151a8</title>
				
				<para>
					You cannot use the 'SUNWicud/SUNWicu' and 'CSWlibicu_dev'
					packages as they are both linked with the Forte C++ compiler.
					You have to compile your own version compiled with the
					gcc compiler from CSW:

					<programlisting language='shell'>
	gtar zxf icu4c-51_2-src.tgz
					</programlisting>

					apply the solaris XOPEN patch
					(<filename>packaging/patches/Solaris/icu4c-1.51.2/icu_source_common_uposixdefs_h.patch</filename>),
					then build ICU with:

					<programlisting language='shell'>
	cd source/icu
	./runConfigureICU Solaris/GCC --prefix=/opt/csw/icu4c-51.2
	gmake
	gmake install
					</programlisting>
				</para>
				
				<para>
					Then build Boost as follows:
				</para>
				
				<para>
					First apply all patches found in
					<filename>packaging/patches/Solaris/1.54.0</filename>.
				</para>
				
				<para>
					Then build boost with:
					<programlisting language='shell'>
	./bootstrap.sh --prefix=/opt/csw/boost-1.54.0 \
		--with-icu=/opt/csw/icu4c-51.2 \
		--with-libraries=thread,filesystem,system,program_options,date_time,regex,locale
	./b2 -a -sICU_PATH=/opt/csw/icu4c-51.2 -d2 install
					</programlisting>
				</para>
				
				<para>
					<emphasis role="bold">Note</emphasis>: The only
					tested version for now is version 1.54.0! Other
					versions of Boost may work or not..
				</para>

			</sect3>

			<sect3>
				<title>Solaris 10</title>
				<para>
					We don't use the CSW boost packages.
				</para>
				
				<para>
					You cannot use the 'SUNWicud/SUNWicu' and 'CSWlibicu_dev'
					packages as they are both linked with the Forte C++ compiler.
					You have to compile your own version compiled with the
					gcc compiler from CSW:

					<programlisting language='shell'>
	gtar zxf icu4c-49_1_2-src.tgz
					</programlisting>

					apply the solaris icu_source_configure patch
					(<filename>packaging/patches/Solaris/icu4c-1.49.2/icu_source_configure.patch</filename>),
					then build ICU with:

					<programlisting language='shell'>
	cd source/icu
	./runConfigureICU Solaris/GCC --prefix=/opt/csw/icu4c-49.1.2
	gmake
	gmake install
					</programlisting>
				</para>
												
				<para>
					Apply the following patch to <filename>boost/cstdint.ppp</filename> for boost
					(<ulink url="https://svn.boost.org/trac/boost/ticket/6158">https://svn.boost.org/trac/boost/ticket/6158</ulink>, see also
					<filename>packaging/patches/Solaris/boost-1.48.0</filename> for patch files):

					<programlisting language='shell'>
	...
	namespace boost
	{

	#if defined(sun) || defined(__sun) 
		typedef signed char int8_t;
	#else
		using ::int8_t;             
	#endif  
	..
					</programlisting>
				</para>
				
				<para>
					Patch the correct architecture (V8 is not really supported, but V8
					is also very old) in <filename>tools/build/v2/user-config.jam</filename>:

					<programlisting language='shell'>
	using gcc : 4.6.3 : g++ : &lt;compileflags>-mcpu=v9 ; 
					</programlisting>
				</para>
				
				<para>
					Apply all Boost compilation patches from 'packaging/patches/Solaris/boost-1.48.0' now.
				</para>


					
				<para>
					Then build boost with:
					<programlisting language='shell'>
	./bootstrap.sh --prefix=/opt/csw/boost-1.48.0 \
		--with-libraries=thread,filesystem,system,program_options,date_time,regex,locale \
		--with-icu=/opt/csw/icu4c-49.1.2
	./b2 -a -sICU_PATH=/opt/csw/icu4c-49.1.2 -d2 install
					</programlisting>
				</para>
				
				<para>
					<emphasis role="bold">Note</emphasis>: The only
					tested version for now is version 1.48.0! Other
					versions of Boost may work or not:
				</para>

				<para>
					Do not use boost 1.49.0, it has a missing function fchmodat, see
					<ulink url="http://lists.boost.org/boost-build/2012/02/25680.php">http://lists.boost.org/boost-build/2012/02/25680.php</ulink>
					causing building of libboost_filesystem to fail!
				</para>
				
				<para>
					Boost 1.50.0 and 1.51.0 have never been tested with Wolframe, so don't
					use those!
				</para>
				
				<para>
					Support for 1.52.0 and later is not guaranteed.
				</para>
			</sect3>
			
		</sect2>

<!-- PAM -->
		<sect2>
			<title>Authentication support with PAM</title>
			
			<para>
				<application>Wolframe</application> can authenticate
				users with PAM.
			</para>
									
			<para>
				You enable the building of a loadable PAM authentication
				module with:

		        <programlisting language='shell'>
	make WITH_PAM=1
			</programlisting>
							
			</para>
						
			<para>
				The location of the PAM library can be overloaded with:
		        <programlisting language='shell'>
	make WITH_PAM=1 \
		PAM_DIR=/usr/local/pam-1.1.8
			</programlisting>				
			</para>

			<para>
				You can also override all compilation and linking flags
				of the PAM library separately:
		        <programlisting language='shell'>
	make WITH_PAM=1 \
		PAM_INCLUDE_DIR=/usr/local/pam-1.1.8/include \
		PAM_LIB_DIR=/usr/local/pam-1.1.8/lib \
		PAM_LIBS=-lpam
			</programlisting>				
			
			</para>
						
			<sect3>
				<title>RedHat/Centos/Scientific Linux, Fedora and similar Linux distributions</title>
				
				<para>
					You need the 'pam-devel' package.
				</para>				
			</sect3>

			<sect3>
				<title>Debian, Ubuntu and similar Linux distributions</title>
				
				<para>
					You need the 'libpam0g-dev' package.
				</para>				
			</sect3>

			<sect3>
				<title>openSUSE, SLES and similar Linux distributions</title>		
				<para>
					You need the 'pam-devel' package.
				</para>
			</sect3>

			<sect3>
				<title>ArchLinux</title>
				<para>
					You need the 'pam' package.
				</para>
			</sect3>

			<sect3>
				<title>Slackware</title>
				<para>
					On Slackware there is no official PAM package.
					You have to build 'linux-pam' on your own.
				</para>
			</sect3>

			<sect3>
				<title>FreeBSD</title>
				<para>
					<emphasis role="bold">Note</emphasis>: We currently
					don't support PAM on FreeBSD.
				</para>
			</sect3>

			<sect3>
				<title>NetBSD</title>
				<para>
					<emphasis role="bold">Note</emphasis>: We currently
					don't support PAM on NetBSD.
				</para>
			</sect3>

			<sect3>
				<title>OpenIndiana 151a8</title>
				
				<para>
					PAM support is available out of the box just specify 'WITH_PAM=1'.
				</para>
			</sect3>			

			<sect3>
				<title>Solaris 10</title>
				
				<para>
					PAM support is available out of the box just specify 'WITH_PAM=1'.
				</para>
			</sect3>			
						
		</sect2>

<!-- SASL -->
		<sect2>
			<title>Authentication support with SASL</title>
			
			<para>
				<application>Wolframe</application> can authenticate
				users with the Cyrus SASL library
				(<ulink url="http://cyrusimap.org">http://cyrusimap.org/</ulink>).
			</para>
			
			<para>
				<emphasis role="bold">Note</emphasis>: GNU SASL is currently not supported.
			</para>
			
			<para>
				You enable the building of a loadable SASL authentication
				module with:

		        <programlisting language='shell'>
	make WITH_SASL=1
			</programlisting>
							
			</para>
						
			<para>
				The location of the Cyrus SASL library can be overloaded with:
		        <programlisting language='shell'>
	make WITH_SASL=1 \
		SASL_DIR=/usr/local/cyrus-sasl-2.1.26
			</programlisting>				
			</para>

			<para>
				You can also override all compilation and linking flags
				of the Cyrus SASL library separately:
		        <programlisting language='shell'>
	make WITH_SASL=1 \
		SASL_INCLUDE_DIR=/usr/local/cyrus-sasl-2.1.26/include \
		SASL_LIB_DIR=/usr/local/cyrus-sasl-2.1.26/lib \
		SASL_LIBS=-lsasl2
			</programlisting>				
			
			</para>
						
			<sect3>
				<title>RedHat/Centos/Scientific Linux, Fedora and similar Linux distributions</title>
				
				<para>
					You need the 'cyrus-sasl-devel' package.
				</para>				
			</sect3>

			<sect3>
				<title>Debian, Ubuntu and similar Linux distributions</title>
				
				<para>
					You need the 'libsasl2-dev' package.
				</para>		
				
				<para>
					For running the SASL tests you also need the 'sasl2-bin' package.
				</para>
			</sect3>

			<sect3>
				<title>openSUSE, SLES and similar Linux distributions</title>		
				<para>
					You need the 'cyrus-sasl-devel' package.
				</para>
			</sect3>

			<sect3>
				<title>ArchLinux</title>
				<para>
					You need the 'libsasl' package.
				</para>
			</sect3>

			<sect3>
				<title>Slackware</title>
				<para>
					You need the 'cyrus-sasl' package. This package is
					part of the 'n' package series.
				</para>
			</sect3>

			<sect3>
				<title>FreeBSD</title>
				<para>
					You need the 'cyrus-sasl' package.
				</para>
			</sect3>

			<sect3>
				<title>NetBSD</title>
				<para>
					You need the 'cyrus-sasl' package.
				</para>
			</sect3>

			<sect3>
				<title>OpenIndiana 151a8</title>
				
				<para>
					You need the 'CSWsasl' and 'CSWsasl-dev' packages.
				</para>
			</sect3>			

			<sect3>
				<title>Solaris 10</title>
				
				<para>
					You need the 'CSWsasl' and 'CSWsasl-dev' packages.
				</para>
			</sect3>			
						
		</sect2>

<!-- testing -->
		<sect2>
			<title>Testing Wolframe</title>
			
			<para>
				<application>Wolframe</application> has tests
				written in Google gtest
				(<ulink url="https://code.google.com/p/googletest/">https://code.google.com/p/googletest/</ulink>).
			</para>
			
			<para>
				Tests are run with:
		        <programlisting language='shell'>
	make test
			</programlisting>
			</para>
			
			<para>
				Some tests run for a long time (regression and stress
				tests). They are not run per default when calling
				'make test', but you have to call:
		        <programlisting language='shell'>
	make longtest
			</programlisting>
			</para>
			
			<para>
				Sometimes you only want to build the test programs but
				not to run them (for instance when cross-compiling). Then
				you can set the 'RUN_TESTS' variable as follows:
		        <programlisting language='shell'>
	make test RUN_TESTS=0
			</programlisting>
			</para>
		</sect2>
			
<!-- Expect -->
		<sect2>
			<title>Testing with Expect</title>
						
			<para>
				Some more complex tests are written with Expect
				(<ulink url="http://expect.sourceforge.net/">http://expect.sourceforge.net/</ulink>).
			</para>
						
			<para>
				You enable testing with Expect with:

		        <programlisting language='shell'>
	make WITH_EXPECT=1
			</programlisting>
							
			</para>
						
			<para>
				The location of the Expect interpreter can be overloaded with:
		        <programlisting language='shell'>
	make WITH_EXPECT=1 \
		EXPECT=/usr/local/bin/expect
			</programlisting>				
			</para>
						
			<sect3>
				<title>RedHat/Centos/Scientific Linux, Fedora and similar Linux distributions</title>
				
				<para>
					You need the 'expect' and the 'telnet' packages.
				</para>				
			</sect3>

			<sect3>
				<title>Debian, Ubuntu and similar Linux distributions</title>
				
				<para>
					You need the 'expect' and the 'telnet' packages.
				</para>		
			</sect3>

			<sect3>
				<title>openSUSE, SLES and similar Linux distributions</title>		
				<para>
					You need the 'expect' and the 'telnet' packages.
				</para>
			</sect3>

			<sect3>
				<title>ArchLinux</title>
				<para>
					You need the 'expect' and 'inetutils' packages.
				</para>
			</sect3>

			<sect3>
				<title>Slackware</title>
				<para>
					You need the 'expect' and 'telnet' packages. Those packages
					are part of the 'tcl' respectively the 'n' package series.
				</para>
			</sect3>

			<sect3>
				<title>FreeBSD</title>
				<para>
					You need the 'expect' package.
				</para>
			</sect3>

			<sect3>
				<title>NetBSD</title>
				<para>
					You need the 'tcl-expect' package.
				</para>
			</sect3>

			<sect3>
				<title>OpenIndiana 151a8</title>
				
				<para>
					You need the 'CSWexpect' package.
				</para>
			</sect3>			

			<sect3>
				<title>Solaris 10</title>
				
				<para>
					You need the 'CSWexpect' package.
				</para>
			</sect3>			
						
		</sect2>

<!-- Documentation -->
		<sect2>
			<title>Building the documentation</title>
						
			<para>
				The documentation including the man pages is written using
				DocBook 
				(<ulink url="http://www.docbook.org">http://www.docbook.org</ulink>).
			</para>
				
			<para>
				Developer documentation is generated with Doxygen
				(<ulink url="http://www.doxygen.org">http://www.doxygen.org</ulink>).		
			</para>
				
			<para>
				All documentation is built in the 'docs' subdirectory:

		        <programlisting language='shell'>
	cd docs
	make doc
			</programlisting>
			</para>
						
			<para>
				<emphasis role="bold">Note</emphasis>: The various tools are
				not able to produce the same results on all platforms. Your
				experience in the quality of the generated artifacts may vary.
				Generally, the newer the tools, the better.
			</para>
			
			<para>
				The validity of the XML of the documenation can be checked with:
		        <programlisting language='shell'>
	cd docs
	make check
			</programlisting>
			</para>
						
			<sect3>
				<title>RedHat/Centos/Scientific Linux and similar Linux distributions</title>
				
				<para>
					You need the 'libxslt', 'doxygen' and 'docbook-style-xsl' packages (from EPEL).
				</para>			
				
				<para>
					When generating PDFs you need the 'fop' package.
				</para>

				<para>
					When rebuilding the SVG images of the documentation you also need 'dia'.
				</para>
			</sect3>

			<sect3>
				<title>Fedora and similar Linux distributions</title>
				
				<para>
					You need the 'libxslt', 'doxygen' and 'docbook-style-xsl' packages.
				</para>				

				<para>
					When generating PDFs you need the 'fop' package.
				</para>

				<para>
					When rebuilding the SVG images of the documentation you also need 'dia'.
				</para>
			</sect3>

			<sect3>
				<title>Debian, Ubuntu and similar Linux distributions</title>
				
				<para>
					You need the 'xsltproc', 'doxygen' and 'docbook-xsl' packages.
				</para>				

				<para>
					When generating PDFs you need the 'fop' package.
				</para>

				<para>
					When rebuilding the SVG images of the documentation you also need 'dia'.
				</para>
				
				<para>
					For checking the validity of various XML files you need 'libxml2-utils' (for xmllint).
				</para>
			</sect3>

			<sect3>
				<title>openSUSE, SLES and similar Linux distributions</title>		

				<para>
					You need the 'libxslt', 'doxygen' and 'docbook-style-xsl' packages.
				</para>				

				<para>
					When generating PDFs you need the 'fop' package.
				</para>

				<para>
					When rebuilding the SVG images of the documentation you also need 'dia'.
				</para>				
			</sect3>

			<sect3>
				<title>ArchLinux</title>

				<para>
					You need the 'xsltproc', 'doxygen' and 'docbook-xsl' packages.
				</para>				

				<para>
					When generating PDFs you need the 'fop' package.
					Newest versions run only with the SVN version of
					'java-xmlgraphics-commons'. Install the package
					'java-xmlgraphics-commons-svn' from the AUR.
				</para>

				<para>
					When rebuilding the SVG images of the documentation you also need 'dia'.
				</para>
			</sect3>

			<sect3>
				<title>Slackware</title>
				
				<para>
					You need the 'libxslt' and 'doxygen' packages.
					Those packages part of the 'l', 'd' package series.
					DocBook you have to install on your own.
				</para>
				
				<para>
					When generating PDFs you have to install 'fop' on your own.
				</para>
				
				<para>
					When rebuilding the SVG images of the documentation you also need 'dia'
					which you will have to build on your own.
					Alternatively you can of course also build the 'dia'
					package with the help of SlackBuilds.
				</para>
				
			</sect3>
			<sect3>
				<title>FreeBSD</title>
				<para>
					We never tried to build the documentation on FreeBSD so far.
				</para>
			</sect3>

			<sect3>
				<title>NetBSD</title>
				<para>
					We never tried to build the documentation on NetBSD so far.
				</para>
			</sect3>
						
		</sect2>
		
<!-- TODO:
* RELEASE=1

Is this really necessary?

-->

<!-- Localization -->
<!-- TODO:

make init-po            create initial version of the gettext files
make merge-po           merge the gettext files after changes
make check-po           check sanity of gettext files
-->
		
<!-- Installation -->		
		<sect2>
			<title>Installation</title>
			
			<para>
				The makefiles provide a 'install' and an 'uninstall'
				target to install and uninstall the software.
			</para>
			
			<para>
				The 'DESTDIR' and 'prefix' parameters are useful for
				packagers to reroute the destination of the installation.
			</para>
			
			<para>
				For instance:
		        <programlisting language='shell'>
	make DESTDIR=/var/tmp prefix=/usr/local/wolframe-&WolframeVersion; install
			</programlisting>
				installs the software in:
		        <programlisting language='shell'>
	/var/tmp/usr/local/wolframe-&WolframeVersion;/sbin/wolframed
	/var/tmp/usr/local/wolframe-&WolframeVersion;/etc/wolframe/wolframe.conf
	...
			</programlisting>			
			
			</para>
			
			<para>
				The 'DEFAULT_MODULE_LOAD_DIR' parameter can be used
				by packagers to set the load directory for loadable
				modules. For instance a Redhat SPEC file will contain
				a line like:
		        <programlisting language='shell'>
	make DEFAULT_MODULE_LOAD_DIR=%{_libdir}/wolframe/modules
		        </programlisting>
		        </para>
		</sect2>

<!-- Dependencies -->
		<sect2>
			<title>Manual dependency generation</title>
			
			<para>
				Usually dependencies are automatically recomputed
				and stored in files with extension '.d'.
			</para>
			
			<para>
				On some platforms and with some older versions of
				GNU make you can run into problems, especially if
				you build the software in parallel. For this case
				you can force the computation of depencies in a 
				special make step as follows:

				<programlisting language='shell'>
	make depend
	make -j 4
				</programlisting>

		        </para>
			
		</sect2>
		
<!-- Dist -->
		<sect2>
			<title>Creating source tarballs</title>
			
			<para>
				<application>Wolframe</application> supports the
				standard targets 'dist', 'dist-Z', 'dist-gz' and
				'dist-bz2' to create a tarball containg all the
				necessary sources.
			</para>
		</sect2>

	</sect1>
