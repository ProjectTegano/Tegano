<!-- InstallationSource -->
<chapter>
	<title>Installation from source</title>
	<para>
		This section describes how to build the <application>Wolframe</application> application from
		the source code.
	</para>

	<sect1>
		<title>Source Releases</title>
		
		<para>
			Tarballs with release source code are available from
			SourceForce in the directories
		</para>
		
		<para>
			<ulink url="http://openbuildservice.org">http://sourceforge.net/projects/wolframe/files/wolframe/</ulink>
		</para>
		
		<para>
		</para>
		
		<para>			
			respectively
		</para>
		
		<para>			
			<ulink url="http://openbuildservice.org">http://sourceforge.net/projects/wolframe/files/wolfclient/</ulink>
			.
		</para>
		
		<para>
			The <filename>wolframe-&WolframeVersion;.tar.gz</filename> contains the <application>Wolframe</application>
			server, the modules and 3rdParty software needed to build the server.
		</para>

		<para>
			The <filename>wolfclient-&WolfclientVersion;.tar.gz</filename> contains the <application>Wolframe</application>
			client implementing the graphical user interface.
		</para>
	</sect1>

<!-- Unix -->
	<sect1>
		<title>Building on Unix systems</title>

		<para>
			For building Wolframe on Unix systems you need at least the
			following software:
		</para>
		
		<itemizedlist>
			<listitem>
				<para>A recent C/C++ compiler, the following ones are known to work:
				</para>
				
				<itemizedlist>
					<listitem>
						<para>gcc 4.1.x or newer, <ulink url="http://gcc.gnu.org">http://gcc.gnu.org</ulink></para>
					</listitem>
					<listitem>
						<para>clang 3.4 or newer, <ulink url="http://clang.llvm.org">http://clang.llvm.org</ulink></para>
					</listitem>
					<listitem>
						<para>Intel Compiler ICC 14.0 or newer, <ulink url="http://software.intel.com/en-us/c-compilers">http://software.intel.com/en-us/c-compilers</ulink></para>
					</listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				<para>GNU make 3.81 or newer (but preferably 3.82 or newer) from <ulink url="https://www.gnu.org/software/make/">https://www.gnu.org/software/make/</ulink></para>
			</listitem>
			<listitem>
				<para>boost 1.48.0 or newer from <ulink url="http://www.boost.org">http://www.boost.org</ulink></para>
			</listitem>
		</itemizedlist>
		
		<para>
			<application>Wolframe</application> is build and installed by simply calling:

		        <programlisting language='shell'>
	make
	make install
			</programlisting>
		</para>
		
		<para>
			The makefiles understand the standard GNU targets like clean', 'distclean', 'test', 'install',
			'uninstall', etc. Also the standard installation variables 'DESTDIR' and 'prefix' are understood.
			The whole list of options can be seen with:
			
		        <programlisting language='shell'>
	make help
			</programlisting>
		</para>

		<para>
			There is no configure. Porting to platforms and distributions
			is done in the makefiles. For most platforms we provide reasonable
			default values in <filename>makefiles/gmake/platform.mk</filename>.
		</para>

		<para>
			Optional features are enabled by using 'WITH_XXX' variables when
			calling make, e. g. to enable SSL support you call make like this:

		        <programlisting language='shell'>
	make WITH_SSL=1
			</programlisting>
		</para>

		<para>
			Additional variables can be set when 3rdParty software is not in
			the standard location, for instance:
			
		        <programlisting language='shell'>
	make BOOST_DIR=/usr/local/boost-1.55.0
			</programlisting>

		</para>
		
		<para>
			You can check how your software will be build with:

		        <programlisting language='shell'>
	make config
			</programlisting>
			
			If you get a 'NOT SUPPLIED ON THIS PLATFORM' you have to
			provide the variables explicitly as mentioned above in
			the example with 'BOOST_DIR'.
		</para>

<!-- compilers -->
		<sect2>
			<title>GCC compiler</title>
			
			<para>
				Compilation with GNU gcc is the default on all
				Unix platforms. It corresponds to the call:
		        <programlisting language='shell'>
	make CC=gcc CXX=g++
			</programlisting>								
			
			</para>
			
			<para>
				Per default all reasonable warnings are enabled.
				To add your own flags you can set 'CFLAGS' or
				'CXXFLAGS' respectively for instance to turn
				compiler warnings into fatal errors with:

		        <programlisting language='shell'>
	make CFLAGS='-Werror' CXXFLAGS='-Werror'
			</programlisting>	
			
				or

		        <programlisting language='shell'>
	make CFLAGS='-g -O0' CXXFLAGS='-g -O0'
			</programlisting>	
			
				to turn off optimization and to enable debug information.
			</para>
			<para>
				Certain embedded 3rdParty software may choose to
				have it's own flags for compilation, you can't override
				those in the make invocation.
			</para>
		</sect2>
		
		<sect2>
			<title>clang compiler</title>
			
			<para>
				Compilation with clang is possible, only set the
				correct compiler variables:
		        <programlisting language='shell'>
	make CC=clang CXX=clang++
			</programlisting>	
			
			</para>
			<para>							
			
				Also here you can set 'CFLAGS' and 'CXXFLAGS' at will.
			</para>
		</sect2>				

		<sect2>
			<title>Intel compiler</title>
			
			<para>
				Compilation with the Intel C compiler is done with:
		        <programlisting language='shell'>
	source /opt/intel/bin/iccvars.csh intel64 
	make CC=icc CXX=icpc
			</programlisting>	
			
			</para>							
			<para>
				(where '/opt/intel/bin/icc' is the location of the Intel
				compiler).
			</para>
			
			<para>
				Also here you can set 'CFLAGS' and 'CXXFLAGS' at will.
			</para>
			
			<para>
				When running the tests or any binaries you have to
				make sure that 'LD_LIBRARY_PATH' is set correctly
				(the example is for csh/tcsh, Intel 64-bit):
		        <programlisting language='shell'>
	setenv LD_LIBRARY_PATH $PROD_DIR/lib/intel64
			</programlisting>	
			</para>
		</sect2>

<!-- Boost -->
		<sect2>
			<title>Boost</title>
			
				<para>
					Boost (<ulink url="http://www.boost.or">http://www.boost.org</ulink>) is the only
					library which is absolutly required to build
					<application>Wolframe</application>.
				</para>
			
			<sect3>
				<title>Build your own version of Boost</title>
			
				<para>
					The following libraries are required for building
					<application>Wolframe</application>:

		        <programlisting language='shell'>
	./bootstrap.sh --prefix=/usr/local/boost-1.xx.y \
		--with-libraries=thread,filesystem,system,program_options,date_time
	./bjam install
			</programlisting>

				If you want to build the ICU normalization
				module you will have to build 'boost-locale'
				with ICU support and you have to enable the
				'regex' and the 'locale' boost libraries too:

		        <programlisting language='shell'>
	./bootstrap.sh --prefix=/usr/local/boost-1.xx.y \
		--with-libraries=thread,filesystem,system,program_options,date_time,regex,locale
	./bjam install
			</programlisting>

				The location of the Boost library can be set as follow:
				
		        <programlisting language='shell'>
	make BOOST_DIR=/usr/local/boost-1.48.0
			</programlisting>				

			</para>
			
			</sect3>

			<sect3>
				<title>RedHat, Fedora, CentOS, Scientific Linux and similar Linux distributions</title>

			<sect4>
				<title>RedHat/Centos/Scientific Linux 5 and similar Linux distributions</title>
				
				<para>
					The official Boost packages are not recent enough. Build your own
					Boost version here.
				</para>
			</sect4>

			<sect4>
				<title>RedHat 6</title>
				
				<para>
					The official Boost packages are not recent enough. Build your own
					Boost version here.
				</para>
				
				<para>
					On RHEL6 there is no licicu-devel on OSC currently (see
					<ulink url="http://permalink.gmane.org/gmane.linux.suse.opensuse.buildservice/17779">http://permalink.gmane.org/gmane.linux.suse.opensuse.buildservice/17779</ulink>).
					Get a Redhat developer license and build
					your own libicu library and build your own
					Boost library with boost-locale.
				</para>
			</sect4>
			
			<sect4>
				<title>Centos/Scientific Linux 6 and similar Linux distributions</title>
				
				<para>
					The official Boost packages are not recent enough. Build your own
					Boost version here.
				</para>
			</sect4>

			<sect4>
				<title>Fedora and similar Linux distributions</title>
				
				<para>
					You need the 'boost-devel' package.
				</para>
			</sect4>
			
			</sect3>
			
			<sect3>
				<title>Debian, Ubuntu and similar Linux distributions</title>
				
				<sect4>
					<title>Debian 6</title>
				
					<para>
						The official Boost packages are not recent enough. Build your own
						Boost version here.
					</para>
				</sect4>

				<sect4>
					<title>Debian 7</title>
					<para>
						You need the following packages:
						'libboost-dev', 'libboost-program-options-dev',
						'libboost-filesystem-dev', 'libboost-thread-dev',
						'libboost-random-dev', 'libboost-locale-dev'.
					</para>
				</sect4>

				<sect4>
					<title>Ubuntu 10.04.1 LTS, Ubuntu 12.04</title>
				
					<para>
						The official Boost packages are not recent enough. Build your own
						Boost version here.
					</para>
				</sect4>
				
				<sect4>
					<title>Ubuntu 12.10</title>

					<para>
						You need the following packages:
						'libboost-dev', 'libboost-program-options-dev',
						'libboost-filesystem-dev', 'libboost-thread-dev',
						'libboost-random-dev', 'libboost-locale-dev'.
					</para>
				</sect4>

				<sect4>
					<title>Ubuntu 13.04</title>
					<para>
						Currently libboost breaks in enable_if template, compile your own 
						Boost version here.						
					</para>
				</sect4>
				
				<sect4>
					<title>Ubuntu 13.10</title>
					<para>
						You need the following packages:
						'libboost-dev', 'libboost-program-options-dev',
						'libboost-filesystem-dev', 'libboost-thread-dev',
						'libboost-random-dev', 'libboost-locale-dev'.
					</para>
				</sect4>
			</sect3>

			<sect3>
				<title>openSUSE, SLES and similar Linux distributions</title>		

				<sect4>
					<title>OpenSuSE 12.3, 13.1</title>
					<para>
						You need the 'boost-devel' package.
					</para>
				</sect4>

				<sect4>
					<title>SLES 11 SP1 and SP2</title>
					<para>
						The official Boost packages are not recent enough. Build your own
						Boost version here.
					</para>
				</sect4>
			</sect3>

			<sect3>
				<title>ArchLinux</title>
				<para>
					You need the 'boost' and 'boost-libs' packages.
				</para>
			</sect3>

			<sect3>
				<title>Slackware</title>
				<para>
					You need the 'boost' package. This package is
					part of the 'l' package series.
				</para>
			</sect3>
			
		</sect2>
<!-- SSL -->
		<sect2>
			<title>Secure Socket Layer (SSL)</title>
			
			<para>
				The <application>Wolframe</application> protocol can
				be secured with SSL. You have to specify the following
				when building:

		        <programlisting language='shell'>
	make WITH_SSL=1
			</programlisting>				
			</para>
			
			<para>
				Currently only OpenSSL (<ulink url="http://www.openssl.org">http://www.openssl.org</ulink>)
				is supported. The location of the library can be overloaded with:
		        <programlisting language='shell'>
	make WITH_SSL=1 OPENSSL_DIR=/usr/local/openssl-1.0.1.f
			</programlisting>				
			</para>				
			
			<para>
				Use the most recent version of the OpenSSL library available
				for you platform.
			</para>

			<sect3>
				<title>RedHat, Fedora, CentOS, Scientific Linux and similar Linux distributions</title>
				
				<para>
					You need the 'openssl-devel' package.
				</para>
			</sect3>

			<sect3>
				<title>Debian, Ubuntu and similar Linux distributions</title>
				
				<para>
					You need the 'libssl-dev' package.
				</para>
			</sect3>

			<sect3>
				<title>openSUSE, SLES and similar Linux distributions</title>		
				<para>
					You need the 'openssl-devel' package.
				</para>
			</sect3>

			<sect3>
				<title>ArchLinux</title>
				<para>
					You need the 'openssl' package.
				</para>
			</sect3>

			<sect3>
				<title>Slackware</title>
				<para>
					You need the 'openssl' package. This package is
					part of the 'n' package series.
				</para>
			</sect3>

			
		</sect2>

<!-- Sqlite3 -->		
		<sect2>
			<title>SQLite database support</title>
			
			<para>
				<application>Wolframe</application> can use
				an Sqlite3 database (<ulink url="http://sqlite.org">http://sqlite.org</ulink>)
				as backend for data storage and for authentication and
				autorization.
			</para>
			
			<para>
				You enable the building of a loadable Sqlite3 database
				module with

		        <programlisting language='shell'>
	make WITH_SYSTEM_SQLITE3=1
			</programlisting>
							
			</para>
			
			<para>
				If you don't have a recent Sqlite version on your
				system you can also build the module against the
				embedded version:

		        <programlisting language='shell'>
	make WITH_LOCAL_SQLITE3=1
			</programlisting>				
			
			</para>

			<para>
				The location of the Sqlite library can be overloaded with:
		        <programlisting language='shell'>
	make WITH_SYSTEM_SQLITE3=1 SQLITE3_DIR=/usr/local/sqlite-3.4.3
			</programlisting>				
			</para>
			
			<para>
				You can also override all compilation and linking flags
				of Sqlite separatly:
		        <programlisting language='shell'>
	make WITH_SYSTEM_SQLITE3=1 \
		SQLITE3_INCLUDE_DIR=/usr/local/sqlite-3.4.3/include \
		SQLITE3_LIB_DIR= /usr/local/sqlite-3.4.3/lib \
		SQLITE3_LIBS=-lsqlite3
			</programlisting>				
			</para>
			
			<para>
				When building with 'WITH_SYSTEM_SQLITE3' it is enough to install the
				correct development library.
			</para>
				
			<sect3>
				<title>RedHat/Centos/Scientific Linux 5 and similar Linux distributions</title>
				
				<para>
					The official Sqlite package is too old, use the
					embedded version of Sqlite with 'WITH_SYSTEM_SQLITE3=1'.
				</para>
			</sect3>

			<sect3>
				<title>RedHat/Centos/Scientific Linux 6, Fedora and similar Linux distributions</title>
				
				<para>
					You need the 'sqlite-devel' package.
				</para>
			</sect3>
			
			<sect3>
				<title>Debian, Ubuntu and similar Linux distributions</title>
				
				<para>
					You need the 'libsqlite3-dev' package.
				</para>
				
				<para>
					For running the Sqlite3 database tests you also 
					need the 'sqlite3' package.
				</para>
			</sect3>

			<sect3>
				<title>openSUSE, SLES and similar Linux distributions</title>		
				<para>
					You need the 'sqlite3-devel' package.
				</para>

				<para>
					For running the Sqlite3 database tests you also 
					need the 'sqlite3' package.
				</para>
			</sect3>

			<sect3>
				<title>ArchLinux</title>
				<para>
					You need the 'sqlite' package.
				</para>
			</sect3>

			<sect3>
				<title>Slackware</title>
				<para>
					You need the 'sqlite' package. This package is
					part of the 'ap' package series.
				</para>
			</sect3>
						
		</sect2>

<!-- PostgreSQL -->
		<sect2>
			<title>PostgreSQL database support</title>
			
			<para>
				<application>Wolframe</application> can use
				a PostgreSQL database (<ulink url="http://postgresql.org">http://postgresql.org</ulink>)
				as backend for data storage and for authentication and
				autorization.
			</para>
			
			<para>
				You enable the building of a loadable PostgreSQL database
				module with

		        <programlisting language='shell'>
	make WITH_PGSQL=1
			</programlisting>
							
			</para>

			<para>
				The location of the PostgreSQL library can be overloaded with:
		        <programlisting language='shell'>
	make WITH_PGSQL=1 PGSQL_DIR=/usr/local/postgresql-9.1.3
			</programlisting>				
			</para>
			
			<para>
				You can also override all compilation and linking flags
				of PostgreSQL separatly:
		        <programlisting language='shell'>
	make WITH_PGSQL=1 \
		PGSQL_INCLUDE_DIR=/usr/local/postgresql-9.1.3/include \
		PGSQL_LIB_DIR=/usr/local/postgresql-9.1.3/lib \
		PGSQL_LIBS=-lpq
			</programlisting>				
			</para>
							
			<sect3>
				<title>RedHat, Fedora, CentOS, Scientific Linux and similar Linux distributions</title>
				
				<para>
					You need the 'postgresql-devel' package.
				</para>
				
				<para>
					For Centos/RHEL/SciLi 5 you can choose between the
					'postgresql-devel'package (which is version 8.1)
					or the 'postgresql84-devel' package. The 8.4
					version is recommended over 8.1.
				</para>
				
				<para>
					For running the Postgresql tests you need a fully function 'postgresql-server'
					with a db user 'wolfusr' (password: 'wolfpwd') owning a database called
					'wolframe'.
				</para>
				
				<para>
					Setting up a test user in PostgreSQL is done with:
					<programlisting language='shell'>
	postgresql-setup initdb
	systemctl start postgresql.service
	systemctl enable postgresql.service
					</programlisting>
					
					change the authentication method from 'ident' to 'md5' in
					<filename>pg_hba.conf</filename>.
				</para>
			</sect3>
			
			<sect3>
				<title>Debian, Ubuntu and similar Linux distributions</title>
				
				<para>
					You need the 'libpq-dev' package.
				</para>
				
				<para>
					For running the PostgreSQL database tests you also
					need the 'postgresql-client' package.
				</para>
			</sect3>

			<sect3>
				<title>openSUSE, SLES and similar Linux distributions</title>		
				<para>
					You need the 'postgresql-devel' package.
				</para>
			</sect3>

			<sect3>
				<title>ArchLinux</title>
				<para>
					You need the 'postgresql' package.
				</para>
			</sect3>

			<sect3>
				<title>Slackware</title>
				<para>
					A PostgreSQL package is not available on Slackware,
					build your own one with:
					<programlisting language='shell'>
	./configure --prefix=/usr/local/pgsql
	make
	make install
	groupadd -g 990 postgres
	useradd -g postgres -u 990 postgres
	mkdir /usr/local/pgsql/var
	chown -R postgres:users /usr/local/pgsql/var
	su postgres
	/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/var
	exit
	cat > /etc/rc.d/rc.postgresql
	#!/bin/sh

	case "$1" in
		start)
			su -l postgres -s /bin/sh -c "/usr/local/pgsql/bin/pg_ctl  -D /usr/local/pgsql/var -p /usr/local/pgsql/bin/postmaster start  > /dev/null 2>&amp;1" &lt; /dev/null
			;;
		stop)
			kill `ps -efa | grep postmaster | grep -v grep | awk '{print $2}'`
			;;
		*)
			echo $"Usage: $0 {start|stop}"
			exit 1
	esac

	exit 0
	(ctrl-D)
	chmod 0775 /etc/rc.d/rc.postgresql 
	usermod -d /usr/local/pgsql postgres
					</programlisting>
				</para>
				
				<para>
					Compile <application>Wolframe</application> now with:
					<programlisting language='shell'>
	make WITH_PGSQL=1 \
		PGSQL_DIR=/usr/local/pgsql
					</programlisting>
					
				</para>
				
				<para>
					Alternatively you can of course also build the PostgreSQL
					package with the help of SlackBuilds.
				</para>
			</sect3>
						
		</sect2>

<!-- Oracle -->
		<sect2>
			<title>Oracle database support</title>
			
			<para>
				<application>Wolframe</application> can use
				a Oracle database (<ulink url="http://www.oracle.com">http://www.oracle.com</ulink>)
				as backend for data storage and for authentication and
				autorization.
			</para>
			
			<para>
				<emphasis role="bold">Import note</emphasis>: Make sure you
				have all the licenses to develop with Oracle and to install an
				Oracle database! The <application>Wolframe</application> team
				doesn't take any responsability if licenses are violated!
			</para>
			
			<para>
				You enable the building of a loadable Oracle database
				module with

		        <programlisting language='shell'>
	make WITH_ORACLE=1
			</programlisting>
							
			</para>

			<para>
				The location of the Oracle instantclient library can be overloaded with:
		        <programlisting language='shell'>
	make WITH_ORACLE=1 ORACLE_DIR=/opt/oracle/instantclient_11_2
			</programlisting>				
			</para>
			
			<para>
				You can also override all compilation and linking flags
				of Oracle separatly:
		        <programlisting language='shell'>
	make WITH_ORACLE=1 \
		ORACLE_INCLUDE_DIR=/usr/lib/oracle/11_2/client64 \
		ORACLE_LIB_DIR=/usr/lib/oracle/11_2/client64 \
		ORACLE_LIBS=-lclntsh
			</programlisting>				
			</para>

			<para>
				If you want to run the tests for Oracle you'll have to set up an Oracle
				database. Then install the 'wolframe' database and the 'wolfusr' database
				user. Sql example files can be found in
				<filename>contrib/database/oracle</filename>.
			</para>
							
			<sect3>
				<title>RedHat, Fedora, CentOS, Scientific Linux and similar Linux distributions</title>
				
				<para>
					For building the Oracle database module you have to download the RPM packages
					<filename>oracle-instantclient12.1-basic-12.1.0.1.0-1.i386.rpm</filename> and
					<filename>oracle-instantclient12.1-devel-12.1.0.1.0-1.i386.rpm</filename>.
					You can of course also install the zipfiles and install those.
				</para>

				<para>
					From the system repositories you'll need the 'libaio' package.
				</para>
				
				<para>
					If you want to use the 'sqlplus' command line tool for manual testing you also
					have to install the package
					<filename>oracle-instantclient12.1-sqlplus-12.1.0.1.0-1.i386.rpm</filename>.
					If you want a history in sqlplus it's highly recommended that you install
					a command line history wrapper like for instance 'rlwrap'.
				</para>
								
			</sect3>
			
			<sect3>
				<title>Debian, Ubuntu and similar Linux distributions</title>

				<para>
					For building the Oracle database module you have to download the RPM packages
					<filename>oracle-instantclient12.1-basic-12.1.0.1.0-1.i386.rpm</filename> and
					<filename>oracle-instantclient12.1-devel-12.1.0.1.0-1.i386.rpm</filename>.
				</para>
				
				<para>
					To install those RPM files you'll need the 'alien' tool. You can of course
					also install the zipfiles and install those.
				</para>

				<para>
					From the system repositories you'll need the 'libaio1' package.
				</para>
				
				<para>
					If you want to use the 'sqlplus' command line tool for manual testing you also
					have to install the package
					<filename>oracle-instantclient12.1-sqlplus-12.1.0.1.0-1.i386.rpm</filename>.
					If you want a history in sqlplus it's highly recommended that you install
					a command line history wrapper like for instance 'rlwrap'.
				</para>								
			</sect3>

			<sect3>
				<title>openSUSE, SLES and similar Linux distributions</title>		

				<para>
					For building the Oracle database module you have to download the RPM packages
					<filename>oracle-instantclient12.1-basic-12.1.0.1.0-1.i386.rpm</filename> and
					<filename>oracle-instantclient12.1-devel-12.1.0.1.0-1.i386.rpm</filename>.
					You can of course also install the zipfiles and install those.
				</para>

				<para>
					From the system repositories you'll need the 'libaio1' package.
				</para>
				
				<para>
					If you want to use the 'sqlplus' command line tool for manual testing you also
					have to install the package
					<filename>oracle-instantclient12.1-sqlplus-12.1.0.1.0-1.i386.rpm</filename>.
					If you want a history in sqlplus it's highly recommended that you install
					a command line history wrapper like for instance 'rlwrap'.
				</para>
			</sect3>

			<sect3>
				<title>ArchLinux</title>
				<para>
					You need the two packages 'oracle-instantclient-basic'
					and 'oracle-instantclient-sdk'.
				</para>

				<para>
					Have a look at <ulink url="https://wiki.archlinux.org/index.php/Oracle_client">https://wiki.archlinux.org/index.php/Oracle_client</ulink>
					on how to install the Oracle packages. Basically you have two
					options: either you use the 'oracle' pacman repository or you
					download the Oracle packages by hand and run the build scripts
					from AUR.
				</para>
				
				<para>
					If you want to use the 'sqlplus' command line tool for manual testing you also
					have to install the package 'oracle-instantclient-sqlplus'.
					If you want a history in sqlplus it's highly recommended that you install
					a command line history wrapper like for instance 'rlwrap'.
				</para>
				
			</sect3>

			<sect3>
				<title>Slackware</title>
				<para>
					Simply download the zipfiles and install them to a directory,
					let's say '/opt/oracle/instantclient_12_1':
					<programlisting language='shell'>
	mkdir -p /opt/oracle
	cd /opt/oracle
	unzip instantclient-basic-linux.x64-12.1.0.1.0.zip
	unzip instantclient-sdk-linux.x64-12.1.0.1.0.zip
					</programlisting>
				</para>
				
				<para>
					Add the following line to <filename>/etc/ld.so.conf</filename> and
					reload the cached shared libraries:
					<programlisting language='shell'>
	echo "/opt/oracle/instantclient_12_1" >> /etc/ld.so.conf
	ldconfig
					</programlisting>				
				</para>
				
				<para>
					Call 'make' with:
					<programlisting language='shell'>
	make WITH_ORACLE=1 ORACLE_DIR=/opt/oracle/instantclient_12_1
					</programlisting>
				</para>				
			</sect3>
						
		</sect2>

<!-- libxml2/libxslt -->
		<sect2>
			<title>Filtering support with libxml2 and libxslt</title>
			
			<para>
				<application>Wolframe</application> can use
				libxml2 and libxslt (<ulink url="http://xmlsoft.org/">http://xmlsoft.org/</ulink>)
				for filtering and the conversion of data.
			</para>
			
			<para>
				You can build only filtering with libxml2. But if you enable libxslt
				filtering you also have to enable libxml2 filtering.
			</para>
			
			<para>
				You enable the building of a loadable libxml2/libxslt filtering
				module with

		        <programlisting language='shell'>
	make WITH_LIBXML2=1 WITH_LIBXSLT=1
			</programlisting>
							
			</para>
			
			<para>
				The location of those two libraries can be overloaded with:
		        <programlisting language='shell'>
	make WITH_LIBXML2=1 WITH_LIBXSLT=1 \
		LIBXML2_DIR=/usr/local/libxml2-2.9.1 \
		LIBXSLT_DIR=/usr/local/libxslt-1.1.28
			</programlisting>				
			</para>
			
			<para>
				You can also override all compilation and linking flags
				of libxml2 and libxslt separatly:
		        <programlisting language='shell'>
	make WITH_LIBXML2=1 WITH_LIBXSLT=1 \
		LIBXML2_INCLUDE_DIR=/usr/local/libxml2-2.9.1/include \
		LIBXML2_LIB_DIR=/usr/local/libxml2-2.9.1/lib \
		LIBXML2_LIBS=-lxml2 \
		LIBXSLT_INCLUDE_DIR=/usr/local/libxslt-1.1.28/include \
		LIBXSLT_LIB_DIR=/usr/local/libxslt-1.1.28/lib \
		LIBXSLT_LIBS=-lxslt
			</programlisting>				
			</para>
							
			<sect3>
				<title>RedHat/Centos/Scientific Linux 5 and similar Linux distributions</title>
				
				<para>
					The official libxml2 and libxslt package is too old, compile
					your own versions. Make sure your own libxslt version uses
					the libxml2 version you compiled and not the system one!
				</para>
				
				<para>
					If you don't need working iconv support for non-UTF8 character
					sets you may also try to use the provided packages 
					'libxml2-devel' and 'libxslt-devel' but we cannot recommend this.
				</para>
			</sect3>

			<sect3>
				<title>RedHat/Centos/Scientific Linux 6, Fedora and similar Linux distributions</title>
				
				<para>
					You need the 'libxml2-devel' and 'libxslt-devel' packages.
				</para>
			</sect3>
			
			<sect3>
				<title>Debian, Ubuntu and similar Linux distributions</title>
				
				<para>
					You need the 'libxml2-dev' and 'libxslt1-dev ' packages.
				</para>				
			</sect3>

			<sect3>
				<title>openSUSE, SLES and similar Linux distributions</title>		
				<para>
					You need the 'libxml2-devel' and 'libxslt-devel' packages.
				</para>
			</sect3>

			<sect3>
				<title>ArchLinux</title>
				<para>
					You need the 'libxml2' and 'libxslt' packages.
				</para>
			</sect3>

			<sect3>
				<title>Slackware</title>
				<para>
					You need the 'libxml2' and the 'libxslt' packages. Both packages are
					part of the 'l' package series.
				</para>
			</sect3>
						
		</sect2>

		
<!--
Prerequisites

* optionally (WITH_CJSON): build JSON filtering module
  implemented with cjson

* optionally (WITH_LUA) lua 5.2
  (integrated in subdir 'lua')
* optionally (WITH_PYTHON): build Python 3 module for
  scripting Wolframe in Python

* optionally (WITH_ICU): ICU 3.6 or later,
  needed for boost*locale with ICU backend

* optionally (WITH_SYSTEM_LIBHPDF): for PDF creation
  using the system version of libhpdf, specify
  WITH_LOCAL_LIBHPDF=1 to use the supplied version in
  the 'libhpdf' subdirectory. In this case also 
  'zlib' and 'libpng' development libraries are needed
* optionally (WITH_SYSTEM_FREEIMAGE): for image handling
  using the system version of FreeImage, specify
  WITH_LOCAL_FREEIMAGE=1 to use the supplied version in
  the 'freeimage' subdirectory.

* for optional authentication mechanisms:
  * optionally (WITH_PAM)
  * optionally (WITH_SASL)

* optionally for testing:
  * optionally (WITH_EXPECT) expect and Tcl 8.4 or later

* optionally (for building the documentation):
  * xsltproc, docboox*xsl*stylesheet: for docbook
  * fop: to produce a nice PDF documentation
  * doxygen: for documentation for programmers
  * dia: to convert images to svg

-->

<!-- Installation -->		
		<sect2>
			<title>Installation</title>
			
			<para>
				The makefiles provide a 'install' and an 'uninstall'
				target to install and uninstall the software.
			</para>
			
			<para>
				The 'DESTDIR' and 'prefix' parameters are useful for
				packagers to reroute the destination of the installation.
			</para>
			
			<para>
				For instance:
		        <programlisting language='shell'>
	make DESTDIR=/var/tmp prefix=/usr/local/wolframe-&WolframeVersion; install
			</programlisting>
				installs the software in:
		        <programlisting language='shell'>
	/var/tmp/usr/local/wolframe-&WolframeVersion;/sbin/wolframed
	/var/tmp/usr/local/wolframe-&WolframeVersion;/etc/wolframe/wolframe.conf
	...
			</programlisting>			
			
			</para>
		</sect2>

	</sect1>

	<sect1>
		<title>Building on Windows systems</title>
		
		<para>
		</para>
	</sect1>
</chapter>
