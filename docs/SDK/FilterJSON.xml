<sect1>
<title>JSON Filter</title>
	<sect2>
	<title>Introduction</title>
	<para>You can use <code>JSON</code> for data filters in the logic tier of <code>Wolframe</code>.
	The standard <code>JSON</code> filter of <code>Wolframe</code> is called <code>cjson</code> and 
	based on the library <code>cJSON</code> (<link>http://sourceforge.net/projects/cjson</link>) from Dave Gamble.
	</para>
	</sect2>
	
	<sect2>
	<title>Character Set Encodings</title>
	<para>Without explicitely specified, the <code>cjson</code> filter support the following character set 
	encodings. For character set encodings that are not in the list, please ask the <code>Wolframe</code> team.
	<itemizedlist>
	<listitem><para><code>UTF-8</code> or</para></listitem>
	<listitem><para><code>UTF-16LE</code> or</para></listitem>
	<listitem><para><code>UTF-16</code> (<code>UTF-16BE</code>) or</para></listitem>
	<listitem><para><code>UTF-32LE</code> (<code>UCS-4LE</code>) or</para></listitem>
	<listitem><para><code>UTF-32</code> (<code>UTF-32BE</code> or <code>UCS-4BE</code>) or</para></listitem>
	</itemizedlist>
	</para>
	</sect2>

	<sect2>
	<title>Configuration</title>
	<para>For using the JSON filter based <code>cJSON</code>, you have to load the module 'mod_filter_cjson'. 
	For this you add the following line to the LoadModules section of your <code>Wolframe</code> configuration:
		<programlisting language='text'>
		<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/SDKTutorial/cfg_filter_JSON.conf" parse="text" />
		</programlisting>
	</para>
	</sect2>
</sect1>

