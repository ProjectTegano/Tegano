<glossary>
	<title>Glossary</title>
	<para>
		This is the glossary for the Wolframe Service Development Kit. Although it
		covers most of the terms used in the Wolframe world, some terms might be skipped
		if they are rarely used in the SDK context. These terms are explained in the
		Application Building Manual
	</para>

<glossdiv><title>External glossary</title>

	<glossentry id="DDL"><glossterm>Data Definition Language</glossterm>
		<acronym>DDL</acronym>
		<glossdef>
			<para>A domain specific language for describing data structures</para>
		</glossdef>
	</glossentry>

</glossdiv>

<glossdiv><title>Wolframe glossary</title>

	<glossentry><glossterm>Connection Handler</glossterm>
		<glossdef>
			<para>Interface for the networking to one client/server connection during its whole lifetime.
			</para>
		</glossdef>
	</glossentry>
	<glossentry><glossterm>Command Handler</glossterm>
		<glossdef>
			<para>Interface for delegating processing of client protocol commands in a hierarchical way. A command handler is created by a connection handler or another command handler. During command execution the input/output of the connection is entirely handled by the command handler. Command Handlers are used to build the communication protocol processing as hierarchical state machine.
			</para>
		</glossdef>
	</glossentry>
	<glossentry><glossterm>Network Input</glossterm>
		<glossdef>
			<para>Data passed from the networking framework to the connection handler through its channel for processing.
			</para>
		</glossdef>
	</glossentry>
	<glossentry><glossterm>Network Output</glossterm>
		<glossdef>
			<para>Data passed back through the channel to the networking framework from the connection handler as output of processing.
			</para>
		</glossdef>
	</glossentry>
	<glossentry><glossterm>Program</glossterm>
		<glossdef>
			<para>A set of named units of description of processing or data in a source file. The source file is loaded and interpreted at server startup. It exports some unique symbols to address single units in a program library. All units in this library are usable in any context of the logic tier.
			</para>
		</glossdef>
	</glossentry>
	<glossentry><glossterm>Transaction</glossterm>
		<glossdef>
			<para>A transaction is a call of a database defined in a transaction program. A transaction either fails completely or succeeds as whole. Auditing is seen as part of the transaction. Transactions have an object as input and return an object or an error as result.
				Authorization tags that are checked against the user privileges of the connection can be attached to transactions.
			</para>
		</glossdef>
	</glossentry>
	<glossentry><glossterm>Processor program</glossterm>
		<glossdef>
			<para>A program that is executed by a command handler. It works with data input, data output and transaction execution as the only interfaces to the system. Exceptions, signals and events are handled by the processor in the background without showing them to the program. A program in this context is sequential.
			</para>
		</glossdef>
	</glossentry>
	<glossentry><glossterm>Lua</glossterm>
		<glossdef>
			<para>Lua (www.lua.org) is a scripting language. It is used in Wolframe as one language for writing programs. It distinguishes itself by being lightweight. It has to be lightweight because the language context has to be recreated with every start of a clients command execution for security reasons.
			</para>
		</glossdef>
	</glossentry>
	<glossentry><glossterm>Filter</glossterm>
		<glossdef>
			<para>Filters are attached to network input and output to read and write input in a well defined format. Filters let you process input and print output in an iterative way. Filters are loaded by the system at startup and have a unique name.
			</para>
		</glossdef>
	</glossentry>
	<glossentry><glossterm>Form</glossterm>
		<glossdef>
			<para>A form is a hierarchical description of typed data. Forms are used to create objects from a serialization and to validate input. Forms are defined in programs written in a DDL (Data Definition Language) or as declared as part of a build-in function API.
			</para>
		</glossdef>
	</glossentry>
	<glossentry><glossterm>Direct Map</glossterm>
		<glossdef>
			<para>A direct map is a program described by a form for the input, a form for the output, and a transaction function. The input of a direct map transaction function is the object deserialization of the input xml defined by the input form. The result of the transaction function is returned as xml serialization of the transaction result defined by the output form. It is called direct map because no scripting is involved in this case.
			</para>
		</glossdef>
	</glossentry>

	<glossentry><glossterm>Channel</glossterm>
		<glossdef>
			<para>The flow for a single connection. Not all objects have channels (e.g. databases).
			</para>
		</glossdef>
	</glossentry>
	<glossentry><glossterm>Group</glossterm>
		<glossdef>
			<para>A set of objects of the same type seen as one single object for the objects that use it.
			</para>
		</glossdef>
	</glossentry>
	<glossentry><glossterm>Unit</glossterm>
		<glossdef>
			<para>An element of a group. A group is a set of units.
			</para>
		</glossdef>
	</glossentry>
	<glossentry><glossterm>Provider</glossterm>
		<glossdef>
			<para>An entity providing objects of a kind. Some providers are factories, but not all of them (e.g. the database provider)
			</para>
		</glossdef>
	</glossentry>
	<glossentry id="EoD"><glossterm>End Of Data (EoD)</glossterm>
		<abbrev>EoD</abbrev>
		<glossdef>
			<para>Marks the end of the data to be processed by a processor. End of data is marked with CR LF dot ('.') CR LF or LF dot LF. For passing lines with a dot ('.') at the start of a content line, the client has to escape an LF dot in the content with LF dot dot. This escaping applies also to the result returned to the client. So client has to unescape LF dot sequences by replacing them by a LF.
			</para>
		</glossdef>
	</glossentry>
	<glossentry id="EoM"><glossterm>End Of Message (EoM)</glossterm>
		<abbrev>EoM</abbrev>
		<glossdef>
			<para>Marks the end of a network input message. End of message is handled by the processor without showing up to the processor program (yield execution).
			</para>
		</glossdef>
	</glossentry>
	<glossentry><glossterm>Application Reference Path</glossterm>
		<glossdef>
			<para>The application server defines this file path where all relative paths defined in the configuration refer to.
			</para>
		</glossdef>
	</glossentry>
	<glossentry><glossterm>Yield execution</glossterm>
		<glossdef>
			<para>The processor yields execution and gives control back to the connection handler, when it cannot continue execution. The connection handler has to resume with an action returned to the networking framework, that fetches the resources needed by the processor to continue. (see also [http://en.wikipedia.org/wiki/Coroutine Wikipedia yield in coroutine]). Lua is able to yield execution.
			</para>
		</glossdef>
	</glossentry>
</glossdiv>
</glossary>

