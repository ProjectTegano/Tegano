<!-- Tutorial -->
<sect1>
<title>Defining Forms</title>
	<sect2>
	<title>Introduction</title>
	<para>Forms can be defined in a module as native C++ structure. In this shape they are used in APIs
		for built-in functions implemented in modules.
	</para>
	<para>
		Forms can also be defined in a DDL (Data Definition Language).
		It depends very much on the application what DDL is best to use.
		Users may already have their data definitions in a certain way defined.
		The form DDL can be defined in the way you want. Wolframe offers a
		pluggin mechanism for DLL compilers and provides examples of such compilers.
		You configure the DDL sources to load and the compiler to use.
	</para>
	<para>
		With the DDL form description we get a deserialization of content
		to a structure and a serialization for output. We get also a validation
		and normalization procedure of content by assigning types to atomic form
		elements that validate and normalize the data elements.
		Most of the business transactions should be doable as input form
		description, output form description and a transaction that maps
		input to output without control flow aware programming (direct map).
	</para>
	<para>
		All types of data forms introduced here are equivalent in use for the programs.
	</para>
	</sect2>
	<sect2>
	<title>Define Forms in Simple Form DDL</title>
	<para>
		As example of a form DDL we provide the "Simple Form DDL" as example. The format is based on the "INFO"-format
		introduced by Marcin Kalicinski for the boost property tree library. We used this library to show an example
		that is easy to understand and small enough.
		The format uses key value pairs separated with spaces for atomic elements and curly brackets '{' '}' to describe structures.
		The key is the name of the element and the following value is the assembles the attributes of this element.
		The attributes are a data type and some operators that describe additional properties.
	</para>
	<para>
		Each form declaration starts with a keyword 'FORM' or 'STRUCT'. The difference between 'FORM' and 'STRUCT' is that the later is used for declaration that are only referenced inside the same file as sub structure reference,
		while 'FORM' declares a structure to be exported as global form declaration.
		After this header follows the structure declaration inside curly brackets '{' '}'.
	</para>
	<para>
		There is only one predefined data type known in Simple Form DDL: "string".
		All other data types are defined as sequence of 'normalizer' functions in a normalize definition file.
		The 'normalizer' functions assigned to a type validate the value and transform it to its normalized form.
	</para>
	<para>
		The following element attributes are known in Simple Form DDL
		<simplelist type="horiz" columns="3">
		<member>@</member><member>prefix of data type</member><member>Expresses that the element is an attribute and not a content element of the structure. This has only influence on the XML or similar representation of the form content</member>
		<member>?</member><member>prefix of data type</member><member>Expresses that the element is optional also in strict validation</member>
		<member>!</member><member>prefix of data type</member><member>Expresses that the element is always mandatory (also in non strict validation)</member>
		<member>[]</member><member>postfix of data type</member><member>Expresses that the element is an array of this type</member>
		<member>[]</member><member>without data type</member><member>Expresses this element is an array of structures and that the structure defined describes the prototype (initialization) element of the array.</member>
		<member>(..)</member><member>postfix of data type</member><member>Expresses that '..' (represents any valid value not containing brackets) is the default initialization value of this element.</member>
		</simplelist>
	</para>
	<para>
		The following example shows a form defined in simple form DDL.
		<programlisting language='text'>
		<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/tutorial/customers.simpleform" parse="text" />
		</programlisting>
	</para>
	</sect2>
	<sect2>
	<title>Define Forms in C++ as module function API</title>
	<para>For defining forms in C++ you have to define the structure and its serialization description.
		The serialization description is a static function <code>getStructDescription</code> without arguments returning a const structure that describes what element names to bind on what structure elements.
	</para>
	<para>
		The following example shows a form defined in C++.
		<sect3>
		<para>Header file "customers.hpp": Declare the structure and the serialization description of the structure.
		Structures may contain structures with ther own serialization description.</para>
		<programlisting language='text'>
		<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/tutorial/customers.hpp" parse="text" />
		</programlisting>
		</sect3>
		<sect3>
		<para>Source file "customers.cpp". Declare 'ID' as attribute and name, canonical_Name, country, locality as tags. The '--' operator marks the end of attributes section and the start of content section.</para>
		<programlisting language='text'>
		<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/tutorial/customers.cpp" parse="text" />
		</programlisting>
		</sect3>
	</para>
	</sect2>
	<para></para>
</sect1>

