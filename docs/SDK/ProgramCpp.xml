<sect1>
<title>Functions in C++</title>
	<sect2>
		<title>Introduction</title>
		<para>You can write functions for the logic tier of <application>Wolframe</application> with <application>C++</application>. 
		Because <application>C++</application> is supported by <application>Wolframe</application> only as a compiled and not as 
		an interpreted language, you have to build a module out of your function implementation.
		</para>
	</sect2>
	<sect2>
	<title>Declaring Functions</title>
	<para>
		...
	</para>
	</sect2>

	<sect2>
	<title>Input/Output Data Structures</title>
	<para>For defining input and output parameter structures in <application>C++</application> you have to define the 
		structure and its serialization description. The serialization description is a static 
		function <code>getStructDescription</code> without arguments returning a const structure that describes 
		what element names to bind on what structure elements.
	</para>
	<para>
		The following example shows a form function parameter structure defined in C++.
		<sect3>
		<para>Header file "customers.hpp": Declare the structure and the serialization description of the structure.
		Structures may contain structures with their own serialization description.</para>
		<programlisting language='text'>
		<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/SDKTutorial/customers.hpp" parse="text" />
		</programlisting>
		</sect3>
		<sect3>
		<para>Source file "customers.cpp". Declare 'ID' as attribute and name, canonical_Name, country, locality as tags. The '--' operator marks the end of attributes section and the start of content section.</para>
		<programlisting language='text'>
		<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/SDKTutorial/customers.cpp" parse="text" />
		</programlisting>
		</sect3>
	</para>
	</sect2>
	<para></para>
</sect1>

