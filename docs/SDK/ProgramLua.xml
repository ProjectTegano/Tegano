<sect1>
<title>Functions in Lua</title>
	<sect2>
	<title>Introduction</title>
	<para>You can write functions for the logic tier of <application>Wolframe</application> with <application>Lua</application>. <application>Lua</application> is a scripting language designed, implemented, and maintained
		at PUC-Rio in Brazil by Roberto Ierusalimschy, Waldemar Celes and Luiz Henrique de Figueiredo
		(see http://www.lua.org/authors.html). A description of <application>Lua</application> is not provided here.
		For an introduction into programming with <application>Lua</application> see http://www.lua.org. The official manual also available as book
		is very good. <application>Wolframe</application> introduces some <application>Lua</application> interfaces to access input and output and to execute functions.
		The <application>Lua</application> application layer doesn't have to deal with protocol or encryption issues.
	</para>
	</sect2>
	<sect2>
	<title>Declaring Functions</title>
	<para>For <application>Lua</application> you do not have to declare anything besides the <application>Lua</application> script. If you configure a <application>Lua</application>
		script as program, all global functions declared in this script are declared as form
		functions in <application>Wolframe</application>. For avoiding name conflicts you should declare private functions
		of the script as <code>local</code>.
	</para>
	</sect2>
	<sect2>
	<title>Wolframe Provider Library</title>
	<para><application>Wolframe</application> lets you access objects of the global context through
		a library called <code>provider</code> offering the following functions:

		<simplelist type="horiz" columns="3">
		<member>Name</member><member>Parameter</member><member>Returns</member>
		<member>form</member><member>name of the form</member><member>an instance of a form</member>
		<member>normalizer</member><member>name of the normalize function</member><member>normalize function defined in a <application>Wolframe</application> normalizer program</member>
		<member>formfunction</member><member>name of the function</member><member>form function defined in a <application>Wolframe</application> program or module</member>
		</simplelist>
	</para>
	</sect2>
	<sect2>
	<title>Wolframe Global Objects</title>
	<para>Besides the provider library <application>Wolframe</application> defines the followin objects global in the script execution context:
		<simplelist type="horiz" columns="2">
		<member>Name</member><member>Description</member>
		<member>transaction</member><member>transaction context if not relying on the auto-commit of a transaction function</member>
		<member>scope</member><member>function with an iterator as argument returning an iterator for iterating on the currently visited node and its children taking ownership on this sub iterator scope</member>
		<member>logger</member><member>object with methods for logging or debugging</member>
		</simplelist>
	</para>
	</sect2>
	<sect2>
	<title>Using Forms</title>
	<para>The provider function <code>provider.form( )</code> with the name of the form as string as parameter returns an empty
		instance of a form. It takes the name of the form as string argument.
		If you for example have a form configured called "employee" and you want to create a
		employee object from a <application>Lua</application> table, you call
			<programlisting language='lua'>
			<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/SDKTutorial/lua_usage_form_1a.lua" parse="text" />
			</programlisting>
		The first line creates the data form object.
		The second line fills the data into the data form object.
		</para>
		<para>

		The form method <code>fill</code> takes a second optional parameter. Passing "strict" as
		second parameter enforces a strict validation of the input against the form, meaning that
		attributes are checked to be attributes and non optional elements are checked to be initialized.
		Passing "complete" as second parameter forces non optional elements to be checked for initialization
		but does not distinguish between attributes and content values. "relaxed" is the default and
		checks only the existence of fill values in the form.
		</para>
		<para>

		The following example call of <code>fill</code> will raise an error because some elements
		of the form are missing in the input:
			<programlisting language='lua'>
			<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/SDKTutorial/lua_usage_form_1b.lua" parse="text" />
			</programlisting>

		</para>
		<para>
		To access the data in a form there are two form methods available. <code>get()</code> returns an iterator on the form data similar
		to the iterator on input. Same as for input there is a method <code>value()</code> that returns the form data as <application>Lua</application> data structure
		(a <application>Lua</application> table or atomic value).
		</para>
	</sect2>
	<sect2>
	<title>Form Functions</title>
	<para>
		For calling transactions or built-in functions loaded as modules the <application>Lua</application> layer defines the
		concept of functions. The provider function <code>provider.formfunction</code> with the name of the function
		as argument returns a <application>Lua</application> function. This function takes a table or an iterator as argument
		and returns a data form structure. The data in the returned form data structure can be
		accessed with <code>get()</code> that returns an iterator on the content and <code>value()</code>
		that returns a <application>Lua</application> table or atomic value.
		</para>
		<para>
		If you for example have a transaction called "insertEmployee" defined in a transaction description program
		file declared in the configuration called "insertEmployee" and you want to call it with the 'employee'
		object defined above as input, you do
			<programlisting language='lua'>
			<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/SDKTutorial/lua_usage_transaction_1.lua" parse="text" />
			</programlisting>
		</para>
		<para>
		The first line creates the function called "insertEmployee" as <application>Lua</application> function.
		The second calls the transaction, the third creates a <application>Lua</application> table out of the result
		and the fourth selects and prints the "id" element in the table.
	</para>
	</sect2>

	<sect2>
	<title>List of <application>Lua</application> Objects</title>
	<para>This is a list of all objects and functions declared by Wolframe:</para>

		<table frame="all" width="100%">
			<title>Data forms declared by DDL</title>
			<tgroup cols="4">
			<thead>
				<row>
					<entry>Method Name</entry>
					<entry>Arguments</entry>
					<entry>Returns</entry>
					<entry>Description</entry>
				</row>
			</thead>

			<tbody>
				<row>
					<entry>get</entry>
					<entry></entry>
					<entry>iterator (*)</entry>
					<entry>Returns an iterator on the form elements</entry>
				</row>
				<row>
					<entry>value</entry>
					<entry></entry>
					<entry><application>Lua</application> table</entry>
					<entry>Returns the contents of the data form as <application>Lua</application> table or atomic value</entry>
				</row>
				<row>
					<entry>__tostring</entry>
					<entry></entry>
					<entry>string</entry>
					<entry>String representation of form for debugging</entry>
				</row>
				<row>
					<entry>name</entry>
					<entry></entry>
					<entry>string</entry>
					<entry>Returns the global name of the form.
					</entry>
				</row>
				<row>
					<entry>fill</entry>
					<entry><application>Lua</application> table or iterator (*), optional validation mode (**)</entry>
					<entry>the filled form (for concatenation)</entry>
					<entry>Validates input and fills the input data into the form.</entry>
				</row>
			</tbody>
			</tgroup>
		</table>
		<para>
			(*) With iterator we mean an iterator as introduced in previous sections, returned by a Wolframe <application>Lua</application> object 'get()' method.
		</para>
		<para>
			(**) "strict" (full validation), "complete" (only check for all non optional elements initialization) or "relaxed" (no validation except matching of input to elements)
		</para>

		<table frame="all" width="100%">
			<title>Data forms returned by functions</title>
			<tgroup cols="3">
			<thead>
				<row>
					<entry>Method Name</entry>
					<entry>Returns</entry>
					<entry>Description</entry>
				</row>
			</thead>

			<tbody>
				<row>
					<entry>get</entry>
					<entry>iterator (*)</entry>
					<entry>Returns an iterator on the form elements</entry>
				</row>
				<row>
					<entry>value</entry>
					<entry><application>Lua</application> table or atomic value</entry>
					<entry>Returns the contents of the data form as <application>Lua</application> table or atomic value</entry>
				</row>
				<row>
					<entry>__tostring</entry>
					<entry>string</entry>
					<entry>String representation of form for debugging</entry>
				</row>
			</tbody>
			</tgroup>
		</table>
		<para>
			(*) With iterator we mean an iterator as introduced in previous sections, returned by a Wolframe <application>Lua</application> object 'get()' method.
		</para>

		<table frame="all" width="100%">
			<title>Global Transaction Context</title>
			<tgroup cols="2">
			<thead>
				<row>
					<entry>Method Name</entry>
					<entry>Description</entry>
				</row>
			</thead>

			<tbody>
				<row>
					<entry>transaction.begin</entry>
					<entry>Starts a transaction</entry>
				</row>
				<row>
					<entry>transaction.commit</entry>
					<entry>Commit of a transaction</entry>
				</row>
				<row>
					<entry>transaction.rollback</entry>
					<entry>Rollback of a transaction</entry>
				</row>
			</tbody>
			</tgroup>
		</table>

		<table frame="all" width="100%">
			<title>Logger functions</title>
			<tgroup cols="3">
			<thead>
				<row>
					<entry>Method Name</entry>
					<entry>Arguments</entry>
					<entry>Description</entry>
				</row>
			</thead>

			<tbody>
				<row>
					<entry>logger.printc</entry>
					<entry>arbitrary list of arguments</entry>
					<entry>Print arguments to standard console output</entry>
				</row>
				<row>
					<entry>logger.print</entry>
					<entry>loglevel (string) plus arbitrary list of arguments</entry>
					<entry>log argument list with defined log level</entry>
				</row>
			</tbody>
			</tgroup>
		</table>

		<table frame="all" width="100%">
			<title>Global functions</title>
			<tgroup cols="3">
			<thead>
				<row>
					<entry>Function Name</entry>
					<entry>Arguments</entry>
					<entry>Description</entry>
				</row>
			</thead>

			<tbody>
				<row>
					<entry>provider.form</entry>
					<entry>name of form (string)</entry>
					<entry>Returns an empty data form object of the given type</entry>
				</row>
				<row>
					<entry>provider.formfunction</entry>
					<entry>name of function (string)</entry>
					<entry>Returns a lua function to execute the <application>Wolframe</application> function specified by name</entry>
				</row>
				<row>
					<entry>provider.normalizer</entry>
					<entry>type name</entry>
					<entry>Returns a <application>Lua</application> function for normalizing values of the type specified (as used in forms)</entry>
				</row>
				<row>
					<entry>scope</entry>
					<entry>iterator (*)</entry>
					<entry>Returns an iterator to iterate till the end of the current tag (**)</entry>
				</row>
			</tbody>
			</tgroup>
		</table>
		<para>
			(*) With iterator we mean an iterator as introduced in previous sections, returned by a <application>Wolframe</application> <application>Lua</application> object 'get()' method.
		</para>
		<para>
			(**) The iterator of a defined scope must be consumed completely before consuming anything of the parent iterator.
			Otherwise it may lead to unexpected results because they share some part of the iterator state.
		</para>
	</sect2>
	<para></para>
</sect1>
<beginpage/>

