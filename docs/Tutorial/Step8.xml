<!-- step 8 -->

<sect1>
	<title>Step 8 - Add a new customer</title>	

	<para>
		We also want to add new customers to the list. The "add customer" case
		is very similar to the "edit customer" case.
	</para>
	
	<para>
		Let's copy the <filename>customer_edit.ui</filename> to
		<filename>customer_add.ui</filename>. We remove the
		'action' and 'answer' on from the form itself as
		we don't want to read anything when we create a new customer.
		But of course we could execute here a "Get new customer initial data"
		request which initializes certain values in the form.
	</para>
	
	<para>
		We change the "Save" button and rename it to "Add". We also change 'CustomerUpdate'
		to 'CustomerCreate' in the 'action' attribute and we remove the id property
		as this one is automatically choosen by the sequence in the database:

		<programlisting language='shell'>
		CustomerCreate customer {name {{main.name}}; address {{main.address}} }
		</programlisting>
	</para>

	<screenshot>
		<screeninfo>Step 8 Customer add form</screeninfo>
		<mediaobject>
			<imageobject role="html"> 
				<imagedata fileref="images/Tutorial/step8_customer_add.png" format="PNG"/>
			</imageobject> 
			<imageobject role="fo"> 
				<imagedata fileref="images/Tutorial/step8_customer_add.png" format="PNG" width="100%" scalefit="1"/>
			</imageobject> 
		</mediaobject>
	</screenshot>

	<para>
		We also introduce a new element here, the 'initalFocus' property. We
		set it on the 'name' <classname>QLineWidget</classname>, so that it
		gets the initial keyboard focus when the form is loaded:
	</para>
	
	<screenshot>
		<screeninfo>Step 8 Customer add form, initial focus</screeninfo>
		<mediaobject>
			<imageobject role="html"> 
				<imagedata fileref="images/Tutorial/step8_customer_add_name_initial_focus.png" format="PNG"/>
			</imageobject> 
			<imageobject role="fo"> 
				<imagedata fileref="images/Tutorial/step8_customer_add_name_initial_focus.png" format="PNG" width="100%" scalefit="1"/>
			</imageobject> 
		</mediaobject>
	</screenshot>

	<para>
		In the <filename>customers.ui</filename> form we have to add a 'Add' button which has one
		property 'form' with value 'customer_add':
	</para>

	<screenshot>
		<screeninfo>Step 8 customers add button</screeninfo>
		<mediaobject>
			<imageobject role="html"> 
				<imagedata fileref="images/Tutorial/step8_customers_add_button.png" format="PNG"/>
			</imageobject> 
			<imageobject role="fo"> 
				<imagedata fileref="images/Tutorial/step8_customers_add_button.png" format="PNG" width="100%" scalefit="1"/>
			</imageobject> 
		</mediaobject>
	</screenshot>

	<para>
		Now for the server side. We add a new mapping for customer creation
		in <filename>tutorial.dmap</filename>:

	<programlisting language='shell'>
	COMMAND CustomerCreate CALL CreateCustomer;
	</programlisting>
	
		We also have to add the form 'CustomerCreate' to <filename>Customer.sfrm</filename>:

	<programlisting language='xml'>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/Tutorial/CustomerCreate.simpleform" parse="text" />
	</programlisting>

		This is the same as the 'CustomerUpdate' form with the exception that
		we don't accept an 'id' attribute to be passed to the server.
	</para>
	
	<para>
		Last we add a 'CreateCustomer' transaction function:

	<programlisting language='sql'>
	TRANSACTION CreateCustomer
	BEGIN
		DO INSERT INTO Customer( name, address )
			VALUES( $(name), $(address) );
	END
	</programlisting>
	
		When we restart the server and client we see the following request
		being passed to the wolframe server:

	<programlisting language='xml'>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/Tutorial/CustomerCreate.xml" parse="text" />
	</programlisting>

	</para>
	
</sect1>
