<!-- step 4 -->

<sect1>
	<title>Step 4 - Implement server side customer list</title>	

	<para>
		We want to store the customer data in an Sqlite database, so we have to
		tell the server to load the database module for Sqlite:
		<programlisting language='shell'>
	LoadModules {
		<emphasis role="bold">module mod_db_sqlite3</emphasis>
	}
		</programlisting>
	</para>
	
	<para>
		Now we also have to create a database and populate it with the
		following schema:

		<programlisting language='shell'>
	CREATE TABLE Customer (
	    id              INTEGER PRIMARY KEY AUTOINCREMENT,
	    name            TEXT    NOT NULL,
	    address         TEXT
	);
		</programlisting>
	</para>
	
	<para>
		Store this into <filename>schema.sql</filename>. Then execute:

		<programlisting language='shell'>
	sqlite3 tutorial.db &lt; schema.sql
		</programlisting>
	</para>

	<para>
		Now we have to tell server to use this sqlite database file:

		<programlisting language='shell'>
	database {
	    SQLite {
	        identifier     sqlitedb
	        file           tutorial.db
	        foreignKeys    yes
		}
	}
		</programlisting>
	
	</para>
	
	<para>
		When we restart the server we see:

		<programlisting language='shell'>
	DEBUG: SQLite database unit 'sqlitedb' created with 3 connections
		to file 'tutorial.db'
		</programlisting>
	</para>
	
	<para>
		Now we want to use some XML filters to send/receive XML over the protocol,
		so we have to add the following modules to <filename>tutorial.conf</filename>:

		<programlisting language='shell'>
	LoadModules {
	    module mod_db_sqlite3
	    <emphasis role="bold">module mod_doctype_xml</emphasis>
	    <emphasis role="bold">module mod_filter_libxml2</emphasis>
	}
		</programlisting>
	</para>

	<para>
		The module mod_doctype_xml is there to detect documents of type XML.
		The module mod_filter_libxml2 is there to process XML documents.
		In order to see which modules are currently loaded in the wolframed we can
		use:

		<programlisting language='shell'>
	/usr/sbin/wolframed -p -c tutorial.conf
		</programlisting>
	</para>

	<para>
		We see:

		<programlisting language='shell'>
	..
	Module files to load:
	  /usr/lib/wolframe/modules/mod_db_sqlite3
	  /usr/lib/wolframe/modules/mod_doctype_xml
	  /usr/lib/wolframe/modules/mod_filter_libxml2
	..
		</programlisting>
		which looks ok.
	</para>
	
	<para>
		For mapping the requests to programs in the business layer 
		we need the directmap module. First add to
		<filename>tutorial.conf</filename>:

		<programlisting language='shell'>
	LoadModules {
		module mod_db_sqlite3
		module mod_doctype_xml
		module mod_filter_libxml2
		<emphasis role="bold">module mod_command_directmap</emphasis>
	}
		</programlisting>
		and a new section 'Processor' on the same level as 'LoadModules'
		<programlisting language='shell'>
	Processor {
	    database sqlitedb
	    cmdhandler {
	        directmap {
	            filter XML=libxml2
	            program tutorial.dmap
	        }
	    }
	}
		</programlisting>
	</para>

	<para>
		The "filter" directive denotes that the command handler should
		use the "libxml2" module for parsing XML requests.
	</para>
		
	<para>
		Now we have to create a file <filename>tutorial.dmap</filename>.
		This file maps the requests to the corresponding transaction definitions:

		<programlisting language='shell'>
	COMMAND CustomerListRequest
	       CALL SelectCustomerList
	       RETURN SKIP {standalone="yes", root="list"};
		</programlisting>

		We map the 'CustomerListRequest' request to a function 'SelectCustomerList'
		that is executed to perform the request. It will return the document 
		without validation (SKIP). The attributes in curly brackets after the 
		RETURN SKIP define the meta data of the document. Depending of the output 
		filters used we have to define a set of document meta data.
		Because we do not declare the meta data as part of the document type 
		description as we will do later, we have to declare them here in the command.
		The meta data attribute standalone='yes' tells the XML filter not to
		include any document type declaration. The declaration root='list' 
		declares the root element for the XML output.
		In our example we need to define the root element because we use XML for
		output and XML needs a root element to be defined. 
		The returned content will be a list of customers. 
		The function will be implemented in a TDL program in the server.
		We first add the TDL program declaration to a new 'Processor' configuration 
		section:

		<programlisting language='shell'>
	Processor {
	    program Customer.tdl
	}
		</programlisting>

		The <filename>Customer.tdl</filename> file contains the database transaction 'SelectCustomerList' 
		we want to execute.
		We only have to specify the enclosing tag 'customer' for each customer record 
		we are going to retrieve with 'INTO customer'.

		<programlisting language='shell'>
	TRANSACTION SelectCustomerList
	BEGIN
		INTO customer DO SELECT * from Customer;
	END
		</programlisting>

	We also need a validator for the input when the client sends a 'CustomerListRequest'.
	We load the simple form DDL compiler in the 'LoadModules' section of the <filename>tutorial.conf</filename> and
	register the simpleform program <filename>Customer.sfrm</filename> to the list of programs in the same file:

		<programlisting language='shell'>
	LoadModules {
	    module mod_db_sqlite3
	    module mod_doctype_xml
	    module mod_filter_libxml2
	    module mod_command_directmap
	    <emphasis role="bold">module mod_ddlcompiler_simpleform</emphasis>
	}

	Processor {
	    program Customer.tdl
	    <emphasis role="bold">program Customer.sfrm</emphasis>	
	}
		</programlisting>

	and we add a simple form file <filename>Customer.sfrm</filename>.
	We add a form called 'CustomerListRequest' which is empty for now 
	but for the root element 'customer':

		<programlisting language='shell'>
	FORM CustomerListRequest
	    -root customer
	{}
		</programlisting>
	</para>
	
	<para>
		We have to restart the wolframe daemon now and restart it with
		<programlisting language='shell'>
	pkill wolframed
	/usr/sbin/wolframed -f -c tutorial.conf			
		</programlisting>	
	
		This we have to do <emphasis role="bold">every time</emphasis> we
		change the configuration file <filename>tutorial.conf</filename>
		or one of the files referenced there as <filename>tutorial.dmap</filename>,
		<filename>Customer.tdl</filename> or <filename>Customer.sfrm</filename>.
	</para>
	
	<para>
		The server shows now a message about the transaction function it
		loaded:
		
		<programlisting language='shell'>
	DEBUG: Loaded transaction function 'SelectCustomerList'
		</programlisting>
	</para>

	<para>
		Now we create a telnet request which contains pseudo authentication credentials 
		and a request for the list of customers, called
		<filename>~/tutorial/client/CustomerListRequest.netcat</filename>:

		<programlisting language='xml'>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/Tutorial/CustomerListRequest.netcat" parse="text" />
		</programlisting>

		This we can execute with:

		<programlisting language='shell'>
	netcat -v localhost 7661 &lt; CustomerListRequest.netcat
		</programlisting>

		and we get:

		<programlisting language='xml'>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/Tutorial/CustomerListAnswer.netcat" parse="text" />
		</programlisting>
	</para>
	
	<para>
		We got an empty list of customers. So we have successfully configured
		the server for our first command.
	</para>
	
	<para>
		Let's add some customer data now:

		<programlisting language='shell'>
	cat > data.sql
	insert into customer(name,address) values('Dr Who','Blue Police Box');
	insert into customer(name,address) values('John Smith','The Wheel in Space');
	Ctrl-D

	sqlite3 tutorial.db &lt; data.sql
		</programlisting>
	</para>

	<para>
		When we reexecute the netcat command we see that the answer contains now
		the list of customers:

		<programlisting language='xml'>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/Tutorial/CustomerList.xml" parse="text" />
		</programlisting>

		So, the data is now correctly retrieved from the database.
	</para>
		
	<para>
		Instead of using <command>netcat</command> you can also use the
		<command>wolframec</command> for testing the requests.
	</para>
	
	<para>
		First create an XML file containing just the request and name
		it <filename>CustomerListRequest.xml</filename>:
		<programlisting language='xml'>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/Tutorial/CustomerListRequest.xml" parse="text" />
		</programlisting>		
	</para>
	
	<para>
		The request can be executed by calling:
		<programlisting language='shell'>
	wolframec -d CustomerListRequest.xml
		</programlisting>		
	</para>
	
	<para>
		We can also test the command without even starting the <command>wolframed</command>
		daemon process. We use the <command>wolilter</command> program for that in the
		following way:
		<programlisting language='shell'>
	cat ~/tutorial/client/CustomerListRequest.xml | wolfilter -c tutorial.conf CustomerListRequest
		</programlisting>		
	</para>
	
	<para>
		We can move now to the wolfclient to make our first request visible.

	</para>
</sect1>
