<!-- step 7 -->

<sect1>
	<title>Step 7 - Editing customer</title>	

	<para>
		We change the show customer use case slightly, so that we can also
		edit the customer in the <filename>customer_show.ui</filename> form.
	</para>

	<para>
		Let's first make a copy of <filename>customer_show.ui</filename>
		and name it <filename>customer_edit.ui</filename>.
	</para>
	
	<para>
		As before we add first a "Edit" button to the
		<filename>customers.ui</filename> with 'forms'
		set to:

		<programlisting language='shell'>
	customer_edit?id={customer.selected}
		</programlisting>
	</para>

	<screenshot>
		<screeninfo>Step 7 customers edit button</screeninfo>
		<mediaobject>
			<imageobject role="html"> 
				<imagedata fileref="images/Tutorial/step7_customers_edit_button.png" format="PNG"/>
			</imageobject> 
			<imageobject role="fo"> 
				<imagedata fileref="images/Tutorial/step7_customers_edit_button.png" format="PNG" width="100%" scalefit="1"/>
			</imageobject> 
		</mediaobject>
	</screenshot>

	<para>	
		We change the form <filename>customer_edit.ui</filename>
		and remove the line with 'ID' as we don't need it anymore
		and because nobody should be able to edit the id of
		a customer and change it! We also add another button and label
		it 'Save', for this button we set 'action' to generate a
		'CustomerUpdate' request:

		<programlisting language='shell'>
		CustomerUpdate customer {id={main.id}; name {{main.name}}; address {{main.address}} }
		</programlisting>
		
		We also set 'form' to 'customers', so the user gets taken back
		to the changed list of customers when saving the current record:
	</para>

	<screenshot>
		<screeninfo>Step 7 customers edit form</screeninfo>
		<mediaobject>
			<imageobject role="html">
				<imagedata fileref="images/Tutorial/step7_customer_edit.png" format="PNG"/>
			</imageobject>
			<imageobject role="fo">
				<imagedata fileref="images/Tutorial/step7_customer_edit.png" format="PNG" width="100%" scalefit="1"/>
			</imageobject>
		</mediaobject>
	</screenshot>

	<para>
		The resulting 'CustomerUpdate' XML request looks as follows:
	</para>

	<programlisting language='xml'>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/Tutorial/CustomerUpdate.xml" parse="text" />
	</programlisting>

	<para>
		Similar to to the "show customer" case we add now a new command mapping
		in <filename>tutorial.dmap</filename>:

	<programlisting language='xml'>
	COMMAND CustomerUpdate CALL UpdateCustomer;
	</programlisting>

		We also add a simple form 'CustomerUpdate' to <filename>Customer.sfrm</filename>
		which looks very similar to the 'Customer' form:
	</para>
	<programlisting language='xml'>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/Tutorial/CustomerUpdate.sfrm" parse="text" />
	</programlisting>

	<para>
		Finally we write the transaction function 'CustomerUpdate' in
		<filename>Customer.tdl</filename>:
	</para>

	<programlisting language='sql'>
	TRANSACTION UpdateCustomer
	BEGIN
		DO UPDATE Customer SET name=$(name), address=$(address)
			WHERE id=$(id);
	END
	</programlisting>

	<para>
		Note, that this time the database transaction doesn't return a result.

	</para>

	<para>
		Restart server and client and start to edit the customers.
	</para>
	
	<para>
		In debug mode in wolfclient we can right-click on the "Save" button
		and we pick the menu item "Debug: Inspect commands". Then we get
		a dialog box which shows us the status of the widget elements and
		how the XML request looks like which would be sent down to the server:
	</para>

	<screenshot>
		<screeninfo>Step 7 edit customer save button debug window</screeninfo>
		<mediaobject>
			<imageobject role="html">
				<imagedata fileref="images/Tutorial/step7_customer_debug_command.png" format="PNG"/>
			</imageobject>
			<imageobject role="fo">
				<imagedata fileref="images/Tutorial/step7_customer_debug_command.png" format="PNG" width="100%" scalefit="1"/>
			</imageobject>
		</mediaobject>
	</screenshot>
		
</sect1>
