<!-- step 5 -->

<sect1>
	<title>Step 5 - Implement client side customer list</title>	

	<para>
		It's time now to get something working visually, so we start to add a first
		simple interface to our wolfclient.
	</para>
	
	<para>
		For this we need the 'Qt designer'. We open the file 
		<filename>~/tutorial/client/init.ui</filename> again
		draw a single button with the text "Customer List":
	</para>

	<screenshot>
		<screeninfo>Step 5 customer button</screeninfo>
		<mediaobject>
			<imageobject role="html"> 
				<imagedata fileref="images/Tutorial/step5_customer_button.png" format="PNG"/>
			</imageobject> 
			<imageobject role="fo"> 
				<imagedata fileref="images/Tutorial/step5_customer_button.png" format="PNG" width="100%" scalefit="1"/>
			</imageobject> 
		</mediaobject>
	</screenshot>
	
	<para>
		We add a dynamic property 'form' of type String to this button, which has
		the value 'customers':
	</para>

	<screenshot>
		<screeninfo>Step 5 customer button properties</screeninfo>
		<mediaobject>
			<imageobject role="html"> 
				<imagedata fileref="images/Tutorial/step5_customer_button_form_property.png" format="PNG"/>
			</imageobject> 
			<imageobject role="fo"> 
				<imagedata fileref="images/Tutorial/step5_customer_button_form_property.png" format="PNG" width="100%" scalefit="1"/>
			</imageobject> 
		</mediaobject>
	</screenshot>
	
	<para>
		When we save the form and start the wolfclient, we get (after logging in) the
		first page with the "Customer List" button. Pressing it gives the error
		message:
	</para>
	
	<screenshot>
		<screeninfo>Step 5 customer button generates an error message</screeninfo>
		<mediaobject>
			<imageobject role="html"> 
				<imagedata fileref="images/Tutorial/step5_customer_button_pressed_error.png" format="PNG"/>
			</imageobject> 
			<imageobject role="fo"> 
				<imagedata fileref="images/Tutorial/step5_customer_button_pressed_error.png" format="PNG" width="100%" scalefit="1"/>
			</imageobject> 
		</mediaobject>
	</screenshot>

	<para>
		This means we have to define a new form
		<filename>~/tutorial/client/customers.ui</filename>, which will
		show the list of customers, for now we leave it empty. When we start the
		wolfclient and press the "Customer List" button again, we see that
		the form gets changed to the "customer" form (empty).
	</para>

	<para>
		We add now a <classname>QTreeWidget</classname> item to the
		<filename>customer.ui</filename> form and choose a grid layout
		for the whole form. We change the name of the widget to 'customer':
	</para>

	<screenshot>
		<screeninfo>Step 5 customer form with tree widget and name</screeninfo>
		<mediaobject>
			<imageobject role="html"> 
				<imagedata fileref="images/Tutorial/step5_customer_treewidget_and_name.png" format="PNG"/>
			</imageobject> 
			<imageobject role="fo"> 
				<imagedata fileref="images/Tutorial/step5_customer_treewidget_and_name.png" format="PNG" width="100%" scalefit="1"/>
			</imageobject>
		</mediaobject>
	</screenshot>

	<para>
		We also disable the 'rootIsDecorated' tick (we have a list, not a tree of customers).
		We also set 'selectionMode' to 'SingleSelection' and 'selectionBehaviour'
		to 'selectRows' to get the default expected behaviour of a list.
	</para>
	
	<para>
		Now we change the columns of the list (context menu "Edit items" in the widget data area):
	</para>
	
	<screenshot>
		<screeninfo>Step 5 customer form with tree widget and columns names</screeninfo>
		<mediaobject>
			<imageobject role="html"> 
				<imagedata fileref="images/Tutorial/step5_customer_column_names.png" format="PNG"/>
			</imageobject> 
			<imageobject role="fo"> 
				<imagedata fileref="images/Tutorial/step5_customer_column_names.png" format="PNG" width="100%" scalefit="1"/>
			</imageobject>
		</mediaobject>
	</screenshot>
	
	<para>
		We can now open the wolfclient and press the button and the customer list
		is loaded. But it's empty, we have first to fill it with data of our customers.
	</para>

	<para>
		So we add a string property 'action' to the widget 'customer' containing
		the following value:

		<programlisting language='shell'>
CustomerListRequest customer { }
		</programlisting>
		
		We define the 'action' to be executed, when the form is loaded. In our
		case we want to execute a 'CustomerListRequest'. The root element of the
		request should be 'customer'. We currently don't want to pass any additional
		elements, so we specify '{ }' for the empty content:
	</para>

	<screenshot>
		<screeninfo>Step 5 CustomerListRequest as dynamic property action</screeninfo>
		<mediaobject>
			<imageobject role="html"> 
				<imagedata fileref="images/Tutorial/step5_customer_action.png" format="PNG"/>
			</imageobject> 
			<imageobject role="fo"> 
				<imagedata fileref="images/Tutorial/step5_customer_action.png" format="PNG" width="100%" scalefit="1"/>
			</imageobject>
		</mediaobject>
	</screenshot>

	<para>
		When we reexecute the wolfclient still nothing happens. So we
		enable the 'Developer Mode' in the settings in the tab 'Developer'.
		Then we see that the XML request has been constructed:
	</para>

	<screenshot>
		<screeninfo>Step 5 debug view of the CustomerListRequest</screeninfo>
		<mediaobject>
			<imageobject role="html"> 
				<imagedata fileref="images/Tutorial/step5_customers_list_debug.png" format="PNG"/>
			</imageobject> 
			<imageobject role="fo"> 
				<imagedata fileref="images/Tutorial/step5_customers_list_debug.png" format="PNG" width="100%" scalefit="1"/>
			</imageobject>
		</mediaobject>
	</screenshot>
	
	<para>
		We see that the request was ok but that the answer has errors:
	</para>

	<screenshot>
		<screeninfo>Step 5 debug view of the CustomerListRequest</screeninfo>
		<mediaobject>
			<imageobject role="html"> 
				<imagedata fileref="images/Tutorial/step5_customers_list_debug2.png" format="PNG"/>
			</imageobject> 
			<imageobject role="fo"> 
				<imagedata fileref="images/Tutorial/step5_customers_list_debug2.png" format="PNG" width="100%" scalefit="1"/>
			</imageobject>
		</mediaobject>
	</screenshot>
	
	<para>
		The reason for this is, we have to tell the client how to map the
		elements of the result structure in the XML back to widgets and properties
		of the widgets.
	</para>
	
	<para>
		We want to map the following XML:

		<programlisting language='xml'>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/Tutorial/CustomerList.xml" parse="text" />
		</programlisting>
		
		We reference the root element and the tag and attribute values into the properties of the list widget 'customer'
		(in our case the rows called 'name' and 'address'). This addressing schema belongs into the 
		dynamic property 'answer' similar to the 'action' property:
		
		<programlisting language='shell'>
CustomerList list {
    customer[] {
        id={?};
        name{{row.name}};
        address{{row.address}}
    }
}
		</programlisting>
		
		The line breaks and indentation are optional and you can write the mapping
		in a single line.
		The '?' is used for elements in the XML we don't need at the moment.
		'row' is a property of the <classname>QTreeWidget</classname> widget
		named 'customer' and iterates through all rows in the list. Each row
		has sub-properties 'name' and 'address' which represent
		the corresponding column:
	</para>
	
	<screenshot>
		<screeninfo>Step 5 CustomerListRequest mapping XML back via answer</screeninfo>
		<mediaobject>
			<imageobject role="html"> 
				<imagedata fileref="images/Tutorial/step5_customer_answer.png" format="PNG"/>
			</imageobject> 
			<imageobject role="fo"> 
				<imagedata fileref="images/Tutorial/step5_customer_answer.png" format="PNG" width="100%" scalefit="1"/>
			</imageobject>
		</mediaobject>
	</screenshot>
		
	<para>
		When we reexecute the wolfclient and click on the customer list we
		see that the customer list is shown as expected:
	</para>

	<screenshot>
		<screeninfo>Step 5 customer list</screeninfo>
		<mediaobject>
			<imageobject role="html"> 
				<imagedata fileref="images/Tutorial/step5_customers_list.png" format="PNG"/>
			</imageobject> 
			<imageobject role="fo"> 
				<imagedata fileref="images/Tutorial/step5_customers_list.png" format="PNG" width="100%" scalefit="1"/>
			</imageobject>
		</mediaobject>
	</screenshot>

	<para>
		But when we look at the contents of the debug window we still see an error reported:
	</para>
	<screeninfo>Step 5 undefined document type</screeninfo>
	<mediaobject>
		<imageobject role="html"> 
			<imagedata fileref="images/Tutorial/step5_customers_undefined_doctype.png" format="PNG"/>
		</imageobject> 
		<imageobject role="fo"> 
			<imagedata fileref="images/Tutorial/step5_customers_undefined_doctype.png" format="PNG" width="100%" scalefit="1"/>
		</imageobject>
	</mediaobject>
	<para>
		For simplicity we defined the output with the document meta data attribute
		'{ standalone = "yes" }' that the returned document should not be built
		with an explicit document type definition.
		But the client expects a document type declaration. For this we 
		change the definition in the file <filename>tutorial.dmap</filename> we 
		created in step 4 in the following way:
	</para>

	<programlisting language='shell'>
COMMAND CustomerListRequest
    CALL SelectCustomerList
    RETURN SKIP CustomerList {root="list"};
	</programlisting>

	<para>
	The directive 'RETURN SKIP CustomerList {root="list"}' states that a document
	of type 'CustomerList' with the root element 'list' is returned
	without validation of the output.
	We omit a validation on purpose for now to get to the next step.
	</para>
</sect1>
