<!-- step 6 -->

<sect1>
	<title>Step 6 - Show customer</title>	

	<para>
		As next step we want to show how data is communicated between the forms
		by implementing a simple "show me customer data" use case.
	</para>

	<para>
		Let's start by adding a button in <filename>customers.ui</filename> called 'Show':
	</para>
	
	<screenshot>
		<screeninfo>Step 6 customer edit button</screeninfo>
		<mediaobject>
			<imageobject role="html"> 
				<imagedata fileref="images/Tutorial/step6_show_button_form_prop.png" format="PNG"/>
			</imageobject> 
			<imageobject role="fo"> 
				<imagedata fileref="images/Tutorial/step6_show_button_form_prop.png" format="PNG" width="100%" scalefit="1"/>
			</imageobject> 
		</mediaobject>
	</screenshot>

	<para>
		We add dynamic properties, one is the 'form' which we set to 'customer_show'.
	</para>
	
	<para>
		We also add some signals for the double click on the customer list to
		click the "Show" button:
	</para>
	
	<screenshot>
		<screeninfo>Step 5 customer button signals</screeninfo>
		<mediaobject>
			<imageobject role="html"> 
				<imagedata fileref="images/Tutorial/step6_customers_signals.png" format="PNG"/>
			</imageobject> 
			<imageobject role="fo"> 
				<imagedata fileref="images/Tutorial/step6_customers_signals.png" format="PNG" width="100%" scalefit="1"/>
			</imageobject> 
		</mediaobject>
	</screenshot>

	<para>
		We want the currently selected customer to be accessible in the
		<filename>customer_show.ui</filename> form, so we have to remember
		the current selection of the <classname>QTreeWidget</classname>
		named 'customer' as global variable 'id'. We add a dynamic property
		with the name 'global.id' and the value '{customer.id}':
	</para>

	<screenshot>
		<screeninfo>Step 6 customer show button with all properties</screeninfo>
		<mediaobject>
			<imageobject role="html"> 
				<imagedata fileref="images/Tutorial/step6_customers_edit_button_props.png" format="PNG"/>
			</imageobject> 
			<imageobject role="fo"> 
				<imagedata fileref="images/Tutorial/step6_customers_edit_button_props.png" format="PNG" width="100%" scalefit="1"/>
			</imageobject> 
		</mediaobject>
	</screenshot>

	<para>
		Now of course we have to create a new form called <filename>customer_show.ui</filename>. We
		choose a form layout and add two fields with labels 'Name:' and 'Address:'
		and each of them having a <classname>QLineEdit</classname> widget. The names of the widgets
		should be 'name' and 'address' in order to match the future read request
		from the server. Temporarily we also add an 'id' field which shows us
		the current value of 'global.id':
	</para>

	<screenshot>
		<screeninfo>Step 6 show customer dialog</screeninfo>
		<mediaobject>
			<imageobject role="html"> 
				<imagedata fileref="images/Tutorial/step6_customer_show_id.png" format="PNG"/>
			</imageobject> 
			<imageobject role="fo"> 
				<imagedata fileref="images/Tutorial/step6_customer_show_id.png" format="PNG" width="100%" scalefit="1"/>
			</imageobject> 
		</mediaobject>
	</screenshot>

	<para>
		Finally we also need a button which brings us back to the customer list
		by simply adding a 'form' action with the value 'customers':
	</para>

	<screenshot>
		<screeninfo>Step 6 customer show customer dialog back button</screeninfo>
		<mediaobject>
			<imageobject role="html"> 
				<imagedata fileref="images/Tutorial/step6_customer_show_back_button.png" format="PNG"/>
			</imageobject> 
			<imageobject role="fo"> 
				<imagedata fileref="images/Tutorial/step6_customer_show_back_button.png" format="PNG" width="100%" scalefit="1"/>
			</imageobject> 
		</mediaobject>
	</screenshot>

	<para>
		If we start the wolfclient and select a customer and press 'Show' we will
		notice that the whole "Show Customer" form is empty, even the id. What's
		wrong? Well, the widgets in wolfclient have the default behaviour of using
		'id' attributes attached to the colums of a list for instance. We must
		make sure, the server is mapping us the XML correctly with 'id' attribute
		and not 'id' as element.
	</para>
	
	<para>
		This is the moment we go back to the server and start output form validation.
		We add a <filename>CustomerList.simpleform</filename> form which describes
		the result of the 'CustomerListRequest' more precisely and especially
		declares the 'id' as mandatory attribute of the customer:
	</para>

	<programlisting language='shell'>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/Tutorial/CustomerList.simpleform" parse="text" />
	</programlisting>

	<para>
		We have to declare output form validation in the 'CustomerListRequest'
		in <filename>tutorial.directmap</filename> as well:

	<programlisting language='shell'>
	CustomerListRequest = SelectCustomerList( xml ) : CustomerList;
	</programlisting>
	
		and we have to include the program in <filename>tutorial.conf</filename> of the server:

	<programlisting language='shell'>
	Processor {
		..
		program CustomerList.simpleform	
		..
	}
	</programlisting>
	
		Checking with:

	<programlisting language='shell'>
	netcat -v --wait=2 localhost 7661 &lt; CustomerListRequest.netcat
	</programlisting>
	
		we get now:

	<programlisting language='xml'>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/Tutorial/CustomerListWithIdAttributes.xml" parse="text" />
	</programlisting>

		So, that looks ok.
	</para>

	<para>
		Now also the wolfclient shows the id of the customer, when the user double
		clicks the customer in the list.
	</para>
	
	<para>
		The 'name' and the 'address' fields are still empty. We could of course
		use global variables again to propagate the values between forms, but
		if the form gets more complex, this is not a good idea.
	</para>
	
	<para>
		We start to use the 'initAction' property on the <filename>customer_show.ui</filename> form
		as follows: we want it to execute a read with a document type 'CustomerRequest'
		which searches for a single customer by customer id:
	</para>

	<screenshot>
		<screeninfo>Step 6 customer show customer, initAction</screeninfo>
		<mediaobject>
			<imageobject role="html"> 
				<imagedata fileref="images/Tutorial/step6_customer_show_initaction.png" format="PNG"/>
			</imageobject> 
			<imageobject role="fo"> 
				<imagedata fileref="images/Tutorial/step6_customer_show_initaction.png" format="PNG" width="100%" scalefit="1"/>
			</imageobject> 
		</mediaobject>
	</screenshot>
	
	<para>
		We see, that we use the value of 'global.id' again and add it to the 'initAction'
		request as attribute 'id' (we can use the wolfclient with -d to see the communication
		on the wire):

	<programlisting language='xml'>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/Tutorial/CustomerRequest.xml" parse="text" />
	</programlisting>

		We also get in the client:

	<programlisting language='shell'>
	CRITICAL: ERROR: error in network data loader "Protocol error in command REQUEST, received:  no command handler for 'CustomerRequest'." 
	</programlisting>

		and in the server:

	<programlisting language='shell'>
	ERROR: error redirect input: no command handler for 'CustomerRequest'
	</programlisting>

	We see, that the request is sent to the server, but we didn't define the
	necessary things in the server yet. So we add another map:

	<programlisting language='shell'>
	CustomerRequest = SelectCustomer( xml ) : Customer;
	</programlisting>

		to <filename>tutorial.directmap</filename>.
	</para>

	<para>
		We define a new file <filename>CustomerRequest.simpleform</filename> which contains the
		validation of the customer request (for now, this looks exactly like
		the request for the list of customers, but we may want to change that
		later):
	</para>
	
	<programlisting language='shell'>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/Tutorial/CustomerRequest.simpleform" parse="text" />
	</programlisting>

	<para>
	We register the form in <filename>tutorial.conf</filename>:

	<programlisting language='shell'>
	Processor {
		..
		program CustomerRequest.simpleform
		..
	}
	</programlisting>
	
		And of course we have to define a transaction function 'SelectCustomer'
		in <filename>Customer.tdl</filename>:

	<programlisting language='sql'>
	TRANSACTION SelectCustomer
	RESULT INTO customer
	BEGIN
		INTO . DO SELECT * from Customer WHERE id=$(customer/id);
	END
	</programlisting>
	
		The '$(customer/id)' refers to the ID we pass down for the customer record
		to retrieve. The 'RESULT INTO customer' makes sure the result will again
		be in a table with 'customer' as root element.
	</para>
	
	<para>	
		We also have to define how the result should be mapped, so:

	<programlisting language='shell'>
	Processor {
		..
		program Customer.simpleform
		..
	}
	</programlisting>
	
		and <filename>Customer.simpleform</filename>:

	<programlisting language='shell'>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/Tutorial/Customer.simpleform" parse="text" />
	</programlisting>

		Now if we restart client and server and we click on the second
		customer in the list we get:
	</para>

	<screenshot>
		<screeninfo>Step 6 customer show customer, working</screeninfo>
		<mediaobject>
			<imageobject role="html"> 
				<imagedata fileref="images/Tutorial/step6_customer_show_working.png" format="PNG"/>
			</imageobject> 
			<imageobject role="fo"> 
				<imagedata fileref="images/Tutorial/step6_customer_show_working.png" format="PNG" width="100%" scalefit="1"/>
			</imageobject> 
		</mediaobject>
	</screenshot>

	<para>
		So we successfully read the data of a customer into a form.
	</para>

</sect1>
