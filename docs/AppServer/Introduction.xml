<!-- Introduction -->
<chapter>
	<title>Introduction</title>

	<sect1>
		<title>Architecture</title>
		<para><code>Wolframe</code> is a 3-tier application server.
		</para>
		<figure>
			<title>Overview</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/3-tier.svg" format="SVG"
						scalefit="1" width="100%" contentdepth="100%"/>
				</imageobject>
				<caption><para></para></caption>
			</mediaobject>
		</figure>
		<para></para>
		<sect2>
		<title>Presentation tier</title>
		<para>The presentation tier of <code>Wolframe</code> is implemented as thin client.
			It maps the presentation of the application from the request answers it gets from the server.
			Also the data describing this mapping is loaded from the server when connecting to it.
			So the whole application is driven by the server.
			A special use case are user interface designers that upload the presentation data for other users
			to the server.</para>
		</sect2>
		<sect2>
		<title>Logic tier</title>
			<para>The logic tier of <code>Wolframe</code> describes the transformation of input of the presentation tier to a set of instructions
			for the data tier. It also describes the transformation of the output of the data tier to a result structure returned back to the presentation tier.
			The logic tier supports scripting languages to define the mapping. <code>Wolframe</code> introduces three concepts as fundamental building blocks of the logic tier:
				<itemizedlist>
					<listitem><para>Filters: Filters are transforming serialized input data (XML,JSON,CSV,etc.) to a unified serialization of hierarchical structured data and to serialize any form of processed data for output. Filters are implemented as loadable modules (e.g. XML filter based on libxml2) or as scripts (XSLT filter script for rewriting input or output)</para></listitem>
					<listitem><para>Forms: Forms a data structures defined in a data definition language (DDL). Forms are used to validate and normalize input (XML validation, token normalization, structure definition).</para></listitem>
					<listitem><para>Functions: Functions delegate processing to the data tier (transactions) or serve as interface to integrate with other environments (e.g. <code>.NET</code>). Functions have a unique name and are called with a structure as argument and a structure as result.</para></listitem>
				</itemizedlist>
			You find a detailed description of the Logic tier and how to use it in the SDK manual.
			</para>
		</sect2>
		<sect2>
		<title>Data tier</title>
			<para>The data tier of <code>Wolframe</code> defines the functions for calling a transaction.
			The main transaction function gets a complete description of the transaction to execute as input and returns
			all results of the transaction as output. The logic tier builds the result data structure out of this result.
			The main transaction function is stateless and an abstraction of the transactional context. (The transaction
			context does not exist outside this function. Differently explained: Two functions do not refer to the same
			transaction).</para>
		</sect2>
	</sect1>
</chapter>

