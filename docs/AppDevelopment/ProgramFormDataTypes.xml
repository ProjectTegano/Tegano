<sect1>
<title>DDL Data Types</title>
	<sect2>
	<title>Introduction</title>
	<para>Forms are data structures used for validation of input and output.
		They are defined for Wolframe in Data Definition Languages (DDLs).
		We will introduce Forms in the next chapter. Atomic elements of forms are
		typed. With each type a function is associated to validate and normalize the
		atomic element of that type. There is only one predefined type called 'string'.
		strings are neither validated nor transformed for processing in any way.
		The others are defined in files with the extension ".wnmp" that are referenced
		as programs in the configuration.
	</para>
	<para>
		A .wnmp file contains assignments of a type name to sequences of normalization
		function calls where the first takes the initial input. The output of a function
		in the sequence gets the input of the next one and the final output for the last one.
		Each normalization step validates the input as atomic type (arithmetic,string,etc.)
		and transforms it to another atomic type.
	</para>
	</sect2>
	<sect2>
	<title>Example</title>
	<para>
		The example defines 3 numeric types including trimming of the input string for mode tolerant
		parsing and a string type that is converted to lowercase as normalization.
	</para>
	<para>
		<programlisting language='text'>
		<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/example_1.normalize" parse="text" />
		</programlisting>
	</para>
	</sect2>

	<sect2>
	<title>Language Description</title>
	<para>
		Each type declaration in a <code>.wnmp</code> file starts with an identifier followed by an assignment 
		operator '='. The left side identifier specifies the name of the type. This type name can be used
		in a DDL as name instead of the built in type <code>string</code>. When doing so the referenced token is validated
		and normalized with the comma separated sequence of function references on the right side of 
		the assignment before being assigned as value to the element in the form declared to be of this type.
	</para>
	<para>
		The function names are either identifiers or have two parts separated by ':'. The left part is the name
		of the module declaring the function. The right part is the name of the function 
		in the module with the name in front of the ':'. If the function is 
		declared as one single identifier then the module referred to is the previous one in the sequence 
		before the identifier. The 4th line in the example declaration list above
		for example refers to the 'lcname' function in the 'string' normalization module.
	</para>
	<para>Functions can have a comma separated list of constant arguments in brackets ('(' and ')') 
		depending on the function type. An integer type for example could have 
		the maximum number of digits of the integer type.
	</para>
	</sect2>
	<sect2>
	<title>Configuration</title>
	<para>For declaring and using a .wnmp file in our example above, you have to load the module 'mod_normalize_string'
	and the module 'mod_normalize_number'.
	For this you add the following two lines to the LoadModules section of your <application>Wolframe</application> configuration:
		<programlisting language='text'>
		<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/cfg_normalize_number_string.conf" parse="text" />
		</programlisting>
	</para>
	<para>You also have to add the declaration of the program "example.wnmp" (listing example above) 
	to the Processor section of the configuration.
	<programlisting language='text'>
	<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/cfg_program_wnmp.conf" parse="text" />
	</programlisting>
	</para>
	</sect2>
	<para></para>
</sect1>
<beginpage/>

