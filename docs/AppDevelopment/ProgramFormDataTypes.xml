<sect1>
<title>Datatypes in DDLs</title>
	<sect2>
	<title>Introduction</title>
	<para>The basic elements to build atomic data types in <application>Wolframe</application>
		are normalization functions. Basic normalization functions are written in C++
		and loadable as modules.
	</para>
	<para>
		As we already mentioned are atomic elements in forms typed.
		With each type a function is associated to validate and normalize the
		atomic element of that type. There is only one predefined type called 'string'.
		strings are neither validated nor transformed for processing in any way.
		The others are defined in files with the extension <code>.wnmp</code>
		that are referenced as programs in the configuration.
	</para>
	<para>
		A <code>.wnmp</code> file contains assignments of a type name to sequences 
		of basic normalization function calls where the first takes the initial input.
		The output of a function in the sequence gets the input of the next one and 
		the final output for the last one.
		Each normalization step validates the input as atomic type (arithmetic,string,etc.)
		and transforms it to another atomic type.
	</para>
	</sect2>
	<sect2>
	<title>Example</title>
	<para>
		The example defines 3 numeric types including trimming of the input string for mode tolerant
		parsing and a string type that is converted to lowercase as normalization.
	</para>
	<para>
		<programlisting language='text'>
		<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/example_1.normalize" parse="text" />
		</programlisting>
	</para>
	</sect2>

	<sect2>
	<title>Language Description</title>
		<sect3>
		<title>Type Assignments</title>	
		<para>
			Each type declaration in a <code>.wnmp</code> file starts with an identifier followed by an assignment 
			operator '='. The left side identifier specifies the name of the type. 
			This type name can be used in a DDL as name instead of the built-in
			type <code>string</code>. 
			A token of this type is validated and normalized with the 
			comma separated sequence of function references on the right side of
			the assignment. A function reference consists of an identifier plus an 
			optional comma separated list of constant arguments in brackets ('(' and ')').
			The interpretation of the arguments depend on the function type. An integer type for example could have 
			the maximum number of digits of the integer type.
		</para>
		</sect3>
	</sect2>
	<sect2>
	<title>Configuration</title>
	<para>For declaring and using a .wnmp file in our example above, we have to load 
	the module 'mod_normalize_string' and the module 'mod_normalize_number'.
	For this we add the following two lines to the LoadModules section of our <application>Wolframe</application> configuration:
		<programlisting language='text'>
		<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/cfg_normalize_number_string.conf" parse="text" />
		</programlisting>
	</para>
	<para>We also have to add the declaration of the program "example.wnmp" (listing example above) 
	to the Processor section of the configuration.
	<programlisting language='text'>
	<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/cfg_program_wnmp.conf" parse="text" />
	</programlisting>
	</para>
	</sect2>
</sect1>


