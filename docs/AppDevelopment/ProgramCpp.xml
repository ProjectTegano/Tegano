<sect2>
<title>Functions in native C++</title>
	<sect3>
		<title>Introduction</title>
		<para>You can write functions for the logic tier of <application>Wolframe</application> with <application>C++</application>. 
		Because native <application>C++</application> is by nature a compiled and not an
		interpreted language, you have to build a module out of your function implementation.
		</para>
	</sect3>

	<sect3>
	<title>Prerequisites</title>
	<para>For native <application>C++</application> you need a <application>C++</application>
	build system with compiler and linker or an integrated
	development environment for <application>C++</application>. 
	</para>
	</sect3>

	<sect3>
	<title>Declaring functions</title>
	<para>
		Form functions declared in <application>C++</application> have two arguments. The output structure to fill
		is passed by reference as first and the input structure passed is by value.
		The input structure copy should not be modified by the callee. 
		This means in <application>C++</application> that it is passed as const 
		reference.
		The function returns an <code>int</code> that is <code>0</code> on success 
		and any other value indicating an error code. The function may also throw a 
		runtime error exception in case of an error.
		The following example shows a function declaration. The function declaration
		is not complete because the input output structures need to be declared with some
		additional attributes needed for introspection. We will explain this in the following
		section.
	</para>
		<sect4>
		<title>Example Function Declaration</title>
		<para>The function takes a structure as input and writes the result into an
		output structure. In this example input and output type are the same, but this
		is not required. It's just the same here for simplicity. 
		</para>
		<para>
		The elements of the function declaration are put into a structure with four elements.
		The <code>typedef</code> for the InputType and OutputType structures is required,
		because the input and output types should be recogniceable without complicated 
		type introspection templates. (Template based introspection might cause spurious
		and hard to understand error messages when building the module). 
		</para>
		<para>
		The function <code>name</code> returns the name of the function that
		identifies the function in the Wolframe global scope.
		</para>
		<para>
		The <code>exec</code> function declared as static function with this signature refers to 
		the function implementation.</para>
		<programlisting language='C++'>
		<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/customersFunction.hpp" parse="text" />
		</programlisting>
		</sect4>
	</sect3>

	<sect3>
	<title>Input/output data structures</title>
	<para>For defining input and output parameter structures in <application>C++</application> you have to define the 
		structure and its serialization description. The serialization description is a static 
		function <code>getStructDescription</code> without arguments returning a const structure that describes 
		what element names to bind to which structure elements.
	</para>
	<para>
		The following example shows a form function parameter structure defined in <application>C++</application>.
	</para>
		<sect4>
		<title>Header file</title>
		<para>Declares the structure and the serialization description of the structure.
		Structures may contain structures with their own serialization description.</para>
		<programlisting language='C++'>
		<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/customers.hpp" parse="text" />
		</programlisting>
		</sect4>

		<sect4>
		<title>Source file</title>
		<para>Declares 'ID' as attribute and name, canonical_Name, country, locality as tags. 
		The '--' operator marks the end of attributes section and the start of content 
		section.</para>
		<programlisting language='C++'>
		<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/customers.cpp" parse="text" />
		</programlisting>
		</sect4>
	</sect3>

	<sect3>
	<title>Writing the module</title>
	<para>Now we have all pieces together to build a loadable
	<application>Wolframe</application> module with our example <application>C++</application>
	function. The following example shows what you have to
	declare in the main module source file.
	</para>
		<sect4>
		<title>Module declaration</title>
		<para>The module declaration needs to include <code>appdevel.hpp</code> and
		of course all headers with the function and data structure declarations needed.
		The module starts with the header macro CPP_APPLICATION_FORM_FUNCTION_MODULE
		with a short description of the module.
		What follows are the function declarations declared with the macro
		CPP_APPLICATION_FORM_FUNCTION. This macro has the following arguments in
		this order:
		</para>
		<simplelist type="horiz" columns="2">
		<member>Name</member><member>Description</member>
		<member>NAME</member><member>identifier of the function</member>
		<member>FUNCTION</member><member>implementation of the function</member>
		<member>OUTPUT</member><member>output structure of the function</member>
		<member>INPUT</member><member>input structure of the function</member>
		</simplelist>
		<para>
		The declaration list is closed with the parameterless footer macro
		CPP_APPLICATION_FORM_FUNCTION_MODULE_END.
		The following example shows an example module declaration:
		</para>
		<programlisting language='C++'>
		<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/customersModule.cpp" parse="text" />
		</programlisting>
		</sect4>
	</sect3>

	<sect3>
	<title>Building the module</title>
	<para>For building the module we have to include all modules introduced here and
	to link at against the wolframe serialization library (wolframe_serialize)
	and the wolframe core library (wolframe).
	</para>
	</sect3>

	<sect3>
	<title>Using the module</title>
	<para>The module built can be loaded as the other modules by declaring it in the wolframe
	LoadModules section of the configuration. Simply list it there with 
	<code>module &lt;yourModuleName&gt;</code> with &lt;yourModuleName&gt; being the name
	or path to your module.
	</para>
	</sect3>

	<sect3>
	<title>Validation issues</title>
	<para>
	<application>C++</application> is a strongly typed language. This means that the
	input of a function and the output is already validated to be of a strictly
	defined structure. So a validation by passing the input through a form
	might not be needed anymore. The constructs used to describe structures of
	<application>Wolframe</application>
	in native <application>C++</application> are even capable of describing attributes
	like used in XML (section 'Input/Output Data Structures' above).
	See in the documentation of the standard command handler how validation can be
	skipped with the attribute <code>SKIP</code>.
	</para>
	</sect3>

</sect2>
