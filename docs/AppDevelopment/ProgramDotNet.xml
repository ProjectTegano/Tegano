<sect1>
<title>Functions in .NET</title>
	<sect2>
		<title>Introduction</title>
		<para>You can write functions for the logic tier of <application>Wolframe</application> in languages based
		on <application>.NET</application> (<ulink url="http://www.microsoft.com/net">http://www.microsoft.com/net</ulink>) like for example
		<application>C#</application> and <application>VB.NET</application>.  
		Because <application>.NET</application> based libraries can only be called 
		by <application>Wolframe</application> as a compiled and not as an 
		interpreted language, you have to build a .NET assembly out of a group of 
		function implementations. There are further restrictions on a .NET implementation.
		But we will discuss all of them, so that you should be able
		to write .NET assemblies for <application>Wolframe</application> on your own 
		after reading this chapter.
		</para>
	</sect2>

	<sect2>
	<title>Configuration</title>
	<para>For enabling .NET you have to declare the loading of the module 'mod_command_dotnet'
		in the main section of the server configuration file.
		<programlisting language='awk'>
		<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/cfg_command_dotnet.conf" parse="text" />
		</programlisting>
		For the configuration of the .NET assemblies to be loaded, see section 'Configure .NET Modules'.
	</para>
	</sect2>

	<sect2>
		<title>Function Interface</title>
		<sect3>
		<title>Function Context</title>
		<para>In .NET the building blocks for functions called by <application>Wolframe</application>
		are classes and method calls. The way of defining callable items for 
		<application>Wolframe</application> is restricted either due to the current 
		state of the <application>Wolframe</application> COM/.NET interoperability
		implementation or due to general or version dependend restrictions of .NET objects exposed 
		via COM/.NET interop. We list here the restrictions:
		<itemizedlist>
			<listitem><para>The methods exported as functions for <application>Wolframe</application>
			must not be defined in a nested class. They should be defined in a top level class 
			without namespace. This is a restriction imposed by the current development 
			state of Wolframe.</para>
			</listitem>
			<listitem><para>The class must be derived from an interface with all methods
			exported declared.</para>
			</listitem>
			<listitem><para>The methods must not be static because COM/.NET interop,
			as far as we know, cannot cope with static method calls. Even if the 
			methods nature is static, they have to be defined as ordinary method calls.</para>
			</listitem>
		</itemizedlist>
		</para>
		</sect3>

		<sect3>
		<title>Function Signature</title>
		<para>
		Functions callable from <application>Wolframe</application> take an arbitrary 
		number of arguments as input and return a structure (<code>struct</code>) as 
		output. The named input parameters referencing atomic elements or complex 
		structures are forming the input structure of the <application>Wolframe</application> 
		function. A <application>Wolframe</application> function called with a 
		structure containing the elements "A" and "B" is implemented in 
		<application>.NET</application> as function taking two arguments
		with the name "A" and "B". Both "A" and "B" can represent either atomic elements 
		or arbitrary complex structures. <application>.NET</application> functions
		that need to call global <application>Wolframe</application> functions,
		for example to perform database transactions, need to declare 
		a <code>ProcProvider</code> interface from <application>Wolframe</application>
		namespace as additional parameter. We will describe the <code>ProcProvider</code>
		interface in a separate section of this chapter.
		</para>
		</sect3>

		<sect3>
		<title>Example</title>
		<para>The following simple example without provider context is declared 
		without marshalling and introspection tags. It can therefore not be called
		by <code>Wolframe</code>. We explain later how to make it callable. 
		The example just illustrates the structure of the exported object with
		its interface (example <application>C#</application>):
		<programlisting language='C#'>
		<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/dotnet_ClassStructure.cs" parse="text" />
		</programlisting>
		</para>
		</sect3>
	</sect2>

	<sect2>
	<title>Prepare .NET Modules</title>
	<para>
	<application>Wolframe</application> itself is not a <application>.NET</application> application. Therefore it has to call
	<application>.NET</application> functions via COM/.NET interop interface of a hosted CLR
	(Common Language Runtime).
	To make functions written in <application>.NET</application> callable by <application>Wolframe</application>, the following steps
	have to be performed:
	</para>
		<sect3>
		<title>Make Assemblies COM visible</title>
		<para>
		First the asseblies with the functions exported to <application>Wolframe</application> have to be build COM visible.
		To make the <application>.NET</application> functions called from <application>Wolframe</application> COM visible, you have to tick
		"Properties/Assembly Information" the switch "Make assembly COM visible". Furthermore
		every object and method that is part of the exported API (also objects used as parameters)
		has to be tagged in the source as COM visible with <code>[ComVisible(true)]</code>.
		</para>
		</sect3>

		<sect3>
		<title>Tag Exported Objects with a Guid</title>
		<para>Each object that is part of the exported API has to be tagged with a global unique
		identifier (Guid) in order to be adressable. Modules with <application>.NET</application> functions will have to be globally
		registered and the objects need to be identified by the Guid because that's the only way
		to make the record info structure visible for <application>Wolframe</application>. The record info structure is
		needed to serialize/deserialize <application>.NET</application> objects from another interpreter context that
		is not registered for <application>.NET</application>. There are many ways to create a Guid and
		tag an object like this: <code>[Guid("390E047F-36FD-4F23-8CE8-3A4C24B33AD3")]</code>.
		</para>
		</sect3>

		<sect3>
		<title>Add Marshalling Tags to Values</title>
		<para>For marshalling function calls correctly, <application>Wolframe</application> needs
		tags for every parameter and member of a sub structure of a parameter
		of methods exported as functions.
		The following table lists the supported types and their marshalling tags:
		</para>
		<table frame="all" width="100%">
			<title>Marshalling Tags</title>
			<tgroup cols="2">
			<colspec colnum="1" colwidth="1*"/>
			<colspec colnum="2" colwidth="2*"/>
			<thead>
			<row>
				<entry>.NET Type</entry>
				<entry>Marshalling Tag</entry>
			</row>
			</thead>

			<tbody>
			<row>
				<entry>I2</entry>
				<entry><code>[MarshalAs(UnmanagedType.I2)]</code></entry>
			</row>
			<row>
				<entry>I4</entry>
				<entry><code>[MarshalAs(UnmanagedType.I4)]</code></entry>
			</row>
			<row>
				<entry>I8</entry>
				<entry><code>[MarshalAs(UnmanagedType.I8)]</code></entry>
			</row>
			<row>
				<entry>UI2</entry>
				<entry><code>[MarshalAs(UnmanagedType.UI2)]</code></entry>
			</row>
			<row>
				<entry>UI4</entry>
				<entry><code>[MarshalAs(UnmanagedType.UI4)]</code></entry>
			</row>
			<row>
				<entry>UI8</entry>
				<entry><code>[MarshalAs(UnmanagedType.UI8)]</code></entry>
			</row>
			<row>
				<entry>R4</entry>
				<entry><code>[MarshalAs(UnmanagedType.R4)]</code></entry>
			</row>
			<row>
				<entry>R8</entry>
				<entry><code>[MarshalAs(UnmanagedType.R8)]</code></entry>
			</row>
			<row>
				<entry>BOOL</entry>
				<entry><code>[MarshalAs(UnmanagedType.BOOL)]</code></entry>
			</row>
			<row>
				<entry>string</entry>
				<entry><code>[MarshalAs(UnmanagedType.BStr)]</code></entry>
			</row>
			<row>
				<entry>RECORD</entry>
				<entry><para>no tag needed</para></entry>
			</row>
			<row>
				<entry>array of structures</entry>
				<entry><code>[MarshalAs(UnmanagedType.SafeArray, SafeArraySubType = VarEnum.VT_RECORD)]</code></entry>
			</row>
			<row>
				<entry>array of strings</entry>
				<entry><code>[MarshalAs(UnmanagedType.SafeArray, SafeArraySubType = VarEnum.VT_BSTR)]</code></entry>
			</row>
			<row>
				<entry>array of XX (XX=I2,I4,I8,..)</entry>
				<entry><code>[MarshalAs(UnmanagedType.SafeArray, SafeArraySubType = VarEnum.VT_XX)]</code></entry>
			</row>
			</tbody>
			</tgroup>
		</table>
		<para>Decimal floating point and numeric types (DECIMAL) are not yet supported, but
		will soon be available.</para>
		</sect3>

		<sect3>
		<title>Example with COM Introspection Tags</title>
		<para>The following C# module definition repeats the example introduced above with the
		correct tagging for COM visibility and introspection:
		<programlisting language='C#'>
		<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/dotnet_ClassStructureWithTags.cs" parse="text" />
		</programlisting>
		</para>
		</sect3>

		<sect3>
		<title>Create a Type Library</title>
		<para>For making the API introspectable by <application>Wolframe</application>, we have to create a TLB
		(Type Library) file from the assembly (DLL) after build. The type library has
		to be recreated every time the module interface (API) changes. The type library is
		created with the program <code>tlbexp</code>. All created type library (.tlb) file
		that will be loaded with the same runtime environment have to be copied into
		the same directory. They will be referenced for introspection in the 
		configuration. The configuration of <application>.NET</application> will be explained later.
		</para>
		</sect3>

		<sect3>
		<title>Register the Type Library</title>
		<para>The type library created with <code>tlbexp</code> has also to be registered.
		For this you call the program <code>regtlibv12</code> with your type library file
		(.tlb file) as argument. The type libary fegistration has to be repeated when
		the the module interface (API) changes.
		</para>
		</sect3>

		<sect3>
		<title>Register the Assembly in the GAC</title>
		<para><application>Wolframe</application> does not accept local assemblies. In order to be addressable over
		the type library interface assemblies need to be put into the global assembly cache (GAC).
		Unfortunately this has to be repeated every time the assembly binary changes.
		There is no way around. For registration in the GAC you have to call the program
		<code>gacutil /if &lt;assemblypath&gt;</code> with your assembly path &lt;assemblypath&gt;
		as argument. Furthermore the command <code>gacutil</code> has to be called from
		administrator command line. Before calling <code>gacutil</code>, assemblies have to
		be strongly signed. We refer here to the MSDN documentation for how to sign an application.
		</para>
		</sect3>
	</sect2>

	<sect2>
	<title>Calling Global Wolframe Functions</title>
	<para>.NET functions calling globally defined <application>Wolframe</application> functions need to declare the processor
	provider interface as an additional parameter. The processor provider interface is defined as
	follows (example <application>C#</application>):
	<programlisting language='C#'>
	<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/dotnet_WolframeProcProviderInterface.cs" parse="text" />
	</programlisting>
	To use it we have to include the reference to the assembly <code>WolframeProcessorProvider.DLL</code>.
	</para>
	<para>
	The interface defined there has a method <code>call</code> taking 3 arguments: The name of the
	function to call, the object to pass as argument and the <code>Guid</code> of the object type
	to return. The returned object will be created with help of the registered <code>Guid</code>
	and can be casted to the type with this <code>Guid</code>.
	</para>
	<para>
	The following example shows the usage of a <code>Wolframe.ProcProvider</code> call.
	The method <code>GetUserObject</code> is declared as <application>Wolframe</application> function requiring the processor
	provider context as additional argument and taking one object of type <code>User</code> as
	argument named <code>usr</code>.
	The example function implementation redirects the call to the global <application>Wolframe</application> function
	named <code>GetAddress</code> returning an object of type <code>Address</code>
	(example <application>C#</application>):
	<programlisting language='C#'>
	<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/dotnet_WolframeProcProviderCall.cs" parse="text" />
	</programlisting>
	The objects involved in this example need no more tagging because the provider context and also
	structures (<code>struct</code>) need no additional mashalling tags.
	</para>
	</sect2>

	<sect2>
	<title>Configure .NET Modules</title>
	<para>
	<application>.NET</application> modules are grouped together in a configuration block that specifies the configuration
	of the Microsoft Common Language Runtime (CLR) used for <application>.NET</application> interop calls. The configuration
	block has the header <code>runtimeEnv dotNET</code> and configures the version of the 
	runtime loaded and the path where the typelibraries (.tlb) files can be found. 
	With the <code>assembly</code> definitions you declare the registered assemblies to load.
	<programlisting language='cfg'>
	<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/cfg_program_dotnet.conf" parse="text" />
	</programlisting>
	</para>
	</sect2>
</sect1>

