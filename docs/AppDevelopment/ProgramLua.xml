<sect1>
<title>Functions in Lua</title>
	<sect2>
	<title>Introduction</title>
	<para>You can write functions for the logic tier of <application>Wolframe</application> with <application>Lua</application>. <application>Lua</application> is a scripting language designed, implemented, and maintained
		at PUC-Rio in Brazil by Roberto Ierusalimschy, Waldemar Celes and Luiz Henrique de Figueiredo
		(see <ulink url="http://www.lua.org/authors.html">http://www.lua.org/authors.html</ulink>). A description of <application>Lua</application> is not provided here.
		For an introduction into programming with <application>Lua</application> see <ulink url="http://www.lua.org">http://www.lua.org</ulink>. The official manual which is also available as book
		is very good. <application>Wolframe</application> introduces some <application>Lua</application> interfaces to access input and output and to execute functions.
	</para>
	</sect2>

	<sect2>
	<title>Configuration</title>
	<para>For enabling <application>Lua</application> you have to declare the loading of the module 'mod_command_lua'
		in the main section of the server configuration file.
		<programlisting language='awk'>
		<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/cfg_command_lua.conf" parse="text" />
		</programlisting>
		Each <application>Lua</application> script referenced has to be declared in the <code>Processor</code>
		section of the configuration with <code>program &lt;sourcefile&gt;</code>.
		The script is recognized as <application>Lua</application> script by the file extension ".lua".
		Files without this extension cannot be loaded as <application>Lua</application> scripts.
		</para>
	</sect2>

	<sect2>
	<title>Declaring functions</title>
	<para>For <application>Lua</application> we do not have to declare anything in addition to the 
		<application>Lua</application> script. If you configure a <application>Lua</application>
		script as program, all global functions declared in this script are declared as global form
		functions. For avoiding name conflicts you should declare private functions
		of the script as <code>local</code>.
	</para>
	</sect2>

	<sect2>
	<title>Wolframe provider library</title>
	<para><application>Wolframe</application> lets you access objects of the global context through
		a library called <code>provider</code> offering the following functions:

		<table frame="all" width="100%">
			<title>Method</title>
			<tgroup cols="3">
			<thead>
				<row>
					<entry>Name</entry>
					<entry>Parameter</entry>
					<entry>Returns</entry>
				</row>
			</thead>
	
			<tbody>
				<row>
					<entry>form</entry>
					<entry>Name of the form</entry>
					<entry>An instance of the form</entry>
				</row>
				<row>
					<entry>type</entry>
					<entry>Type name and initializer list</entry>
					<entry>A constructor function to create a value instance of this type</entry>
				</row>
				<row>
					<entry>formfunction</entry>
					<entry>Name of the function</entry>
					<entry>Form function defined in a <application>Wolframe</application> program or module</entry>
				</row>
				<row>
					<entry>document</entry>
					<entry>Content string of the document to process</entry>
					<entry>Returns an object of type "document" that allows the processing of the contents passed as argument.
						See description of type "document"</entry>
				</row>
			</tbody>
			</tgroup>
		</table>
	</para>
	</sect2>

	<sect2>
	<title>Using atomic data types</title>
	<para><application>Wolframe</application> lets us extend the type system consisting 
		of Lua basic data types with our own. We can create atomic data types 
		defined in a module or in a DDL datatype definition program (.wnmp file).
		For this you call the <code>type</code> method of the provider with 
		the type name as first argument plus the type initializer argument 
		list as additional parameters.
		The function returns a constructor function that can be called 
		with the initialization value as argument to get a
		value instance of this type. The name of the type can refer to 
		one of the following:

		<table frame="all" width="100%">
			<title>List of Atomic Data Types</title>
			<tgroup cols="3">
			<colspec colnum="1" colwidth="1*"/>
			<colspec colnum="2" colwidth="2*"/>
			<colspec colnum="3" colwidth="2*"/>
			<thead>
				<row>
					<entry>Class</entry>
					<entry>Initializer Arguments</entry>
					<entry>Description</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>Custom data type</entry>
					<entry>Custom Type Parameters</entry>
					<entry>A custom data type defined in a module with arithmetic operators and methods</entry>
				</row>
				<row>
					<entry>Normalization function</entry>
					<entry>Dimension parameters</entry>
					<entry>A type defined as normalization function in a module</entry>
				</row>
				<row>
					<entry>DDL data type</entry>
					<entry>(no arguments)</entry>
					<entry>A normalizer defined as sequence of normalization functions in a .wnmp source file</entry>
				</row>
				<row>
					<entry>Data type 'bignumber'</entry>
					<entry>(no arguments)</entry>
					<entry>Arbitrary precision number type</entry>
				</row>
				<row>
					<entry>Data fype 'datetime'</entry>
					<entry>(no arguments)</entry>
					<entry>Data type representing date and time down to a granularity of microseconds</entry>
				</row>
			</tbody>
			</tgroup>
		</table>
		</para>

		<sect3>
		<title>Data type 'datetime'</title>
		<para>
			The data type 'datetime' is used as interface for date time values.
			<table frame="all" width="100%">
				<title>Methods of 'datetime'</title>
				<tgroup cols="3">
				<thead>
				<row>
					<entry>Method Name</entry>
					<entry>Arguments</entry>
					<entry>Description</entry>
				</row>
				</thead>
				<tbody>
				<row>
					<entry>&lt;constructor&gt;</entry>
					<entry>year, month, day, hour, minute, second ,millisecond, microsecond</entry>
					<entry>Creates a date and time value with a granularity down to microseconds</entry>
				</row>
				<row>
					<entry>&lt;constructor&gt;</entry>
					<entry>year, month, day, hour, minute, second ,millisecond</entry>
					<entry>Creates a date and time value with a granularity down to milliseconds</entry>
				</row>
				<row>
					<entry>&lt;constructor&gt;</entry>
					<entry>year, month, day, hour, minute, second</entry>
					<entry>Creates a date and time value</entry>
				</row>
				<row>
					<entry>&lt;constructor&gt;</entry>
					<entry>year, month, day</entry>
					<entry>Creates a date value</entry>
				</row>
				<row>
					<entry>year</entry>
					<entry>(no arguments)</entry>
					<entry>Return the value of the year</entry>
				</row>
				<row>
					<entry>month</entry>
					<entry>(no arguments)</entry>
					<entry>Return the value of the month (1..12)</entry>
				</row>
				<row>
					<entry>day</entry>
					<entry>(no arguments)</entry>
					<entry>Return the value of the day in the month (1..31)</entry>
				</row>
				<row>
					<entry>hour</entry>
					<entry>(no arguments)</entry>
					<entry>Return the value of the hour in the day (0..23)</entry>
				</row>
				<row>
					<entry>minute</entry>
					<entry>(no arguments)</entry>
					<entry>Return the value of the minute (0..59)</entry>
				</row>
				<row>
					<entry>second</entry>
					<entry>(no arguments)</entry>
					<entry>Return the value of the second (0..63 : 59 + leap seconds)</entry>
				</row>
				<row>
					<entry>millisecond</entry>
					<entry>(no arguments)</entry>
					<entry>Return the value of the millisecond (0..1023)</entry>
				</row>
				<row>
					<entry>microsecond</entry>
					<entry>(no arguments)</entry>
					<entry>Return the value of the microsecond (0..1023)</entry>
				</row>
				<row>
					<entry>__tostring</entry>
					<entry>(no arguments)</entry>
					<entry>Return the date as string in the format YYYYMMDD, YYYYMMDDhhmmss, YYYYMMDDhhmmssll or YYYYMMDDhhmmssllcc, depending on constructor used to create the date and time value.</entry>
				</row>
				</tbody>
				</tgroup>
			</table>
		</para>
		</sect3>

		<sect3>
		<title>Data Type 'bignumber'</title>
		<para>
			The data type 'bignumber' is used to reference fixed point BCD numbers with a precision of 32767 digits between -1E32767 and +1E32767.
			<table frame="all" width="100%">
				<title>Methods of 'datetime'</title>
				<tgroup cols="3">
				<thead>
				<row>
					<entry>Method name</entry>
					<entry>Arguments</entry>
					<entry>Description</entry>
				</row>
				</thead>
				<tbody>
				<row>
					<entry>&lt;constructor&gt;</entry>
					<entry>number value as string</entry>
					<entry>Creates a bignumber from its string representation</entry>
				</row>
				<row>
					<entry>&lt;constructor&gt;</entry>
					<entry>number value</entry>
					<entry>Creates a bignumber from a lua number value (double precision floating point number)</entry>
				</row>
				<row>
					<entry>precision</entry>
					<entry>(no arguments)</entry>
					<entry>Return the number of significant digits in the number</entry>
				</row>
				<row>
					<entry>scale</entry>
					<entry>(no arguments)</entry>
					<entry>Return the number of fractional digits (may be negative, may be bigger than precision)</entry>
				</row>
				<row>
					<entry>digits</entry>
					<entry>(no arguments)</entry>
					<entry>Return the significant digits in the number</entry>
				</row>
				<row>
					<entry>tonumber</entry>
					<entry>(no arguments)</entry>
					<entry>Return the number as lua number value (double precision floating point number) with possible lost of accurancy</entry>
				</row>
				<row>
					<entry>__tostring</entry>
					<entry>(no arguments)</entry>
					<entry>Return the big number value as string (not normalized).</entry>
				</row>
				</tbody>
				</tgroup>
			</table>
		</para>
		</sect3>
	</sect2>

	<sect2>
	<title>Filter interface iterators</title>
	<para>Lua provides an interface to the iterators internally used to couple 
		objects and functions. They are accessible as iterator function closure
		in <application>Lua</application>. 
		The look similar to <application>Lua</application> iterators but are not.
		You should not mix them with the standard <application>Lua</application>
		iterators though the semantic is similar. Filter interface iterators do not
		return nodes of the tree as subtree objects but only the node data in the
		order of a pre-order traversal. You can recursively iterate on the tree
		and build the object during traversal if you want.
		The returned elements of the Filter interface iterators are tuples 
		with the following meaning:
	</para>
	<table frame="all" width="100%">
		<title>Filter interface iterator elements</title>
		<tgroup cols="3">
		<thead>
			<row>
				<entry>Tuple First Element</entry>
				<entry>Tuple Second Element</entry>
				<entry>Description</entry>
			</row>
		</thead>

		<tbody>
			<row>
				<entry>NIL/false</entry>
				<entry>string/number</entry>
				<entry>Open (tag is second element)</entry>
			</row>
			<row>
				<entry>NIL/false</entry>
				<entry>NIL/false</entry>
				<entry>Close</entry>
			</row>
			<row>
				<entry>Any non NIL/false</entry>
				<entry>string/number</entry>
				<entry>Attribute assignment (value is first, tag is second element)</entry>
			</row>
			<row>
				<entry>string/number</entry>
				<entry>NIL/false</entry>
				<entry>Content value (value is first element)</entry>
			</row>
		</tbody>
		</tgroup>
	</table>
	</sect2>

	<sect2>
	<title>Iterator library</title>
	<para><application>Wolframe</application> lets you access filter interface
		iterators through a library called <code>iterator</code> 
		offering the following functions:

		<table frame="all" width="100%">
			<title>Method</title>
			<tgroup cols="3">
			<thead>
				<row>
					<entry>Name</entry>
					<entry>Parameter</entry>
					<entry>Returns</entry>
				</row>
			</thead>
	
			<tbody>
				<row>
					<entry>scope</entry>
					<entry>serialization iterator (*)</entry>
					<entry>An iterator restricted on the subnodes of the last visited node (**)</entry>
				</row>
			</tbody>
			</tgroup>
		</table>
	</para>
	<para>
		(*) See section "serialization iterator"
	</para>
	<para>
		(**) If iterator.scope is called, all elements of the returned iterator has to be visited in order to continue 
		iteration with the origin iterator on which iterator.scope was called.
	</para>
	</sect2>

	<sect2>
	<title>Global objects</title>
	<para>Besides the provider library <application>Wolframe</application> defines the following objects global in the script execution context:
		<simplelist type="horiz" columns="2">
		<member>Name</member><member>Description</member>
		<member>logger</member><member>object with methods for logging or debugging</member>
		</simplelist>
	</para>
	</sect2>

	<sect2>
	<title>Using forms</title>
	<para>The provider function <code>provider.form( )</code> with the name of the form as string as 
		parameter returns an empty instance of a form. It takes the name of 
		the form as string argument. If you for example have a form configured 
		called "employee" and you want to create an employee object from 
		a <application>Lua</application> table, you call
			<programlisting language='lua'>
			<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/lua_usage_form_1a.lua" parse="text" />
			</programlisting>
		The first line creates the data form object.
		The second line fills the data into the data form object.
		</para>
		<para>

		The form method <code>fill</code> takes a second optional parameter. Passing "strict" as
		second parameter enforces a strict validation of the input against the form, meaning that
		attributes are checked to be attributes (when using XML serialization) and non optional elements are checked to be initialized.
		Passing "complete" as second parameter forces non optional elements to be checked for initialization
		but does not distinguish between attributes and content values. "relaxed" is the default and
		checks only the existence of filled-in values in the form.
		</para>
		<para>
		Given the following validation form in simple form DDL syntax (see chapter "Forms"):
			<programlisting language='text'>
			<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/employee.simpleform" parse="text" />
			</programlisting>

		the call of <code>fill</code> in the following piece of code will raise an error because some elements
		of the form ('ID' and 'name') are missing in the input:
			<programlisting language='lua'>
			<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/lua_usage_form_1b.lua" parse="text" />
			</programlisting>
		</para>
		<para>
		To access the data in a form there are two form methods available.
		<code>get()</code> returns a filter interface iterator on the form data.
		There is also a method <code>value()</code> that returns the form data as
		<application>Lua</application> data structure
		(a <application>Lua</application> table or atomic value).
		</para>
	</sect2>
	<sect2>
	<title>Form functions</title>
	<para>
		For calling transactions or built-in functions loaded as modules the <application>Lua</application> layer defines the
		concept of functions. The provider function <code>provider.formfunction</code> with the name of the function
		as argument returns a <application>Lua</application> function. This function takes a table or a filter interface iterator as argument
		and returns a data form structure. The data in the returned form data structure can be
		accessed with <code>get()</code> that returns a filter interface iterator on the content 
		and <code>value()</code> that returns a <application>Lua</application> table or 
		atomic value.
		</para>
		<para>
		If you for example have a transaction called "insertEmployee" defined in a transaction description program
		file declared in the configuration called "insertEmployee" and you want to call it with the 'employee'
		object defined above as input, you do
			<programlisting language='lua'>
			<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/lua_usage_transaction_1.lua" parse="text" />
			</programlisting>
		</para>
		<para>
		The first line creates the function called "insertEmployee" as <application>Lua</application> function.
		The second calls the transaction, the third creates a <application>Lua</application> table out of the result
		and the fourth selects and prints the "id" element in the table.
	</para>
	</sect2>
	
	<sect2>
	<title>List of <application>Lua</application> objects</title>
	<para>This is a list of all objects and functions declared by <application>Wolframe</application>:</para>

		<table frame="all" width="100%">
			<title>Data forms declared by DDL</title>
			<tgroup cols="4">
			<thead>
				<row>
					<entry>Method Name</entry>
					<entry>Arguments</entry>
					<entry>Returns</entry>
					<entry>Description</entry>
				</row>
			</thead>

			<tbody>
				<row>
					<entry>get</entry>
					<entry></entry>
					<entry>filter interface iterator (*)</entry>
					<entry>Returns a filter interface iterator on the form elements</entry>
				</row>
				<row>
					<entry>value</entry>
					<entry></entry>
					<entry><application>Lua</application> table</entry>
					<entry>Returns the contents of the data form as <application>Lua</application> table or atomic value</entry>
				</row>
				<row>
					<entry>__tostring</entry>
					<entry></entry>
					<entry>string</entry>
					<entry>String representation of form for debugging</entry>
				</row>
				<row>
					<entry>name</entry>
					<entry></entry>
					<entry>string</entry>
					<entry>Returns the global name of the form.
					</entry>
				</row>
				<row>
					<entry>fill</entry>
					<entry><application>Lua</application> table or 
					filter interface iterator (*), optional validation mode (**)</entry>
					<entry>the filled form (for concatenation)</entry>
					<entry>Validates input and fills the input data into the form.</entry>
				</row>
			</tbody>
			</tgroup>
		</table>
		<para>
			(*) See section "filter interface iterator"
		</para>
		<para>
			(**) "strict" (full validation), "complete" (only check for all non optional elements initialization) or "relaxed" (no validation except matching of input to elements)
		</para>

		<table frame="all" width="100%">
			<title>Data forms returned by functions</title>
			<tgroup cols="3">
			<thead>
				<row>
					<entry>Method Name</entry>
					<entry>Returns</entry>
					<entry>Description</entry>
				</row>
			</thead>

			<tbody>
				<row>
					<entry>get</entry>
					<entry>filter interface iterator (*)</entry>
					<entry>Returns a filter interface iterator on the form elements</entry>
				</row>
				<row>
					<entry>value</entry>
					<entry><application>Lua</application> table or atomic value</entry>
					<entry>Returns the contents of the data form as <application>Lua</application> table or atomic value</entry>
				</row>
				<row>
					<entry>__tostring</entry>
					<entry>string</entry>
					<entry>String representation of form for debugging</entry>
				</row>
			</tbody>
			</tgroup>
		</table>
		<para>
			(*) See section "filter interface iterator"
		</para>

		<table>
		<title>Document</title>
			<tgroup cols="3">
			<thead>
				<row>
					<entry>Method Name</entry>
					<entry>Arguments</entry>
					<entry>Description</entry>
				</row>
			</thead>
	
			<tbody>
				<row>
					<entry>docformat</entry>
					<entry> - </entry>
					<entry>Returns the format of the document {'XML','JSON',etc..}</entry>
				</row>
				<row>
					<entry>as</entry>
					<entry>filter and/or document type table</entry>
					<entry>Attaches a filter to the document to be used for processing</entry>
				</row>
				<row>
					<entry>doctype</entry>
					<entry> - </entry>
					<entry>Returns the document type of the content. For retrieving the document type you have first to define a filter.</entry>
				</row>
				<row>
					<entry>metadata</entry>
					<entry> - </entry>
					<entry>Returns the meta data structure of the content. For retrieving the document meta data you have first to define a filter.</entry>
				</row>
				<row>
					<entry>value</entry>
					<entry> - </entry>
					<entry>Returns the contents of the document as <application>Lua</application> table or atomic value. The method 'table' does the same but is considered to be deprecated.</entry>
				</row>
				<row>
					<entry>table</entry>
					<entry> - </entry>
					<entry>Deprecated. Does return the same as the method 'value'</entry>
				</row>
				<row>
					<entry>form</entry>
					<entry> - </entry>
					<entry>Returns the contents of the document as filled form instace</entry>
				</row>
				<row>
					<entry>get</entry>
					<entry> - </entry>
					<entry>Returns a filter interface iterator (*) on the form elements</entry>
				</row>
			</tbody>
			</tgroup>

		</table>
		<para>
			(*) See section "filter interface iterator"
		</para>

		<table frame="all" width="100%">
			<title>Logger functions</title>
			<tgroup cols="3">
			<thead>
				<row>
					<entry>Method Name</entry>
					<entry>Arguments</entry>
					<entry>Description</entry>
				</row>
			</thead>

			<tbody>
				<row>
					<entry>logger.printc</entry>
					<entry>arbitrary list of arguments</entry>
					<entry>Print arguments to standard console output</entry>
				</row>
				<row>
					<entry>logger.print</entry>
					<entry>loglevel (string) plus arbitrary list of arguments</entry>
					<entry>log argument list with defined log level</entry>
				</row>
			</tbody>
			</tgroup>
		</table>


		<table frame="all" width="100%">
			<title>Global functions</title>
			<tgroup cols="3">
			<thead>
				<row>
					<entry>Function Name</entry>
					<entry>Arguments</entry>
					<entry>Description</entry>
				</row>
			</thead>

			<tbody>
				<row>
					<entry>provider.form</entry>
					<entry>name of form (string)</entry>
					<entry>Returns an empty data form object of the given type</entry>
				</row>
				<row>
					<entry>provider.formfunction</entry>
					<entry>name of function (string)</entry>
					<entry>Returns a lua function to execute the <application>Wolframe</application> function specified by name</entry>
				</row>
				<row>
					<entry>provider.type</entry>
					<entry>name of data type (string)</entry>
					<entry>Returns a constructor function for the data type given by name. The name specifies either a custom data type or a normalization function as used in forms or one of the additional userdata types 'datetime' or 'bignumber'.</entry>
				</row>
				<row>
					<entry>provider.document</entry>
					<entry>Content string of the document to process</entry>
					<entry>Returns an object of type "document" that allows the processing of the contents passed as argument.
						See description of type "document"</entry>
				</row>
			</tbody>
			</tgroup>
		</table>
		<para>
			(*) See section "filter interface iterator "
		</para>
		<para>
			(**) The filter interface iterator  of a defined scope must be consumed completely before consuming anything of the parent iterator.
			Otherwise it may lead to unexpected results because they share some part of the iterator state.
		</para>
	</sect2>
</sect1>

