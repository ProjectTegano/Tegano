<sect2>
<title>The standard command handler</title>
	<sect3>
	<title>Introduction</title>
	<para>
		The <application>Wolframe</application> standard command handler is called <glossterm>directmap</glossterm> and named so
		in the configuration because it only declares a redirection of the commands to functions based on 
		the document type and the command identifier specified by the client in the request.
	</para>
	<para>
		The declarations of the <application>Wolframe</application> Standard Command Handler (<glossterm>directmap</glossterm>)
		are specified in a program source file with the extension '.dmap' that is declared in the configuration.
	</para>
	</sect3>
	<sect3>
		<title>Example configuration</title>
		<para>The following configuration declares a program <code>example.tdl</code> written in the 
		transaction definition language (<acronym>TDL</acronym>) to contain the function
		declarations for the provider that can be called by the command handler. It declares the database with
		name <application>pgdb</application> to be used as the database for transactions. It loads a description 
		<code>example.dmap</code> that will declare the mappings of commands to the filters used and functions 
		called. It specifies the filter with name <application>libxml2</application> to be used for documents of format XML and
		the filter with name <application>cjson</application> to be used for documents of format JSON, if
		not specified else in <code>example.dmap</code>.

		<programlisting language='sql'>
		<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/standardCommandHandler.conf" parse="text" />
		</programlisting>
		</para>
	</sect3>

	<sect3>
		<title>Example command description</title>
		<para>The following source example could be one of the <code>example.dmap</code> in the configuration example 
		introduced above. It defines two commands. The first one links a command "insert" with document type
		"Customer" as content to a transaction function "doInsertCustomer". The content is validated 
		automatically against a form named "Customer" if not explicitly defined else. 
		The command has no result except that it succeeds or fails. The second example command links a 
		command "get" with a document type "Employee" to a function "doSelectEmployee". 
		The input is not validated and the transaction output is validated and mapped through the 
		form "Employee".
	</para>
	<para>
		<programlisting language='text'>
		<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/first_example.directmap" parse="text" />
		</programlisting>
	</para>
	</sect3>

	<sect3>
	<title>Command description language</title>
	<para>
		A command map description file like our example shown consists of instructions started with 
		<code>COMMAND</code> and terminated by semicolon ';'. The first argument after <code>COMMAND</code> is the name of the
		command followed by the name of the document type of the input document. The name of the command
		is optional. If not specified the first argument after <code>COMMAND</code> names the input document type.
	</para>
		<sect4>
			<title>Keywords</title>
			<para>
			Conflicts with keywords and names are solved by using strings instead
			of identifiers. The standard command handler description language has 
			the following keywords:
			<simplelist type="horiz" columns="1">
			<member>COMMAND</member>
			<member>CALL</member>
			<member>RETURN</member>
			<member>SKIP</member>
			<member>FILTER</member>
			<member>INPUT</member>
			<member>OUTPUT</member>
			<member>AUTHORIZE</member>
			</simplelist>
			</para>
		</sect4>
		<sect4>
			<title>Simple document map</title>
			<para>
				The following example shows the simplest possible declaration. It states that documents with the
				document type "Document" are forwarded to a function with the same name "Document".
				<programlisting language='text'>
				<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/doctype_only.directmap" parse="text" />
				</programlisting>
			</para>
		</sect4>
		<sect4>
			<title>Command with action prefix</title>
			<para>
				The next example adds a action name to the declaration. The implicit name of the function called is
				insertDocument:
				<programlisting language='text'>
				<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/command_only.directmap" parse="text" />
				</programlisting>
			</para>
		</sect4>
		<sect4>
			<title>Explicit function name declaration</title>
			<para>
				For declaring the function called explicitly like for example a function <code>doInsertDocument</code> we need to declare it with <code>CALL &lt;functionname&gt;</code>:
				<programlisting language='text'>
				<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/command_call.directmap" parse="text" />
				</programlisting>
			</para>
		</sect4>
		<sect4>
			<title>Returned document declaration</title>
			<para>
				The document type returned is specified with <code>RETURN &lt;doctype&gt;</code>:
				<programlisting language='text'>
				<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/command_only_return.directmap" parse="text" />
				</programlisting>
				or with explicit naming of a function called
				<programlisting language='text'>
				<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/command_call_return.directmap" parse="text" />
				</programlisting>
			</para>
		</sect4>
		<sect4>
			<title>Returned document meta data</title>
			<para>We can define additional document meta data or overload existing
			document meta or inherited document meta from input or a referenced 
			form in the output.
			This is done with a comma separated list of attribute assignments in
			curly brackets after the document type name like:
			<programlisting language='text'>
			<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/command_call_return_with_metadata.directmap" parse="text" />
			</programlisting>
			</para>
		</sect4>
		<sect4>
			<title>Skipping the document validation</title>
			<para>
				If you want to skip the input document validation, either because you are dealing
				with legacy software where a strict definition of a schema is not possible or
				because the function called has strict typing and validates the input on its own (.NET,C++),
				then you can add a declaration <code>SKIP</code>:
				<programlisting language='text'>
				<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/command_skip_call_return.directmap" parse="text" />
				</programlisting>
				The same you can specify for the output with a <code>SKIP</code> 
				following the <code>RETURN</code> of the output declaration:
				<programlisting language='text'>
				<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/command_skip_return_skip.directmap" parse="text" />
				</programlisting>
				For being able to skip validation of output of a processed XML 
				we have additionally to specify the root element as document
				meta data. This defintion can be part of a form declaration
				(not used for validation) or it can be specified after 
				the <code>RETURN SKIP</code> and the document 
				type identifier in a standard command handler instruction.
				The following example shows such a definition with 'list' 
				as root element defined. Such a command definition makes sense
				for strongly typed languages like .NET or native C++ where data 
				validation can be delagated completely to the strongly typed 
				structure definition of the called function.
				<programlisting language='text'>
				<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/command_skip_return_skip_with_rootelem.directmap" parse="text" />
				</programlisting>
			</para>

		</sect4>
		<sect4>
			<title>Return a standalone document</title>
			<para>
				If we want to return a document as standalone 
				(standalone="yes" in the header in case of XML) without validation,
				we have to declare this with explicit document meta data as
				 <code>RETURN SKIP {standalone='yes',root='root'}</code>.
				<programlisting language='text'>
				<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/command_return_standalone.directmap" parse="text" />
				</programlisting>
			</para>
		</sect4>
		<sect4>
			<title>Explicit filter definitions for a command</title>
			<para>
				For most processing it's enough to declare the standard filters in the configuration of the command handler.
				But in certain cases we want to declare a filter explicitly for a command, for
				example to preprocess a certain document type with an XSLT filter. Explicitly declared
				filters always refer to a document format and documents of other formats have to be converted
				first or they cannot be preprocessed. The conversions mechanisms we will explain in detail
				later. Explicit filter declarations are done with
				<itemizedlist>
				<listitem><para><code>FILTER &lt;name&gt;</code> or</para></listitem>
				<listitem><para><code>FILTER INPUT &lt;inputfiltername&gt;</code> or</para></listitem>
				<listitem><para><code>FILTER OUTPUT &lt;outputfiltername&gt;</code> or</para></listitem>
				<listitem><para><code>FILTER INPUT &lt;inputfiltername&gt; OUTPUT &lt;outputfiltername&gt;</code></para></listitem>
				</itemizedlist>
				Here is an example:
				<programlisting language='text'>
				<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/command_filter_call_return.directmap" parse="text" />
				</programlisting>
			</para>
		</sect4>
		<sect4>
			<title>Authorization checks</title>
			<para>
				We can tag a command to be allowed only after an authorization check.
				The check denies command execution with an error if the login of the
				user does not allow the execution of the command. The call is the same
				as in TDL for example.
				Authorization checks are triggered by the AUTHORIZE attribute with
				one or two arguments as follows:
				<itemizedlist>
				<listitem><para><code>AUTHORIZE &lt;authfunc&gt;</code> or</para></listitem>
				<listitem><para><code>AUTHORIZE &lt;authfunc&gt; &lt;resource&gt;</code></para></listitem>
				</itemizedlist>
			</para>
		</sect4>
		<sect4>
			<title>Using brackets</title>
			<para>
				For better readability you can use optional '(' ')' brackets on 
				the arguments of the command declaration:
				<programlisting language='text'>
				<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/AppDevelop/command_with_arg_brackets.directmap" parse="text" />
				</programlisting>
			</para>
		</sect4>

		<sect4>
		<title>Overview</title>
		<para>Each command declaration has as already explained the form
		<itemizedlist>
		<listitem><para><code>COMMAND &lt;doctype&gt; [OPTIONS] ;</code> or</para></listitem>
		<listitem><para><code>COMMAND &lt;action&gt; &lt;doctype&gt; [OPTIONS] ;</code></para></listitem>
		</itemizedlist>
		The following table shows an overview of the elements that can be used in the <code>[OPTIONS]</code> part of the command:

		<table frame="all" width="80%">
			<title>Options</title>
			<tgroup cols="3">
			<thead>
				<row>
					<entry>Keywords</entry>
					<entry>Arguments</entry>
					<entry>Description</entry>
				</row>
			</thead>

			<tbody>
				<row>
					<entry>CALL</entry>
					<entry>Function Name</entry>
					<entry>Names the function to be called for processing the request</entry>
				</row>
				<row>
					<entry>RETURN</entry>
					<entry>Document Type</entry>
					<entry>Specifies the type of the document returned and forces validation of the output</entry>
				</row>
				<row>
					<entry>RETURN SKIP</entry>
					<entry>Document Type</entry>
					<entry>Specifies the type of the document returned but skips validation of the output</entry>
				</row>
				<row>
					<entry>SKIP</entry>
					<entry>(no arguments)</entry>
					<entry>Specifies the input document validation to be skipped</entry>
				</row>
				<row>
					<entry>FILTER INPUT</entry>
					<entry>Filter Name</entry>
					<entry>Specifies that the filter &lt;Name&gt; should be used as input filter</entry>
				</row>
				<row>
					<entry>FILTER OUTPUT</entry>
					<entry>Filter Name</entry>
					<entry>Specifies that the filter &lt;Name&gt; should be used as output filter</entry>
				</row>
				<row>
					<entry>FILTER</entry>
					<entry>Filter Name</entry>
					<entry>Specifies that the filter &lt;Name&gt; should be used both as input and output filter</entry>
				</row>
				<row>
					<entry>AUTHORIZE</entry>
					<entry>func res</entry>
					<entry>Specifies that the function &lt;func&gt; should be 
					called with the resource &lt;res&gt; to check if the user is
					allowed to execute the command.</entry>
				</row>
			</tbody>
			</tgroup>
		</table>

		</para>
		</sect4>
	</sect3>
</sect2>


