1) easy use, should look like typical standard out in the language, so
   C -> fprintf-like
   C++ -> cout:: operator << like
2) POSIX and Windows
3) type-safe
4) thread-safe
5) efficiency
6) runtime-configurability

-> compile time logging switch not really so important
-> no extensibility (we don't build a generic logging library, we want to use one, actually!)
-> no localization

LINKS:

http://stackoverflow.com/questions/696321/best-logging-framework-for-native-c

With templates (compile time optimized logging, not what we want really, but has a
good requirement list):
http://www.drdobbs.com/article/printableArticle.jhtml;
jsessionid=LS1BWHZXYVJZHQE1GHPCKHWATMY32JVN?articleId=225700666&dept_url=/cpp/

A little bit too simple:
http://accu.org/index.php/journals/1304

boost-log:
Too big, system requirements, not part of boost (ever?)

too Java-ish:
http://clp.sourceforge.net/
log4xxx

no wchar support:
http://code.google.com/p/google-glog/source/checkout

TODO:
http://www.pantheios.org/downloads.html
http://axter.com/ezlogger/classes.htm
http://www.drdobbs.com/cpp/201804215
