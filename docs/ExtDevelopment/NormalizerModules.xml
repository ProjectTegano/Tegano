<chapter>
	<title>Normalizer Modules</title>
	<para>In this chapter we introduce how to write your own normalizer functions and thus define your own 
	DLL form data types.
	</para>

	<sect1>
	<title>Normalizer Interface</title>
	<para>
	A normalize function is defined as interface in order to be able to define it as object with data.
	This is because normalizer functions can be parametrized. For example to express the normalize function domain.
	The following listing shows the interface definition:
	</para>
	<programlisting language='C++'>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/ExtDevelopment/normalizeFunction.hpp" parse="text" />
	</programlisting>
	
	<para>
	The object is created by a function type (here with the example function name <code>CreateNormalizeFunction</code>) with the following interface
	<programlisting language='C++'>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/ExtDevelopment/normalizeFunctionConstructor.hpp" parse="text" />
	</programlisting>
	The resource handle parameter is the module singleton object instance that is declared as class in the 
	module building blocks (see following section). The argument (<code>arg</code>) is a string that has to 
	be parsed by the normalize function constructor function. What the function gets as argument is the string 
	declared as argument string in '(' brackets ')' when the function is referenced in a 
	<code>.wnmp</code> file (type normalization declaration file, see section "Data Types in DDLs" in 
	the chapter "Forms" of the "Application Development Manual").
	</para>
	</sect1>

	<sect1>
	<title>Module Building blocks</title>
	<para>
	When you include "appdevel/normalizeModuleMacros.hpp" or simply "appDevel.hpp" you get the building
	blocks declared to build a normalization module. These building blocks will be exmplained in this section.
	</para>
	<para>
	The module declaration section starts with the macro call
	<programlisting language='C++'>
NORMALIZER_MODULE(namespace,description)
	</programlisting>
	that has two strings as arguments. The first one is the name of the module as refered to in a 
	type normalization declaration file (first identifier before the ':'). The second string is
	a module description without any functional meaning for the application but for identification
	of the module by humans. Alternatively you can use the macro <code>NORMALIZER_MODULE_WITH_RESOURCE</code>
	that does the same but has additionally a third parameter, the class name of the resource object
	shared by all normalization functions of this module.
	</para>
	<para>
	What follows are one or more declarations without any separator (comma ',' or semicolon ';')
	of the form
	<programlisting language='C++'>
NORMALIZER_FUNCTION(name,constructor)
	</programlisting>
	where <code>name</code> is the name of the function within the module namespace (declared as
	first parameter of <code>NORMALIZER_MODULE</code>) as string.
	The second argument is the normalizeFunction object constructor function (without any indirection
	address marker '&amp;' !).
	</para>
	<para>
	The module declaration ends with an end marker that closes the module declaration.
	<programlisting language='C++'>
NORMALIZER_MODULE_END
	</programlisting>
	</para>
	</sect1>

	<sect1>
	<title>Building the Module</title>
	<para>For building the module you need to reference the wolframe core library (-lwolframe), that's all.
	You will find example makefiles in the examples of the project. But you are free to use your own build
	mechanism.
	</para>
	</sect1>

	<sect1>
	<title>Examples</title>
		<sect2><title>Example without resources</title>
		<para>As first example we show a module that implements 2 normalization functions <code>Int</code> 
		and <code>Float</code> without a global resource class. <code>Int</code> converts a value to an
		64 bit integer or throws an exception, if this is not possible. <code>Float</code> converts a value 
		to a double presicion floating point number or throws an exception, if this is not possible. 

	<programlisting language='C++'>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/ExtDevelopment/normalizeExampleWithoutResources.cpp" parse="text" />
	</programlisting>
		</para>
		</sect2>

		<sect2><title>Example with resources</title>
		<para>The second example show one of the functions in the example above (<code>Int</code>) but 
		declares to use resources. The resource object is not really used, but you see in the example 
		how it gets bound to the function that uses it.

	<programlisting language='C++'>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/ExtDevelopment/normalizeExampleWithResources.cpp" parse="text" />
	</programlisting>
		</para>
		</sect2>
	</sect1>

</chapter>
