<sect2>
	<title>Define Normalization Functions (Normalizers)</title>
	<para>In this chapter we introduce how to declare a normalizer function in a module 
	for defining your own DLL form data types. First we introduce the data structures you
	have to know to implement normalizer functions and then we will show the module building
	blocks to declare a normalizer function in a module.
	</para>

	<sect3>
	<title>Normalizer Interface</title>
	<para>
	A normalize function is defined as interface in order to be able to define it as object with data.
	This is because normalizer functions can be parametrized. For example to express the normalize function domain.
	The following listing shows the interface definition:
	</para>
	<programlisting language='C++'>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/ExtDevelopment/normalizeFunction.hpp" parse="text" />
	</programlisting>
	
	<para>
	The object is created by a function type (here with the example function name <code>CreateNormalizeFunction</code>) with the following interface
	<programlisting language='C++'>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/ExtDevelopment/normalizeFunctionConstructor.hpp" parse="text" />
	</programlisting>
	The resource handle parameter (<code>reshnd</code>) is the module singleton object instance that is 
	declared as class in the module building blocks (see following section). The argument (<code>arg</code>) 
	is a list of variant type arguments that parametrize the function. What the function 
	gets as arguments are the comma separated list of parameters in '(' brackets ')' when the function 
	is referenced in a <code>.wnmp</code> file (type normalization declaration file, see section 
	"Data Types in DDLs" in the chapter "Forms" of the "Application Development Manual")
	or constructed with the provider.type method in a script.
	</para>
	</sect3>

	<sect3>
	<title>Building Blocks</title>
	<para>
	When you include "appdevel/normalizeModuleMacros.hpp" or simply "appDevel.hpp" you get the building
	blocks declared to build a normalizer function in a module. These building blocks will be exmplained in this section.
	</para>

	<sect4>
	<title>Declaring a resource singleton object</title>
	<para>
	Some normalizer functions share resource object declared only once as a singleton in this module.
	Such a resource class is defined as a class derived from <code>types::NormalizeResourceHandle</code>
	with an empty constructor. When we have declared this resource signleton class we can include 
	it in the module before any normalizer referencing it as
	</para>
	<programlisting language='C++'>
    WF_NORMALIZER_RESOURCE( ResourceClass )
	</programlisting>
	<para>with <code>ResourceClass</code> identifying the module singleton resource class and object.
	</para>
	</sect4>

	<sect4>
	<title>Declaring a normalizer not using any resource</title>
	<para>The following declaration shows a declaration of a simple normalizer function.
	</para>
	<programlisting language='C++'>
    WF_NORMALIZER_FUNCTION(name,constructor)
	</programlisting>
	<para>where name is the identifier string of the function in the system and constructor a
	function with the signature of the <code>CreateNormalizeFunction</code> shown in the
	section 'Normalize Interface' above.
	</para>
	</sect4>

	<sect4>
	<title>Declaring a normalizer using a resource</title>
	<para>The following declaration shows a declaration of a normalizer function using a resource
	module singleton object defined as class 'ResourceClass' and declared with the
	<code>WF_NORMALIZER_RESOURCE</code> macro (section 'Declaring a resource singleton object').
	</para>
	<programlisting language='C++'>
    WF_NORMALIZER_WITH_RESOURCE(name,constructor,ResourceClass)
	</programlisting>
	<para>
	The parameter <code>name</code> and <code>constructor</code> are defined as in the
	<code>WF_NORMALIZER_FUNCTION</code> macro.
	</para>
	</sect4>
	</sect3>

	<sect3>
	<title>Examples</title>
		<sect4>
		<title>Example without resources</title>
		<para>As first example we show a module that implements 2 normalization functions <code>Int</code> 
		and <code>Float</code> without a global resource class. <code>Int</code> converts a value to an
		64 bit integer or throws an exception, if this is not possible. <code>Float</code> converts a value 
		to a double presicion floating point number or throws an exception, if this is not possible. 

	<programlisting language='C++'>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/ExtDevelopment/normalizeExampleWithoutResources.cpp" parse="text" />
	</programlisting>
		</para>
		</sect4>

		<sect4><title>Example with resources</title>
		<para>The second example show one of the functions in the example above (<code>Int</code>) but 
		declares to use resources. The resource object is not really used, but you see in the example 
		how it gets bound to the function that uses it.

	<programlisting language='C++'>
<xi:include  xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/ExtDevelopment/normalizeExampleWithResources.cpp" parse="text" />
	</programlisting>
		</para>
		</sect4>
	</sect3>
</sect2>
