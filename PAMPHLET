

== Data Formats Processed
	The data formats processed are extensible by loadable modules. There are standard modules
	defined to process XML and JSON. Modules for other widespread data formats are planned,
	questions for not so widespread data formats can be asked for.
	Unlike most application servers do, Wolframe does not delegate the parsing of content to
	the functions doing the processing of the request. The marshalling and demarshalling
	(serialization/deserialization) of data is handled as an aspect on its own.
	We define data formats, data validation and normalization for all language bindings
	attached. We neither rely on the capability of a programming language to enforce our
	rules, nor do we implement our rules for all languages used for processing.

== Integration capabilities of web services
	Web services had a big success also because they allow to integrate existing software, even legacy systems
	- Solving problems isolated and finishing projects

== Interconnectivity as IDL based systems
	Any language binding is able to call any other function written in any other language
	where a language binding exists for Wolframe. But on contrary to IDL based systems, 
	Wolframe does not need a global interface description for that.
	Each function has internally the same interface defined as an iterator on the input
	and an iterator on the output plus a contract to level out language differences. 
	This loosely coupled mechanism of communication enables for example a .NET method 
	to call a Lua function or a Python function to call a function written in C++ 
	and so on. The internal interface with an iterator and input and output is not 
	visible to the outside. You specify your functions in the native way of the 
	programming language used.
	The mapping of the internal interface to the native data structures of the 
	programming language used happens behind the scenes. 
	In contrary to other systems offering this level of interconnectivity there 
	is no code generation involved in Wolframe at all.

== Separation of aspects
	Wolframe enforces the separation of the implementation into different aspects.
	Separation of different aspects is important for a succesful project management because
	otherwise much more has to be done on the process control level to prevent developers to care
	about what they must not or should not care about. The best thing is to have natural borders
	to separate tasks according knownledge, competence, user roles or rights.
	Wolframe separates
		- the handling of document formats and types
		- the structure of documents processed and their validation
		- the definition of atomic data types and the normalization of data
		- the configuration of authorization to call certain functions or database transactions
		- the configuration of auditing methods for groups of functions identified by name
		- database schema and transaction definitions
		- scripting for implementing functions
	For implementing these different aspects you can either choose an universal programming language
	or you can use a universal programming language.

== Domain specific languages
	For implementing one of the aspects mentioned above, a
	Wolframe does not force you to use a specific language for an aspect.
	Language bindings are loaded by modules and therefore replaceable.


== Implementation effort for new core components








