TOPDIR = ..

SUBDIRS = \
	libwolframe \
	libwolframe_serialize \
	libwolframe_langbind \
	libwolframe_functions \
	modules

!INCLUDE $(TOPDIR)\makefiles\nmake\platform.mk

INCLUDE_CXXFLAGS = \
	/D_WIN32_WINNT=0x504

INCLUDE_DIRS = \
	/I. \
	/I$(TOPDIR)\include \
	/I$(TOPDIR) \
	/I"$(BOOST_INCLUDE_DIR)"

INCLUDE_LDFLAGS = \
	$(BOOST_LDFLAGS)

INCLUDE_LIBS = \
	$(TOPDIR)\src\libwolframe\wolframe.lib \
	$(TOPDIR)\src\libwolframe_serialize\wolframe_serialize.lib \
	$(TOPDIR)\src\libwolframe_langbind\wolframe_langbind.lib \
	advapi32.lib

# openssl
!IFDEF WITH_SSL

INCLUDE_DIRS = \
	$(INCLUDE_DIRS)	/I"$(OPENSSL_DIR)\include"

INCLUDE_CXXFLAGS = \
	$(INCLUDE_CXXFLAGS) /DWITH_SSL

INCLUDE_LDFLAGS = \
	$(INCLUDE_LDFLAGS) /LIBPATH:"$(OPENSSL_DIR)\lib"

INCLUDE_LIBS = \
	$(INCLUDE_LIBS) $(OPENSSL_LIBS)

!ENDIF


LOCAL_STATIC_LIB = \
	wolframe.lib

LOCAL_STATIC_LIB_OBJS = \
	version.obj \
	wolframedCommandLine.obj \
	wolfilterCommandLine.obj \
	loadModules.obj \
	serviceConfig.obj \
	serviceBanner.obj \
	appConfig.obj \
	langbind_iostreamfilter.obj \
	cmdbind_lineCommandHandler.obj \
	cmdbind_execCommandHandler.obj \
	cmdbind_ioFilterCommandHandler.obj \
	cmdbind_doctypeFilterCommandHandler.obj \
	cmdbind_directmapCommandHandler.obj \
	acceptor.obj \
	connection.obj \
	serverConfig.obj \
	server.obj

!IFDEF WITH_SSL
LOCAL_STATIC_LIB_OBJS = \
	$(LOCAL_STATIC_LIB_OBJS) serverEndpoint.obj SSLcertificateInfo.obj
!ENDIF

CPP_OBJS = \
	appProperties.obj \
	appConfigDefinition.obj \
	$(LOCAL_STATIC_LIB_OBJS) \
	wolframeHandler.obj \
	winMain.obj

CPP_BINS = \
	wolframed.exe \
	wolfilter.exe

all: dependencies $(CPP_OBJS) $(CPP_BINS)

dependencies:
	cd libwolframe & $(MAKE) /nologo /f Makefile.w32 all
	cd libwolframe_serialize & $(MAKE) /nologo /f Makefile.w32 all
	cd libwolframe_langbind & $(MAKE) /nologo /f Makefile.w32 all

!INCLUDE $(TOPDIR)\makefiles\nmake\sub.mk

modules: libwolframe
wolframed.exe: wolframed.obj $(CPP_OBJS) libwolframe\logger\wolframemsg.res
wolfilter.exe: wolfilter.obj $(CPP_OBJS) libwolframe\logger\wolframemsg.res

$(LOCAL_STATIC_LIB): $(LOCAL_STATIC_LIB_OBJS)
	$(LINK) /lib /nologo /out:$@ $(STATIC_LDFLAGS) $?

local_all: $(LOCAL_STATIC_LIB) loadModules-dummy.obj

local_clean:
	@-erase $(LOCAL_STATIC_LIB) 2>NUL
	@-erase $(CPP_OBJS) 2>NUL
	@-erase test.bat 2>NUL

local_distclean:

local_test:

copy_prereq:
!IFDEF WITH_SSL
	@-copy "$(OPENSSL_DIR)\bin\libeay32.dll" .
	@-copy "$(OPENSSL_DIR)\bin\ssleay32.dll" .
!ENDIF
!IFDEF WITH_PGSQL
	@-copy "$(PGSQL_DIR)\lib\libpq.dll" .
!IFDEF PGDLL_WITH_I18N
	@-copy "$(PGSQL_DIR)\bin\libintl*.dll" .
	@-copy "$(PGSQL_DIR)\bin\libiconv*.dll" .
!ENDIF
!ENDIF
!IFDEF WITH_LIBXML2
	@-copy "$(WIN_ICONV_DIR)\iconv.dll" .
	@-copy "$(LIBXML2_DIR)\lib\libxml2.dll" .
!ENDIF

run: copy_prereq
	@-echo echo Running the Wolframe server... > test.bat
	@-echo wolframed.exe -c wolframe.xml >> test.bat
	@-test.bat

check: copy_prereq
	@-echo wolframed.exe -c wolframe.xml -t > test.bat
	@-test.bat

print: copy_prereq
	@-echo wolframed.exe -c wolframe.xml -p > test.bat
	@-test.bat
