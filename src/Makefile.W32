TOPDIR = ..

SUBDIRS =

!INCLUDE $(TOPDIR)\makefiles\nmake\platform.mk

INCLUDE_CPPFLAGS = \
	/D_WIN32_WINNT=0x500

INCLUDE_DIRS = \
	/I. \
	/I$(TOPDIR)\include \
	/I"$(BOOST_DIR)" \
	/I"$(PLATFORM_SDK_DIR)\Include"

# Note: libraries are picked automatically on Windows!
# TODO: better probing and correct library path based on Arch and
# platform SDK version
#SDK_LDFLAGS = /LIBPATH:"$(PLATFORM_SDK_DIR)\lib\x64"
SDK_LDFLAGS = /LIBPATH:"$(PLATFORM_SDK_DIR)\lib"
INCLUDE_LDFLAGS = \
	$(SDK_LDFLAGS) $(BOOST_LDFLAGS)

INCLUDE_LIBS = \
	Advapi32.lib

# openssl

!IFDEF WITH_SSL

INCLUDE_DIRS = \
	$(INCLUDE_DIRS)	/I"$(OPENSSL_DIR)\include"

INCLUDE_CPPFLAGS = \
	$(INCLUDE_CPPFLAGS) /DWITH_SSL

INCLUDE_LDFLAGS = \
	$(INCLUDE_LDFLAGS) /LIBPATH:"$(OPENSSL_DIR)\lib"

INCLUDE_LIBS = \
	$(INCLUDE_LIBS) $(OPENSSL_LIBS)

!ENDIF

LOCAL_STATIC_LIB = \
	wolframe.lib

LOCAL_STATIC_LIB_OBJS = \
	version.obj \
	resolvePath.obj \
	commandLine.obj \
	logLevel.obj \
	logSyslogFacility.obj \
	logComponent.obj \
	logger.obj \
	logBackendImpl.obj \
	logBackendConsole.obj \
	logBackendFile.obj \
	configHelpers.obj \
	serviceConfig.obj \
	serviceBanner.obj \
	loggerConfig.obj \
	databaseConfig.obj \
	appConfig.obj \
	protocol_ioblocks.obj \
	acceptor.obj \
	getPassword.obj \
	serverEndpoint.obj \
	connection.obj \
	serverConfig.obj \
	server.obj \
	authentication.obj \
	authentication_textfile.obj

#SSL

!IFDEF WITH_SSL
LOCAL_STATIC_LIB_OBJS = $(LOCAL_STATIC_LIB_OBJS) \
	SSLcertificateInfo.obj
!ENDIF

OBJS = \
	$(LOCAL_STATIC_LIB_OBJS) \
	appProperties.obj \
	appConfigDefinition.obj \
	wolframeHandler.obj \
	winMain.obj

CPP_BINS = \
	wolframed.exe

all: $(OBJS) $(CPP_BINS) wolframemsg.dll

!INCLUDE $(TOPDIR)\makefiles\nmake\sub.mk

wolframed.exe: wolframed.obj wolframemsg.res

wolframemsg.dll: wolframemsg.res
	$(LINK) /dll /nologo /noentry /MACHINE:x86 /out:$@ $?
wolframemsg.res: wolframemsg.rc
wolframemsg.rc: wolframemsg.mc
logBackend.obj: wolframemsg.rc

$(LOCAL_STATIC_LIB): $(LOCAL_STATIC_LIB_OBJS)
	$(LINK) /lib /nologo /out:$@ $(LDFLAGS) $(LIBS) $?

local_all: $(LOCAL_STATIC_LIB)

local_clean:
	@-erase MSG*.bin wolframemsg.rc wolframemsg.h wolframemsg.res wolframemsg.dll 2>NUL
	@-erase $(LOCAL_STATIC_LIB) 2>NUL
	@-erase test.bat 2>NUL

local_distclean:

local_test:

run: $(CPP_BINS)
	@-echo @echo off > test.bat
	@-echo copy $(OPENSSL_DIR)\bin\libeay32.dll . >> test.bat
	@-echo copy $(OPENSSL_DIR)\bin\ssleay32.dll . >> test.bat
	@-echo echo Running the Wolframe server... >> test.bat
	@-echo wolframed.exe -c wolframe.conf -d DATA >> test.bat
	@-test.bat
