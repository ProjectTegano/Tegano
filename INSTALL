Wolframe Installation

Installation and Configuration Guide

Copyright ? 2010 - 2014 Project Wolframe

Commercial Usage.  Licensees holding valid Project Wolframe Commercial licenses
may use this file in accordance with the Project Wolframe Commercial License
Agreement provided with the Software or, alternatively, in accordance with the
terms contained in a written agreement between the licensee and Project
Wolframe.

GNU General Public License Usage.  Alternatively, you can redistribute this
file and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Wolframe is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
Wolframe. If not, see http://www.gnu.org/licenses/

If you have questions regarding the use of this file, please contact Project
Wolframe.

February 20, 2014 version 0.0.1

-------------------------------------------------------------------------------

Table of Contents

Foreword
1. Installation from source

    1.1. Source Releases
    1.2. Building on Unix systems

        1.2.1. GCC compiler
        1.2.2. clang compiler
        1.2.3. Intel compiler
        1.2.4. Boost

            Build your own version of Boost
            RedHat, Fedora, CentOS, Scientific Linux and similar Linux
                distributions

                RedHat/Centos/Scientific Linux 5 and similar Linux
                    distributions
                RedHat 6
                Centos/Scientific Linux 6 and similar Linux distributions
                Fedora and similar Linux distributions

            Debian, Ubuntu and similar Linux distributions

                Debian 6
                Debian 7
                Ubuntu 10.04.1 LTS, Ubuntu 12.04
                Ubuntu 12.10
                Ubuntu 13.04
                Ubuntu 13.10

            openSUSE, SLES and similar Linux distributions

                OpenSuSE 12.3, 13.1
                SLES 11 SP1 and SP2

            ArchLinux
            Slackware

        1.2.5. Secure Socket Layer (SSL)

            RedHat, Fedora, CentOS, Scientific Linux and similar Linux
                distributions
            Debian, Ubuntu and similar Linux distributions
            openSUSE, SLES and similar Linux distributions
            ArchLinux
            Slackware

        1.2.6. SQLite database support

            RedHat/Centos/Scientific Linux 5 and similar Linux distributions
            RedHat, Fedora, CentOS, Scientific Linux and similar Linux
                distributions
            Debian, Ubuntu and similar Linux distributions
            openSUSE, SLES and similar Linux distributions
            ArchLinux
            Slackware

        1.2.7. PostgreSQL database support

            RedHat, Fedora, CentOS, Scientific Linux and similar Linux
                distributions
            Debian, Ubuntu and similar Linux distributions
            openSUSE, SLES and similar Linux distributions
            ArchLinux
            Slackware

        1.2.8. Oracle database support

            RedHat, Fedora, CentOS, Scientific Linux and similar Linux
                distributions
            Debian, Ubuntu and similar Linux distributions
            openSUSE, SLES and similar Linux distributions
            ArchLinux
            Slackware

        1.2.9. Installation

    1.3. Building on Windows systems

2. Installation via binary packages

    2.1. Linux distributions

        2.1.1. RedHat, Fedora, CentOS, Scientific Linux and similar Linux
            distributions

            Available packages
            Prerequisites
            Install binary packages manually
            Install from repository

        2.1.2. Debian, Ubuntu and similar Linux distributions
        2.1.3. openSUSE, SLES and similar Linux distributions
        2.1.4. ArchLinux
        2.1.5. Slackware

    2.2. Other Unix systems

        2.2.1. FreeBSD
        2.2.2. NetBSD

Foreword

This guide describes how to install and set up the Wolframe application server.

Chapter 1. Installation from source

Table of Contents

1.1. Source Releases
1.2. Building on Unix systems

    1.2.1. GCC compiler
    1.2.2. clang compiler
    1.2.3. Intel compiler
    1.2.4. Boost

        Build your own version of Boost
        RedHat, Fedora, CentOS, Scientific Linux and similar Linux
            distributions

            RedHat/Centos/Scientific Linux 5 and similar Linux distributions
            RedHat 6
            Centos/Scientific Linux 6 and similar Linux distributions
            Fedora and similar Linux distributions

        Debian, Ubuntu and similar Linux distributions

            Debian 6
            Debian 7
            Ubuntu 10.04.1 LTS, Ubuntu 12.04
            Ubuntu 12.10
            Ubuntu 13.04
            Ubuntu 13.10

        openSUSE, SLES and similar Linux distributions

            OpenSuSE 12.3, 13.1
            SLES 11 SP1 and SP2

        ArchLinux
        Slackware

    1.2.5. Secure Socket Layer (SSL)

        RedHat, Fedora, CentOS, Scientific Linux and similar Linux
            distributions
        Debian, Ubuntu and similar Linux distributions
        openSUSE, SLES and similar Linux distributions
        ArchLinux
        Slackware

    1.2.6. SQLite database support

        RedHat/Centos/Scientific Linux 5 and similar Linux distributions
        RedHat, Fedora, CentOS, Scientific Linux and similar Linux
            distributions
        Debian, Ubuntu and similar Linux distributions
        openSUSE, SLES and similar Linux distributions
        ArchLinux
        Slackware

    1.2.7. PostgreSQL database support

        RedHat, Fedora, CentOS, Scientific Linux and similar Linux
            distributions
        Debian, Ubuntu and similar Linux distributions
        openSUSE, SLES and similar Linux distributions
        ArchLinux
        Slackware

    1.2.8. Oracle database support

        RedHat, Fedora, CentOS, Scientific Linux and similar Linux
            distributions
        Debian, Ubuntu and similar Linux distributions
        openSUSE, SLES and similar Linux distributions
        ArchLinux
        Slackware

    1.2.9. Installation

1.3. Building on Windows systems

This section describes how to build the Wolframe application from the source
code.

1.1. Source Releases

Tarballs with release source code are available from SourceForce in the
directories

http://sourceforge.net/projects/wolframe/files/wolframe/

respectively

http://sourceforge.net/projects/wolframe/files/wolfclient/ .

The wolframe-0.0.1.tar.gz contains the Wolframe server, the modules and
3rdParty software needed to build the server.

The wolfclient-0.0.3.tar.gz contains the Wolframe client implementing the
graphical user interface.

1.2. Building on Unix systems

For building Wolframe on Unix systems you need at least the following software:

  * A recent C/C++ compiler, the following ones are known to work:

      + gcc 4.1.x or newer, http://gcc.gnu.org

      + clang 3.4 or newer, http://clang.llvm.org

      + Intel Compiler ICC 14.0 or newer, http://software.intel.com/en-us/
        c-compilers

  * GNU make 3.81 or newer (but preferably 3.82 or newer) from https://
    www.gnu.org/software/make/

  * boost 1.48.0 or newer from http://www.boost.org

Wolframe is build and installed by simply calling:

        make
        make install


The makefiles understand the standard GNU targets like clean', 'distclean',
'test', 'install', 'uninstall', etc. Also the standard installation variables
'DESTDIR' and 'prefix' are understood. The whole list of options can be seen
with:

        make help


There is no configure. Porting to platforms and distributions is done in the
makefiles. For most platforms we provide reasonable default values in makefiles
/gmake/platform.mk.

Optional features are enabled by using 'WITH_XXX' variables when calling make,
e. g. to enable SSL support you call make like this:

        make WITH_SSL=1


Additional variables can be set when 3rdParty software is not in the standard
location, for instance:

        make BOOST_DIR=/usr/local/boost-1.55.0


You can check how your software will be build with:

        make config


If you get a 'NOT SUPPLIED ON THIS PLATFORM' you have to provide the variables
explicitly as mentioned above in the example with 'BOOST_DIR'.

1.2.1. GCC compiler

Compilation with GNU gcc is the default on all Unix platforms. It corresponds
to the call:

        make CC=gcc CXX=g++


Per default all reasonable warnings are enabled. To add your own flags you can
set 'CFLAGS' or 'CXXFLAGS' respectively for instance to turn compiler warnings
into fatal errors with:

        make CFLAGS='-Werror' CXXFLAGS='-Werror'


or

        make CFLAGS='-g -O0' CXXFLAGS='-g -O0'


to turn off optimization and to enable debug information.

Certain embedded 3rdParty software may choose to have it's own flags for
compilation, you can't override those in the make invocation.

1.2.2. clang compiler

Compilation with clang is possible, only set the correct compiler variables:

        make CC=clang CXX=clang++


Also here you can set 'CFLAGS' and 'CXXFLAGS' at will.

1.2.3. Intel compiler

Compilation with the Intel C compiler is done with:

        source /opt/intel/bin/iccvars.csh intel64
        make CC=icc CXX=icpc


(where '/opt/intel/bin/icc' is the location of the Intel compiler).

Also here you can set 'CFLAGS' and 'CXXFLAGS' at will.

When running the tests or any binaries you have to make sure that
'LD_LIBRARY_PATH' is set correctly (the example is for csh/tcsh, Intel 64-bit):

        setenv LD_LIBRARY_PATH $PROD_DIR/lib/intel64


1.2.4. Boost

Boost (http://www.boost.org) is the only library which is absolutly required to
build Wolframe.

Build your own version of Boost

The following libraries are required for building Wolframe:

        ./bootstrap.sh --prefix=/usr/local/boost-1.xx.y \
                --with-libraries=thread,filesystem,system,program_options,date_time
        ./bjam install


If you want to build the ICU normalization module you will have to build
'boost-locale' with ICU support and you have to enable the 'regex' and the
'locale' boost libraries too:

        ./bootstrap.sh --prefix=/usr/local/boost-1.xx.y \
                --with-libraries=thread,filesystem,system,program_options,date_time,regex,locale
        ./bjam install


The location of the Boost library can be set as follow:

        make BOOST_DIR=/usr/local/boost-1.48.0


RedHat, Fedora, CentOS, Scientific Linux and similar Linux distributions

RedHat/Centos/Scientific Linux 5 and similar Linux distributions

The official Boost packages are not recent enough. Build your own Boost version
here.

RedHat 6

The official Boost packages are not recent enough. Build your own Boost version
here.

On RHEL6 there is no licicu-devel on OSC currently (see http://
permalink.gmane.org/gmane.linux.suse.opensuse.buildservice/17779). Get a Redhat
developer license and build your own libicu library and build your own Boost
library with boost-locale.

Centos/Scientific Linux 6 and similar Linux distributions

The official Boost packages are not recent enough. Build your own Boost version
here.

Fedora and similar Linux distributions

You need the 'boost-devel' package.

Debian, Ubuntu and similar Linux distributions

Debian 6

The official Boost packages are not recent enough. Build your own Boost version
here.

Debian 7

You need the following packages: 'libboost-dev',
'libboost-program-options-dev', 'libboost-filesystem-dev',
'libboost-thread-dev', 'libboost-random-dev', 'libboost-locale-dev'.

Ubuntu 10.04.1 LTS, Ubuntu 12.04

The official Boost packages are not recent enough. Build your own Boost version
here.

Ubuntu 12.10

You need the following packages: 'libboost-dev',
'libboost-program-options-dev', 'libboost-filesystem-dev',
'libboost-thread-dev', 'libboost-random-dev', 'libboost-locale-dev'.

Ubuntu 13.04

Currently libboost breaks in enable_if template, compile your own Boost version
here.

Ubuntu 13.10

You need the following packages: 'libboost-dev',
'libboost-program-options-dev', 'libboost-filesystem-dev',
'libboost-thread-dev', 'libboost-random-dev', 'libboost-locale-dev'.

openSUSE, SLES and similar Linux distributions

OpenSuSE 12.3, 13.1

You need the 'boost-devel' package.

SLES 11 SP1 and SP2

The official Boost packages are not recent enough. Build your own Boost version
here.

ArchLinux

You need the 'boost' and 'boost-libs' packages.

Slackware

You need the 'boost' package. This package is part of the 'l' package series.

1.2.5. Secure Socket Layer (SSL)

The Wolframe protocol can be secured with SSL. You have to specify the
following when building:

        make WITH_SSL=1


Currently only OpenSSL (http://www.openssl.org) is supported. The location of
the library can be overloaded with:

        make WITH_SSL=1 OPENSSL_DIR=/usr/local/openssl-1.0.1.f


Use the most recent version of the OpenSSL library available for you platform.

RedHat, Fedora, CentOS, Scientific Linux and similar Linux distributions

You need the 'openssl-devel' package.

Debian, Ubuntu and similar Linux distributions

You need the 'libssl-dev' package.

openSUSE, SLES and similar Linux distributions

You need the 'openssl-devel' package.

ArchLinux

You need the 'openssl' package.

Slackware

You need the 'openssl' package. This package is part of the 'n' package series.

1.2.6. SQLite database support

Wolframe can use an Sqlite3 database (http://sqlite.org) as backend for data
storage and for authentication and autorization.

You enable the building of a loadable Sqlite3 database module with

        make WITH_SYSTEM_SQLITE3=1


If you don't have a recent Sqlite version on your system you can also build the
module against the embedded version:

        make WITH_LOCAL_SQLITE3=1


The location of the Sqlite library can be overloaded with:

        make WITH_SYSTEM_SQLITE3=1 SQLITE3_DIR=/usr/local/sqlite-3.4.3


You can also override all compilation and linking flags of Sqlite separatly:

        make WITH_SYSTEM_SQLITE3=1 \
                SQLITE3_INCLUDE_DIR=/usr/local/sqlite-3.4.3/include \
                SQLITE3_LIB_DIR= /usr/local/sqlite-3.4.3/lib \
                SQLITE3_LIBS=-lsqlite3


When building with 'WITH_SYSTEM_SQLITE3' it is enough to install the correct
development library.

RedHat/Centos/Scientific Linux 5 and similar Linux distributions

The official Sqlite package is too old, use the embedded version of Sqlite with
'WITH_SYSTEM_SQLITE3=1'.

RedHat, Fedora, CentOS, Scientific Linux and similar Linux distributions

You need the 'sqlite-devel' package.

Debian, Ubuntu and similar Linux distributions

You need the 'libsqlite3-dev' package.

For running the Sqlite3 database tests you also need the 'sqlite3' package.

openSUSE, SLES and similar Linux distributions

You need the 'sqlite3-devel' package.

For running the Sqlite3 database tests you also need the 'sqlite3' package.

ArchLinux

You need the 'sqlite' package.

Slackware

You need the 'sqlite' package. This package is part of the 'ap' package series.

1.2.7. PostgreSQL database support

Wolframe can use a PostgreSQL database (http://postgresql.org) as backend for
data storage and for authentication and autorization.

You enable the building of a loadable PostgreSQL database module with

        make WITH_PGSQL=1


The location of the PostgreSQL library can be overloaded with:

        make WITH_PGSQL=1 PGSQL_DIR=/usr/local/postgresql-9.1.3


You can also override all compilation and linking flags of PostgreSQL
separatly:

        make WITH_PGSQL=1 \
                PGSQL_INCLUDE_DIR=/usr/local/postgresql-9.1.3/include \
                PGSQL_LIB_DIR=/usr/local/postgresql-9.1.3/lib \
                PGSQL_LIBS=-lpq


RedHat, Fedora, CentOS, Scientific Linux and similar Linux distributions

You need the 'postgresql-devel' package.

For Centos/RHEL/SciLi 5 you can choose between the 'postgresql-devel'package
(which is version 8.1) or the 'postgresql84-devel' package. The 8.4 version is
recommended over 8.1.

For running the Postgresql tests you need a fully function 'postgresql-server'
with a db user 'wolfusr' (password: 'wolfpwd') owning a database called
'wolframe'.

Setting up a test user in PostgreSQL is done with:

        postgresql-setup initdb
        systemctl start postgresql.service
        systemctl enable postgresql.service


change the authentication method from 'ident' to 'md5' in pg_hba.conf.

Debian, Ubuntu and similar Linux distributions

You need the 'libpq-dev' package.

For running the PostgreSQL database tests you also need the 'postgresql-client'
package.

openSUSE, SLES and similar Linux distributions

You need the 'postgresql-devel' package.

ArchLinux

You need the 'postgresql' package.

Slackware

A PostgreSQL package is not avaiable on Slackware, build your own one with:

        ./configure --prefix=/usr/local/pgsql
        make
        make install
        groupadd -g 990 postgres
        useradd -g postgres -u 990 postgres
        mkdir /usr/local/pgsql/var
        chown -R postgres:users /usr/local/pgsql/var
        su postgres
        /usr/local/pgsql/bin/initdb -D /usr/local/pgsql/var
        exit
        cat > /etc/rc.d/rc.postgresql
        #!/bin/sh

        case "$1" in
                start)
                        su -l postgres -s /bin/sh -c "/usr/local/pgsql/bin/pg_ctl  -D /usr/local/pgsql/var -p /usr/local/pgsql/bin/postmaster start  > /dev/null 2>&1" < /dev/null
                        ;;
                stop)
                        kill `ps -efa | grep postmaster | grep -v grep | awk '{print $2}'`
                        ;;
                *)
                        echo $"Usage: $0 {start|stop}"
                        exit 1
        esac

        exit 0
        (ctrl-D)
        chmod 0775 /etc/rc.d/rc.postgresql
        usermod -d /usr/local/pgsql postgres


Compile Wolframe now with:

        make WITH_PGSQL=1 \
                PGSQL_DIR=/usr/local/pgsql


Alternatively you can of course also build the PostgreSQL package with the help
of SlackBuilds.

1.2.8. Oracle database support

Wolframe can use a Oracle database (http://www.oracle.com) as backend for data
storage and for authentication and autorization.

Import note: Make sure you have all the licenses to develop with Oracle and to
install an Oracle database! The Wolframe team doesn't take any responsability
if licenses are violated!

You enable the building of a loadable Oracle database module with

        make WITH_ORACLE=1


The location of the Oracle instantclient library can be overloaded with:

        make WITH_ORACLE=1 ORACLE_DIR=/opt/oracle/instantclient_11_2


You can also override all compilation and linking flags of Oracle separatly:

        make WITH_ORACLE=1 \
                ORACLE_INCLUDE_DIR=/usr/lib/oracle/11_2/client64 \
                ORACLE_LIB_DIR=/usr/lib/oracle/11_2/client64 \
                ORACLE_LIBS=-lclntsh


If you want to run the tests for Oracle you'll have to set up an Oracle
database. Then install the 'wolframe' database and the 'wolfusr' database user.
Sql example files can be found in contrib/database/oracle.

RedHat, Fedora, CentOS, Scientific Linux and similar Linux distributions

For building the Oracle database module you have to download the RPM packages
oracle-instantclient12.1-basic-12.1.0.1.0-1.i386.rpm and
oracle-instantclient12.1-devel-12.1.0.1.0-1.i386.rpm. You can of course also
install the zipfiles and install those.

From the system repositories you'll need the 'libaio' package.

If you want to use the 'sqlplus' command line tool for manual testing you also
have to install the package
oracle-instantclient12.1-sqlplus-12.1.0.1.0-1.i386.rpm. If you want a history
in sqlplus it's highly recommended that you install a command line history
wrapper like for instance 'rlwrap'.

Debian, Ubuntu and similar Linux distributions

For building the Oracle database module you have to download the RPM packages
oracle-instantclient12.1-basic-12.1.0.1.0-1.i386.rpm and
oracle-instantclient12.1-devel-12.1.0.1.0-1.i386.rpm.

To install those RPM files you'll need the 'alien' tool. You can of course also
install the zipfiles and install those.

From the system repositories you'll need the 'libaio1' package.

If you want to use the 'sqlplus' command line tool for manual testing you also
have to install the package
oracle-instantclient12.1-sqlplus-12.1.0.1.0-1.i386.rpm. If you want a history
in sqlplus it's highly recommended that you install a command line history
wrapper like for instance 'rlwrap'.

openSUSE, SLES and similar Linux distributions

For building the Oracle database module you have to download the RPM packages
oracle-instantclient12.1-basic-12.1.0.1.0-1.i386.rpm and
oracle-instantclient12.1-devel-12.1.0.1.0-1.i386.rpm. You can of course also
install the zipfiles and install those.

From the system repositories you'll need the 'libaio1' package.

If you want to use the 'sqlplus' command line tool for manual testing you also
have to install the package
oracle-instantclient12.1-sqlplus-12.1.0.1.0-1.i386.rpm. If you want a history
in sqlplus it's highly recommended that you install a command line history
wrapper like for instance 'rlwrap'.

ArchLinux

You need the two packages 'oracle-instantclient-basic' and
'oracle-instantclient-sdk'.

Have a look at https://wiki.archlinux.org/index.php/Oracle_client on how to
install the Oracle packages. Basically you have two options: either you use the
'oracle' pacman repository or you download the Oracle packages by hand and run
the build scripts from AUR.

If you want to use the 'sqlplus' command line tool for manual testing you also
have to install the package 'oracle-instantclient-sqlplus'. If you want a
history in sqlplus it's highly recommended that you install a command line
history wrapper like for instance 'rlwrap'.

Slackware

Simply download the zipfiles and install them to a directory, let's say '/opt/
oracle/instantclient_12_1':

        mkdir -p /opt/oracle
        cd /opt/oracle
        unzip instantclient-basic-linux.x64-12.1.0.1.0.zip
        unzip instantclient-sdk-linux.x64-12.1.0.1.0.zip


Add the following line to /etc/ld.so.conf and reload the cached shared
libraries:

        echo "/opt/oracle/instantclient_12_1" >> /etc/ld.so.conf
        ldconfig


Call 'make' with:

        make WITH_ORACLE=1 ORACLE_DIR=/opt/oracle/instantclient_12_1


1.2.9. Installation

The makefiles provide a 'install' and an 'uninstall' target to install and
uninstall the software.

The 'DESTDIR' and 'prefix' parameters are useful for packagers to reroute the
destination of the installation.

For instance:

        make DESTDIR=/var/tmp prefix=/usr/local/wolframe-0.0.1 install


installs the software in:

        /var/tmp/usr/local/wolframe-0.0.1/sbin/wolframed
        /var/tmp/usr/local/wolframe-0.0.1/etc/wolframe/wolframe.conf
        ...


1.3. Building on Windows systems

Chapter 2. Installation via binary packages

Table of Contents

2.1. Linux distributions

    2.1.1. RedHat, Fedora, CentOS, Scientific Linux and similar Linux
        distributions

        Available packages
        Prerequisites
        Install binary packages manually
        Install from repository

    2.1.2. Debian, Ubuntu and similar Linux distributions
    2.1.3. openSUSE, SLES and similar Linux distributions
    2.1.4. ArchLinux
    2.1.5. Slackware

2.2. Other Unix systems

    2.2.1. FreeBSD
    2.2.2. NetBSD

This section describes how to install the Wolframe application via packages on
various operating systems.

2.1. Linux distributions

Linux distributions are currently built on the Open Build Server (http://
openbuildservice.org) and on a bunch of virtual machines.

The resulting packages and the repository metadata is hosted on Sourceforge (
http://sourceforge.net).

The packages are always build with the default system compiler, which is
currently GNU gcc.

Packages for proprietary software (like the Oracle database module) have to be
built manually, they can not be distributed as binary packages due to license
problems.

2.1.1. RedHat, Fedora, CentOS, Scientific Linux and similar Linux distributions

Available packages

  * wolframe-0.0.1.rpm: contains the Wolframe core server with minimal 3rd
    party software requirements

  * wolframe-sqlite3-0.0.1.rpm: the database module for Sqlite3 databases

  * wolframe-postgresql-0.0.1.rpm: the database module for PostgreSQL databases

  * wolframe-libxml2-0.0.1.rpm: filtering module for XML and XSLT (using
    libxml2/libxslt)

  * wolframe-textwolf-0.0.1.rpm: filtering module for XML (using textwolf)

  * wolframe-cjson-0.0.1.rpm: filtering module for JSON (using cJSON)

  * wolframe-pam-0.0.1.rpm: authentication module for PAM

  * wolframe-sasl-0.0.1.rpm: authentication module for SASL

  * wolframe-python-0.0.1.rpm: language bindings for Python

  * wolframe-lua-0.0.1.rpm: language bindings for Lua

  * wolframe-libhpdf-0.0.1.rpm: printing module using libhpdf

  * wolframe-freeimage-0.0.1.rpm: image manipuation module using FreeImage

  * wolframe-libclient-0.0.1.rpm: C/C++ client library

  * wolframe-client-0.0.1.rpm: command line tool

  * wolfclient-0.0.3.rpm: Wolframe graphical frontend

Prerequisites

Install binary packages manually

Installing the packages via repositories is usually the prefered way.

Install from repository

First install the repository file for the corresponding distribution (as
example we choose Centos 6):

        cd /etc/yum.repos.d
        wget http://sourceforge.net/projects/wolframe/files/repositories/CentOS_CentOS-6/wolframe.repo


You can list all available Wolframe packages with:

        yum search wolframe


You install the main Wolframe package with:

        yum install wolframe


You have to accept the signing key:

        Retrieving key from http://sourceforge.net/projects/wolframe/files/repositories/CentOS_CentOS-6/repodata/repomd.xml.key
        Importing GPG key 0x9D404026:
        Userid: "home:wolframe_user OBS Project <home:wolframe_user@build.opensuse.org>"
        From  : http://sourceforge.net/projects/wolframe/files/repositories/CentOS_CentOS-6/repodata/repomd.xml.key
        Is this ok [y/N]: y


You can start the service with:

        service wolframed start


respectively

        systemctl start wolframed


on newer Fedora systems.

2.1.2. Debian, Ubuntu and similar Linux distributions

Add a new repository file /etc/apt/sources.list.d/wolframe.list which contains:

        deb http://sourceforge.net/projects/wolframe/files/repositories/xUbuntu_13.10/ /


(as example we choose Ubuntu 13.10).

Download the signing key:

        wget http://sourceforge.net/projects/wolframe/files/repositories/xUbuntu_13.10/Release.key


Verify that the key then add it with:

        apt-key add - < Release.key


Update the repository with:

        apt-get update


You can list all available Wolframe packages with:

        apt-cache search wolframe


You install the main Wolframe package with:

        apt-get install wolframe


To start the Wolframe service you have to edit the file /etc/default/wolframe
and enable the wolframe daemon there:

        RUN=yes


You can start the service now with:

        service wolframed start


2.1.3. openSUSE, SLES and similar Linux distributions

First we add the Wolframe repository for the corresponding distribution (as
example we choose OpenSUSE 13.1):

        zypper addrepo http://sourceforge.net/projects/wolframe/files/repositories/openSUSE_13.1/wolframe.repo


You may get the following error:

        /var/adm/mount/AP_0xmiyYP3/projects/wolframe/files/repositories/openSUSE_13.1/wolframe.repo: Line 1 is missing '=' sign
        Is it a .repo file? See http://en.opensuse.org/Standards/RepoInfo for details.


Try to download the repo file by hand and install it by hand:

        wget http://sourceforge.net/projects/wolframe/files/repositories/openSUSE_13.1/wolframe.repo
        zypper addrepo wolframe.repo


Now refresh your repositories with:

        zypper refresh


If you get the following message

        File 'repomd.xml' from repository 'Wolframe Project (openSUSE_13.1)' is unsigned, continue? [yes/no] (no): yes


the signing key could not be downloaded from SourceForge. Accept it in this
case anyway.

If you get the following message

        File './repodata/ea7cb8d9a0caa2c3d8977919be124accdf55c6b8952ddee72f1b48f4decb0644-primary.xml.gz' not found on medium 'http://sourceforge.net/projects/wolframe/files/repositories/openSUSE_13.1/'

        Abort, retry, ignore? [a/r/i/? shows all options] (a): u^H
        Invalid answer ''. [a/r/i/? shows all options] (a): ?

        a - Skip retrieval of the file and abort current operation.
        r - Try to retrieve the file again.
        i - Skip retrieval of the file and try to continue with the operation without the file.
        u - Change current base URI and try retrieving the file again.

        [a/r/i/? shows all options] (a): u


the Sourceforge redirect didn't work and you have to force the baseURL to be a
SourceForge mirror like:

        New URI: http://freefr.dl.sourceforge.net/project/wolframe/repositories/openSUSE_13.1/


You can list all available Wolframe packages with:

        zypper se wolframe
        zypper se wolfclient


You install the main Wolframe package with:

        zypper install wolframe


You can start the service with:

        service wolframed start


respectively

        systemctl start wolframed


on newer openSUSE systems.

2.1.4. ArchLinux

First add the following section to /etc/pacman.conf:

        [wolframe]
        SigLevel = Optional DatabaseRequired
        Server = http://sourceforge.net/projects/wolframe/files/repositories/Arch_Extra/$arch


Fetch and verify the sigining key, import and locally sign the key:

        wget http://download.opensuse.org/repositories/home:/wolframe_user/xUbuntu_13.10/Release.key
        pacman-key --add Release.key
        pacman-key --lsign 9D404026


Alternatively you can also disable the verification of the signature of the
database by removing 'DatabaseRequired' from the 'SigLevel' option.

Update the repository data with:

        pacman -Syy


You can list all available Wolframe packages with:

        pacman -Sl wolframe


You install the main Wolframe package with:

        pacman -S wolframe


You can start the service with:

        systemctl start wolframed


2.1.5. Slackware

Download the package file (we choose 64-bit Slackware 14 for example):

        wget http://sourceforge.net/projects/wolframe/files/wolframe-binaries/0.0.1/Slackware-14/x86_64/wolframe-0.0.1-x86_64.tgz


You install the Wolframe package with:

        installpkg wolframe-0.0.1-x86_64.tgz


The Slackware packages contain the whole server and the whole client
respectively.

You can start the service with:

        /etc/rc.d/rc.wolframed start


2.2. Other Unix systems

2.2.1. FreeBSD

Download the package file (we choose 64-bit FreeBSD 9 for example):

        wget http://sourceforge.net/projects/wolframe/files/wolframe-binaries/0.0.1/FreeBSD-9/x86_64/wolframe-0.0.1-x86_64.tgz


You install the Wolframe package with:

        pkg_add wolframe-0.0.1-x86_64.tgz


The FreeBSD packages contain the whole server and the whole client
respectively.

You can start the service with:

        /usr/local/etc/rc.d/wolframed onestart


To start the Wolframe service at system boot time you have to edit the file /
etc/rc.conf and enable the wolframe daemon there with:

        wolframed_enable="YES"


You can start the service now with:

        service wolframed start


2.2.2. NetBSD

Download the package file (we choose 64-bit NetBSD 6 for example):

        wget http://sourceforge.net/projects/wolframe/files/wolframe-binaries/0.0.1/NetBSD-6/x86_64/wolframe-0.0.1-x86_64.tgz


You install the Wolframe package with:

        pkg_add wolframe-0.0.1-x86_64.tgz


The NetBSD packages contain the whole server and the whole client respectively.

You can start the service with:

        /usr/pkg/share/examples/rc.d/wolframed onestart


To start the Wolframe service at system boot time you have to edit the file /
etc/rc.conf and enable the wolframe daemon there with:

        wolframed=YES


Copy the example startup script to the final place:

        cp /usr/pkg/share/examples/rc.d/wolframed /etc/rc.d/


You can start the service now with:

        /etc/rc.d/wolframed


