
<html>
	<head>
		<title>LGMP - A GMP package for Lua 5.2</title>
		<style type="text/css">
			body, table {
				font-family: verdana, arial, helvetica;
				font-size: 12pt;
			}
			tr {
				background-color: silver;
			}
			td {
				vertical-align: top;
				padding-bottom: 1ex;
			}
			code {
				color: green;
			}
		</style>
	</head>
	<body>
		<H2>LGMP - A GMP package for Lua 5.2</H2>

		<p><i>Wim Couwenberg - January 2012</i></p>

		<p>The package offers the GNU multiple precision arithmetic library
		[<a href="#ref1">1</a>] for Lua 5.2.  Currently it supports only the
		integer, floating point and random state types.  I have no plans (yet)
		to add support for rationals.</p> 

		<H3>Building and installing</H3>
		<p>The package consists of a single C file &ldquo;lgmp.c&rdquo; and a
		single Lua file &ldquo;gmp.lua&rdquo;.  The libraries for Lua and GMP
		should already be available on your system.  Compile and link lgmp.c
		into a bundle (OSX), dynamic link library (Win32) or shared library
		(Unix) called either &ldquo;c-gmp.so&rdquo; (OSX, Unix) or
		&ldquo;c-gmp.dll&rdquo; (Win32).  Link against both the Lua and GMP
		libraries if necessary.  Here is the command line I use to build
        c-gmp.so on OSX 10.7 (both the Lua and GMP libraries are dylibs on my
        system):</p>

		<p><code>gcc -bundle -O2 -Wall -llua -lgmp -o c-gmp.so
			lgmp.c</code></p>

		<p>Place the file c-gmp.so (or c-gmp.dll) and gmp.lua in the proper
		locations on your system so that they will be found through
		<code>package.cpath</code> and <code>package.path</code>
		respectively.</p>

		<h3>Using LGMP</h3>
        <p>Load the lgmp package with <code>require &ldquo;gmp&rdquo;</code>.
        This returns the lgmp package as a table.  The package defines a
        handful of global functions to create and compute gmp objects.  Objects
        can be manipulated through a large number of methods.  The lgmp package
        covers most of the GMP library functions available for integer,
        floating point and random state types.  The string
        <code>gmp.version</code> reflects the version of the underlying GMP
        library.  On my system it currently reads:</p>

        <p><code>&gt; gmp = require "gmp"<br>
            &gt; =gmp.version<br>
			5.0.2</code></p>

		<h3>Mutable types</h3>
		<p>All lgmp types are <i>mutable</i>, i.e. the value of an instance can
		change.  This is hardly surprising for a random state but it can become
		a bit confusing for integer and floating point types.  The library is
		set up in such a way that most functions and methods do not change
		their operands by default.  (Though some methods, like
		<code>set</code>, <code>addmul</code> and <code>submul</code>, are
		designed to update their <code>self</code> operand.)  The design of the
		lgmp package with respect to mutability is as follows.  Whenever a
		function or method returns <i>n</i> objects of integer or floating
		point type, then that function or method accepts <i>n</i> optional
		extra arguments that can specify existing objects of the same type.
		When these extra arguments are provided then their value is changed and
		the function or method returns these arguments.  The following examples
		illustrate this principle.</p>

<pre><code>
> -- load lgmp package
> gmp = require &ldquo;gmp&rdquo;

> -- create two gmp integers
> x = gmp.z(123)
> y = gmp.z(456)

> -- compute their sum
> =x:add(y)
579

> -- x and y are left unchanged
> =x, y
123	456

> -- compute sum, update and return x
> =x:add(y,x)
579

> -- x is updated
> =x, y
579	456

> -- compute quotient and remainder
> =x:fdiv_qr(y)
1	123

> -- x and y are left unchanged
> =x, y
579	456

> -- update y with remainder and return quotient, y
> =x:fdiv_qr(y, nil, y)
1	123

> -- y is updated, x is left unchanged
> =x, y
579	123

> -- update x and y to quotient and remainder and return x, y
> =x:fdiv_qr(y, x, y)
4	87

> -- x and y are both updated
> =x, y
4	87

> -- returns nothing but updates &ldquo;self&rdquo;
> =x:addmul(y, 3)
> =x, y
265	87

> -- returns nothing but sets &ldquo;self&rdquo; to new integer value
> =x:set "123456789123456789123456789"
> =x
123456789123456789123456789
</code></pre>

		<h3>Global functions</h3>
		<p>The table below lists the global functions in the lgmp package.
		Arguments in <i>italics</i> are optional.  Refer to the GMP manual [<a
			href="#ref2">2</a>] for further details.</p>

		<p><table cols="*,*,*">
			<tr><td><b>Function</b></td>
				<td><b>Implemented with</b></td>
				<td><b>Description</b></td>
			</tr>
			<tr><td><code>bin(a1, a2<i>, res</i>)</code></td>
				<td><code>mpz_bin_ui<br>
						mpz_bin_uiui</code></td>
				<td>Computes the binomial coefficient <code>a1</code> over
					<code>a2</code>.  Argument <code>a1</code> may be negative.
					Argument <code>a2</code> must be a Lua number in the
					unsigned long range.  Returns a gmp integer.</td>
			</tr>
			<tr><td><code>f(<i>value, base</i>)</code></td>
				<td><code>mpf_init<br>
						mpf_init_set</br>
						mpf_init_set_d<br>
						mpf_init_set_str<br>
						mpf_init_set_z</code></td>
				<td>Create a floating point object.  If no initial
					<code>value</code> is specified then it is initialized to 0
					(zero).  The inital <code>value</code> can be a Lua number,
					an integer object, a floating point object or a string.  If
					<code>value</code> is a string then <code>base</code> can
					optionally specify the base between -62 and -2 or between 2
					and 62 inclusive.  (Refer to the <code>mpf_set_str</code>
					function in the GMP manual [<a href="#ref2">2</a>] for
					details.)  If no <code>base</code> is specified it defaults
					to 10.</td>
			</tr>
			<tr><td><code>fac(a<i>, res</i>)</code></td>
				<td><code>mpz_fac_ui</code></td>
				<td>Argument <code>a</code> must be a Lua number in the
					unsigned long range.</td>
			</tr>
			<tr><td><code>fib(a<i>, res</i>)<br>
						fib2(a<i>,&nbsp;r1,&nbsp;r2</i>)</code></td>
				<td><code>mpz_fib_ui<br>
						mpz_fib2_ui</code></td>
				<td>Argument <code>a</code> must be a Lua number in the
					unsigned long range.</td>
			</tr>
			<tr><td><code>lucnum(a<i>, res</i>)<br>
						lucnum2(a<i>,&nbsp;r1,&nbsp;r2</i>)</code></td>
				<td><code>mpz_lucnum_ui<br>
						mpz_lucnum2_ui</code></td>
				<td>Argument <code>a</code> must be a Lua number in the
					unsigned long range.</td>
			</tr>
			<tr><td><code>pow(a1, a2<i>, res</i>)</code></td>
				<td><code>mpz_pow_ui<br>
						mpz_ui_pow_ui</code></td>
				<td>Argument <code>a2</code> must be a Lua number in the
					unsigned long range.  Returns a gmp integer.</td>
			</tr>
			<tr><td><code>rand(<i>a</i>)</code></td>
				<td><code>gmp_randinit_default<br>
						gmp_randinit_set</code></td>
				<td>Create a random state object.  An initial random state can
					be provided in <code>a</code> to create a copy of that
					state.  If no argument is provided then a default random
					state is created.</td>
			</tr>
			<tr><td><code>set_default_prec(a)</code></td>
				<td><code>mpf_set_default_prec</code></td>
				<td>Set default <i>minimal</i> precision for new floating point
					objects to <code>a</code> bits.</td>
			</tr>
			<tr><td><code>sqrt(a<i>, res</i>)</code></td>
				<td><code>mpf_sqrt_ui</code></td>
				<td>The argument <code>a</code> must be in the unsigned long
					range.  Returns a floating point number.</td>
			</tr>
			<tr><td><code>z(<i>value, base</i>)</code></td>
				<td><code>mpz_init<br>
						mpz_init_set<br>
						mpz_init_set_d<br>
						mpz_init_set_f<br>
						mpz_init_set_str</code></td>
				<td>Create an integer object.  If no arguments are given then
					its value is initialized to 0 (zero).  The initial
					<code>value</code> can be specified as a Lua number, an
					integer object, a floating point object or a string.  If
					<code>value</code> is a string then <code>base</code> can
					be optionally specify a base between 2 and 62 (inclusive)
					or base can be 0 (zero) in which case the actual base is
					implied by a prefix of <code>value</code>.  (Refer to the
					<code>mpz_set_str</code> function in the GMP manual [<a
						href="#ref2">2</a>] for details.)  If no
					<code>base</code> is specified it defaults to 10.</td>
			</tr>
		</table></p>

		<h3>Integer methods</h3>
		<p>The table below lists the methods of an integer object.  Arguments
		in <i>italics</i> are optional.  Refer to the GMP manual [<a
			href="#ref2">2</a>] for further details.</p>

		<p><table>
			<tr><td><b>Method</b></td>
				<td><b>Implemented with</b></td>
				<td><b>Description</b></td>
			</tr>
			<tr><td><code>z:__tostring()</code></td>
				<td><code>mpz_get_str</code></td>
			</tr>
			<tr><td><code>z:__concat(a)</code></td>
				<td><code>mpz_get_str</code></td>
			</tr>
			<tr><td><code>z:__add(a)<br>
						z:__sub(a)</code></td>
				<td><code>mpz_add<br>
						mpz_add_ui<br>
						mpz_sub<br>
						mpz_sub_ui<br>
						mpz_ui_sub</code></td>
			</tr>
			<tr><td><code>z:__mul(a)</code></td>
				<td><code>mpz_mul<br>
						mpz_mul_si<br>
						mpz_mul_ui</code></td>
			</tr>
			<tr><td><code>z:__div(a)<br>
						z:__mod(a)</code></td>
				<td><code>mpz_fdiv_q<br>
						mpz_fdiv_q_ui<br>
						mpz_fdiv_r<br>
						mpz_fdiv_r_ui</code></td>
				<td>The implementations of <code>__div</code> and
					<code>__mod</code> are chosen such that <code>__mod</code>
					extends the Lua <code>%</code> operator and <code>x =
						(x/y)*y + x%y</code> for all integer objects
					<code>x</code> and <code>y</code>.</td>
			</tr>
			<tr><td><code>z:__pow(a)</code></td>
				<td><code>mpz_pow_ui</code></td>
				<td>The exponent <code>a</code> must be in the unsigned long
					range.</td>
			</tr>
			<tr><td><code>z:__unm()</code></td>
				<td><code>mpz_neg</code></td>
			</tr>
			<tr><td><code>z:__lt(a)<br>
						z:__le(a)<br>
						z:__eq(a)</code></td>
				<td><code>mpz_cmp</code></td>
			</tr>
			<tr><td><code>z:__gc()</code></td>
				<td><code>mpz_clear</code></td>
			</tr>
			<tr><td><code>z:abs(<i>res</i>)</code></td>
				<td><code>mpz_abs</code></td>
			</tr>
			<tr><td><code>z:add(a<i>, res</i>)</code></td>
				<td><code>mpz_add<br>
						mpz_add_ui</code></td>
			</tr>
			<tr><td><code>z:addmul(a1, a2)</code></td>
				<td><code>mpz_addmul<br>
						mpz_addmul_ui</code></td>
				<td>Changes <code>self</code> to <code>self + a1*a2</code>.
					Returns nothing.</td>
			</tr>
			<tr><td><code>z:And(a<i>, res</i>)</code></td>
				<td><code>mpz_and</code></td>
				<td>Named with a capital <code>A</code> to avoid a name clash
					with the built-in operator <code>and</code>.</td>
			</tr>
			<tr><td><code>z:bin(a<i>, res</i>)</code></td>
				<td><code>mpz_bin_ui</code></td>
				<td>Computes the binomial coefficient <code>self</code> over
					<code>a</code>.  The value of <code>self</code> may be
					negative.  Argument <code>a</code> must be a Lua number in
					the unsigned long range.</td>
			</tr>
			<tr><td><code>z:cdiv_q(a<i>, res</i>)<br>
						z:cdiv_q_2exp(a<i>, res</i>)<br>
						z:cdiv_qr(a<i>, r1, r2</i>)<br>
						z:cdiv_r(a<i>, res</i>)<br>
						z:cdiv_r_2exp(a<i>, res</i>)<br>
						z:cdiv(a)</code></td>
				<td><code>mpz_cdiv_q<br>
						mpz_cdiv_q_ui<br>
						mpz_cdiv_q_2exp<br>
						mpz_cdiv_r<br>
						mpz_cdiv_r_ui<br>
						mpz_cdiv_r_2exp<br>
						mpz_cdiv_qr<br>
						mpz_cdiv_qr_ui<br>
						mpz_cdiv_ui</code></td>
				<td>If <code>a</code> is a Lua number in the (un)signed long
					range then <code>z:cdiv_q</code>, <code>z:cdiv_r</code> and
					<code>z:cdiv_qr</code> all return the <i>remainder</i> as
					an additional Lua number return value.  The method
					<code>z:cdiv</code> takes an argument in the (un)signed
					long range and returns only the <i>remainder</i> as a Lua
					number.</td>
			</tr>
			<tr><td><code>z:clrbit(a<i>, res</i>)</code></td>
				<td><code>mpz_clrbit</code></td>
			</tr>
			<tr><td><code>z:cmp(a)<br>
						z:cmpabs(a)</code></td>
				<td><code>mpz_cmp<br>
						mpz_cmp_d<br>
						mpz_cmp_si<br>
						mpz_cmp_ui</code></td>
			</tr>
			<tr><td><code>z:com(<i>res</i>)<br>
						z:combit(a<i>, res</i>)</code></td>
				<td><code>mpz_com<br>
						mpz_combit</code></td>
			</tr>
			<tr><td><code>z:congruent(a1, a2)<br>
						z:congruent_2exp(a1,&nbsp;a2)</code></td>
				<td><code>mpz_congruent_p<br>
						mpz_congruent_ui_p<br>
						mpz_congruent_2exp_p</code></td>
				<td>Result is a boolean</td>
			</tr>
			<tr><td><code>z:divexact(a<i>, res</i>)</code></td>
				<td><code>mpz_divexact<br>
						mpz_divexact_ui</code></td>
				<td>Result is a boolean</td>
			</tr>
			<tr><td><code>z:divisible(a)<br>
						z:divisible_2exp(a)</code></td>
				<td><code>mpz_divisible_p<br>
						mpz_divisible_ui_p<br>
						mpz_divisible_2exp_p</code></td>
				<td>Result is a boolean</td>
			</tr>
			<tr><td><code>z:fdiv_q(a<i>, res</i>)<br>
						z:fdiv_q_2exp(a<i>, res</i>)<br>
						z:fdiv_qr(a<i>, r1, r2</i>)<br>
						z:fdiv_r(a<i>, res</i>)<br>
						z:fdiv_r_2exp(a<i>, res</i>)<br>
						z:fdiv(a)</code></td>
				<td><code>mpz_fdiv_q<br>
						mpz_fdiv_q_ui<br>
						mpz_fdiv_q_2exp<br>
						mpz_fdiv_r<br>
						mpz_fdiv_r_ui<br>
						mpz_fdiv_r_2exp<br>
						mpz_fdiv_qr<br>
						mpz_fdiv_qr_ui<br>
						mpz_fdiv_ui</code></td>
				<td>If <code>a</code> is a Lua number in the (un)signed long
					range then <code>z:fdiv_q</code>, <code>z:fdiv_r</code> and
					<code>z:fdiv_qr</code> all return the <i>remainder</i> as
					an additional Lua number return value.  The method
					<code>z:fdiv</code> takes an argument in the (un)signed
					long range and returns only the <i>remainder</i> as a Lua
					number.</td>
			</tr>
			<tr><td><code>z:fits_sint()<br>
						z:fits_slong()<br>
						z:fits_sshort()<br>
						z:fits_uint()<br>
						z:fits_ulong()<br>
						z:fits_ushort()</code></td>
				<td><code>mpz_fits_sint_p<br>
						mpz_fits_slong_p<br>
						mpz_fits_sshort_p<br>
						mpz_fits_uint_p<br>
						mpz_fits_ulong_p</code></td>
				<td>Result is a boolean</td>
			</tr>
			<tr><td><code>z:format(fmt<i>, prec</i>)</code></td>
				<td><code>gmp_asprintf</code></td>
				<td>Formats <code>self</code> according to the format specifier
					<code>fmt</code>.  The leading &lsquo;<code>%</code>&rsquo;
					character is optional.  The type
					&lsquo;<code>Z</code>&rsquo; is implied but may be
					specified explicitly.  The conversion character is
					restricted to one of &ldquo;<code>dioxX</code>&rdquo;.  If
					the precision is given by &ldquo;<code>.*</code>&rdquo;
					then the second argument <code>prec</code> must specify the
					precision.  Otherwise <code>prec</code> must be
					unspecified.</td>
			</tr>	
			<tr><td><code>z:gcd(a<i>, res</i>)<br>
						z:gcdext(a<i>,&nbsp;r1,&nbsp;r2,&nbsp;r3</i>)</code></td>
				<td><code>mpz_gcd<br>
						mpz_gcd_ui<br>
						mpz_gcdext</code></td>
			</tr>
			<tr><td><code>z:get_d()<br>
						z:get_d_2exp()</code></td>
				<td><code>mpz_get_d<br>
						mpz_get_d_2exp</code></td>
			</tr>
			<tr><td><code>z:get_str(<i>base</i>)</code></td>
				<td><code>mpz_get_str</code></td>
				<td>If <code>base</code> is not specified it defaults to
					10.</td>
			</tr>
			<tr><td><code>z:hamdist(a)</code></td>
				<td><code>mpz_hamdist</code></td>
			</tr>
			<tr><td><code>z:invert(a<i>, res</i>)</code></td>
				<td><code>mpz_invert</code></td>
				<td>Returns nothing if no inverse exists</td>
			</tr>
			<tr><td><code>z:ior(a<i>, res</i>)</code></td>
				<td><code>mpz_ior</code></td>
			</tr>
			<tr><td><code>z:jacobi(a)<br>
						z:legendre(a)<br>
						z:kronecker(a)</code></td>
				<td><code>mpz_kronecker<br>
						mpz_kronecker_si<br>
						mpz_kronecker_ui</code></td>
				<td>The functions <code>z:jacobi</code>,
					<code>z:legendre</code> and <code>z:kronecker</code> are
					identical</td>
			</tr>
			<tr><td><code>z:rjacobi(a)<br>
						z:rlegendre(a)<br>
						z:rkronecker(a)</code></td>
				<td><code>mpz_kronecker<br>
						mpz_si_kronecker<br>
						mpz_ui_kronecker</code></td>
				<td>As <code>z:jacobi</code>, <code>z:legendre</code> and
					<code>z:kronecker</code> but with reversed arguments.  All
					three functions are identical</td>
			</tr>
			<tr><td><code>z:lcm(a<i>, res</i>)</code></td>
				<td><code>mpz_lcm<br>
						mpz_lcm_ui</code></td>
			</tr>
			<tr><td><code>z:mod(a<i>, res</i>)</code></td>
				<td><code>mpz_mod<br>
						mpz_fdiv_r_ui</code></td>
				<td>If <code>a</code> is a Lua number in the (un)signed long
					range then the modulus as a Lua number is returned as a
					second return value.</td> 
			</tr>
			<tr><td><code>z:mul(a<i>, res</i>)<br>
						z:mul_2exp(a<i>, res</i>)</code></td>
				<td><code>mpz_mul<br>
						mpz_mul_si<br>
						mpz_mul_ui<br>
						mpz_mul_2exp</code></td>
			</tr>
			<tr><td><code>z:neg(<i>res</i>)</code></td>
				<td><code>mpz_neg</code></td>
			</tr>
			<tr><td><code>z:nextprime(<i>res</i>)</code></td>
				<td><code>mpz_nextprime</code></td>
			</tr>
			<tr><td><code>z:perfect_power()</code></td>
				<td><code>mpz_perfect_power_p</code></td>
				<td>Result is a boolean</td>
			</tr>
			<tr><td><code>z:perfect_square()</code></td>
				<td><code>mpz_perfect_square_p</code></td>
				<td>Result is a boolean</td>
			</tr>
			<tr><td><code>z:popcount()</code></td>
				<td><code>mpz_popcount</code></td>
			</td>
			<tr><td><code>z:pow(a<i>, res</i>)</code></td>
				<td><code>mpz_pow_ui</code></td>
				<td>The exponent <code>a</code> must be in the unsigned long
					range.</td>
			</tr>
			<tr><td><code>z:powm(a1, a2<i>, res</i>)</code></td>
				<td><code>mpz_powm<br>
						mpz_powm_ui</code></td>
			</tr>
			<tr><td><code>z:probab_prime(<i>a</i>)</code></td>
				<td><code>mpz_probab_prime_p</code></td>
				<td>Result is <code>false</code>, <code>1</code> or
					<code>2</code>.  If the number <code>a</code> of tests is
					not specified it defaults to 10.</td>
			</tr>
			<tr><td><code>z:remove(a<i>, res</i>)</code></td>
				<td><code>mpz_remove</code></td>
			</tr>
			<tr><td><code>z:root(a<i>, res</i>)<br>
						z:rootrem(a<i>, r1, r2</i>)</code></td>
				<td><code>mpz_root<br>
						mpz_rootrem</code></td>
			</tr>
			<tr><td><code>z:scan0(<i>a</i>)<br>
						z:scan1(<i>a</i>)</code></td>
				<td><code>mpz_scan0<br>
						mpz_scan1</code></td>
				<td>A <code>a</code> is not specified then it defaults to 0
					(zero).</td>
			</tr>
			<tr><td><code>z:set(a<i>, base</i>)</code></td>
				<td><code>mpz_set<br>
						mpz_set_d<br>
						mpz_set_f<br>
						mpz_set_str</code></td>
				<td>Changes the value of <code>self</code>.  Returns nothing.
					If <code>a</code> is a string then an optional base can be
					specified.  See the description of global function
					<code>z</code> for further details.</td>
			</tr>
			<tr><td><code>z:setbit(a<i>, res</i>)</code></td>
				<td><code>mpz_setbit</code></td>
			</tr>
			<tr><td><code>z:sgn()</code></td>
				<td><code>mpz_sgn</code></td>
			</tr>
			<tr><td><code>z:sizeinbase(<i>a</i>)</code></td>
				<td><code>mpz_sizeinbase</code></td>
				<td>If the base <code>a</code> is not specified then it
					defaults to 10.</td>
			</tr>
			<tr><td><code>z:sqrt(<i>res</i>)<br>
						z:sqrtrem(<i>r1, r2</i>)</code></td>
				<td><code>mpz_sqrt<br>
						mpz_sqrtrem</code></td>
			</tr>
			<tr><td><code>z:sub(a<i>, res</i>)<br>
						z:rsub(a<i>, res</i>)</code></td>
				<td><code>mpz_sub<br>
						mpz_sub_ui</br>
						mpz_ui_sub</code></td>
				<td>Method <code>z:rsub</code> acts as <code>z:sub</code> but
					with reversed operands.</td>
			</tr>
			<tr><td><code>z:submul(a1, a2)</code></td>
				<td><code>mpz_submul<br>
						mpz_submul_ui</code></td>
				<td>Changes the value of <code>self</code> to <code>self -
						a1*a2</code>.  Returns nothing.</td>
			</tr>
			<tr><td><code>z:tdiv_q(a<i>, res</i>)<br>
						z:tdiv_q_2exp(a<i>, res</i>)<br>
						z:tdiv_qr(a<i>, r1, r2</i>)<br>
						z:tdiv_r(a<i>, res</i>)<br>
						z:tdiv_r_2exp(a<i>, res</i>)<br>
						z:tdiv(a)</code></td>
				<td><code>mpz_tdiv_q<br>
						mpz_tdiv_q_ui<br>
						mpz_tdiv_q_2exp<br>
						mpz_tdiv_r<br>
						mpz_tdiv_r_ui<br>
						mpz_tdiv_r_2exp<br>
						mpz_tdiv_qr<br>
						mpz_tdiv_qr_ui<br>
						mpz_tdiv_ui</code></td>
				<td>If <code>a</code> is a Lua number in the (un)signed long
					range then <code>z:tdiv_q</code>, <code>z:tdiv_r</code> and
					<code>z:tdiv_qr</code> all return the <i>remainder</i> as
					an additional Lua number return value.  The method
					<code>z:tdiv</code> takes an argument in the (un)signed
					long range and returns only the <i>remainder</i> as a Lua
					number.</td>
			</tr>
			<tr><td><code>z:tstbit(a)</code></td>
				<td><code>mpz_tstbit</code></td>
				<td>Returns <code>0</code> or <code>1</code>.</td>
			</tr>
			<tr><td><code>z:xor(a<i>, res</i>)</code></td>
				<td><code>mpz_xor</code></td>
			</tr>
		</table></p>

		<h3>Floating point methods</h3>
		<p>The table below lists the methods of floating point object.
		Arguments in <i>italics</i> are optional.  Refer to the GMP manual [<a
			href="#ref2">2</a>] for further details.</p>

		<p><table>
			<tr><td><b>Method</b></td>
				<td><b>Implemented with</b></td>
				<td><b>Description</b></td>
			</tr>
			<tr><td><code>f:__tostring()<br>
						f:__concat(a)</code></td>
				<td><code>gmp_asprintf</code></td>
				<td>The floating point is formatted with the format specifier
					&ldquo;<code>%.Fg</code>&rdquo;.</td>
			</tr>
			<tr><td><code>f:__add(a)<br>
						f:__sub(a)</code></td>
				<td><code>mpf_add<br>
						mpf_add_ui<br>
						mpf_sub<br>
						mpf_sub_ui<br>
						mpf_ui_sub</code></td>
			</tr>
			<tr><td><code>f:__mul(a)</code></td>
				<td><code>mpf_mul<br>
						mpf_mul_ui</code></td>
			</tr>
			<tr><td><code>f:__div(a)</code></td>
				<td><code>mpf_div<br>
						mpf_div_ui<br>
						mpf_ui_div</code></td>
			</tr>
			<tr><td><code>f:__unm()</code></td>
				<td><code>mpf_neg</code></td>
			</tr>
			<tr><td><code>f:__pow(a)</code></td>
				<td><code>mpf_pow_ui</code></td>
				<td>The exponent <code>a</code> must be in the unsigned long
					range.</td>
			</tr>
			<tr><td><code>f:__lt(a)<br>
						f:__le(a)<br>
						f:__eq(a)</code></td>
				<td><code>mpf_cmp<br>
						mpf_cmp_d<br>
						mpf_cmp_si<br>
						mpf_cmp_ui</code></td>
			</tr>
			<tr><td><code>f:__gc()</code></td>
				<td><code>mpf_clear</code></td>
			</tr>
			<tr><td><code>f:abs(<i>res</i>)</code></td>
				<td><code>mpf_abs</code></td>
			</tr>
			<tr><td><code>f:add(a<i>, res</i>)</code></td>
				<td><code>mpf_add<br>
						mpf_add_ui</code></td>
			</tr>
			<tr><td><code>f:ceil(<i>res</i>)</code></td>
				<td><code>mpf_ceil</code></td>
			</tr>
			<tr><td><code>f:cmp(a)</code></td>
				<td><code>mpf_cmp<br>
						mpf_cmp_d<br>
						mpf_cmp_si<br>
						mpf_cmp_ui</code></td>
			</tr>
			<tr><td><code>f:div(a<i>, res</i>)<br>
						f:rdiv(a<i>, res</i>)</code></td>
				<td><code>mpf_div<br>
						mpf_div_ui<br>
						mpf_ui_div</code></td>
				<td>The function <code>f:rdiv</code> is identical to
					<code>f:div</code> but with reversed arguments.</td>
			</tr>
			<tr><td><code>f:eq(a1, a2)</code></td>
				<td><code>mpf_eq</code></td>
				<td>Result is a boolean.</td>
			</tr>
			<tr><td><code>f:fits_sint()<br>
						f:fits_sshort()<br>
						f:fits_uint()<br>
						f:fits_ulong()<br>
						f:fits_ushort()</code></td>
				<td><code>mpf_fits_sint_p<br>
						mpf_fits_sshort_p<br>
						mpf_fits_uint_p<br>
						mpf_fits_ulong_p<br>
						mpf_fits_ushort_p</code></td>
				<td>Result is a boolean.</td>
			</tr>
			<tr><td><code>f:floor(<i>res</i>)</code></td>
				<td><code>mpf_floor</code></td>
			</tr>
			<tr><td><code>f:format(fmt<i>, prec</i>)</code></td>
				<td><code>gmp_asprintf</code></td>
				<td>Formats <code>self</code> according to the format specifier
					string <code>fmt</code>.  The leading
					&lsquo;<code>%</code>&rsquo; character is optional.  The
					type &lsquo;<code>F</code>&rsquo; is implied but may be
					specified explicitly.  The conversion character is
					restricted to one of &ldquo;<code>aAeEfgG</code>&rdquo;.
					If the precision is given by &ldquo;<code>.*</code>&rdquo;
					then <code>prec</code> must specify the precision.
					Otherwise <code>prec</code> must be unspecified.</td>
			</tr>
			<tr><td><code>f:get_d()<br>
						f:get_d_2exp()</code></td>
				<td><code>mpf_get_d<br>
						mpf_get_d_2exp</code></td>
			</tr>
			<tr><td><code>f:get_prec()</code></td>
				<td><code>mpf_get_prec</code></td>
			</tr>
			<tr><td><code>f:get_str(<i>base,&nbsp;size</i>)</code></td>
				<td><code>mpf_get_str</code></td>
				<td>Returns a string of digits and an exponent.  If
					<code>base</code> is unspecified it defaults to 10.  If
					<code>size</code> is unspecified it defaults to the
					precision of <code>self</code> in the given base.</td>
			</tr>
			<tr><td><code>f:integer()</code></td>
				<td><code>mpf_integer_p</code></td>
				<td>Result is a boolean.</td>
			</tr>
			<tr><td><code>f:mul(a<i>, res</i>)<br>
						f:mul_2exp(a<i>,&nbsp;res</i>)</code></td>
				<td><code>mpf_mul<br>
						mpf_mul_ui<br>
						mpf_mul_2exp</code></td>
			</tr>
			<tr><td><code>f:neg(<i>res</i>)</code></td>
				<td><code>mpf_neg</code></td>
			</tr>
			<tr><td><code>f:pow(a<i>, res</i>)</code></td>
				<td><code>mpf_pow_ui</code></td>
				<td>The exponent <code>a</code> must be int the unsigned long
					range.</td>
			</tr>
			<tr><td><code>f:reldiff(a<i>, res</i>)</code></td>
				<td><code>mpf_reldiff</code></td>
			</tr>
			<tr><td><code>f:set_prec(a)</code></td>
				<td><code>mpf_set_prec</code></td>
			</tr>
			<tr><td><code>f:set(a<i>, base</i>)</code></td>
				<td><code>mpf_set<br>
						mpf_set_d<br>
						mpf_set_str<br>
						mpf_set_z</code></td>
				<td>Change the value of <code>self</code>.  Returns nothing.
					See the description of the global function <code>f</code>
					for details.</td>
			</tr>
			<tr><td><code>f:sgn()</code></td>
				<td><code>mpf_sgn</code></td>
			</tr>
			<tr><td><code>f:sqrt(<i>res</i>)</code></td>
				<td><code>mpf_sqrt</code></td>
			</tr>
			<tr><td><code>f:sub(a<i>, res</i>)<br>
						f:rsub(a<i>, res</i>)</code></td>
				<td><code>mpf_sub<br>
						mpf_sub_ui<br>
						mpf_ui_sub</code></td>
				<td>Method <code>f:rsub</code> is identical to
					<code>f:sub</code> but with reversed arguments.</td>
			</tr>
			<tr><td><code>f:trunc(<i>res</i>)</code></td>
				<td><code>mpf_trunc</code></td>
			</tr>
		</table></p>

		<h3>Random state methods</h3>

		<p>The table below lists the methods of a random state object.
		Arguments in <i>italics</i> are optional.  Refer to the GMP manual [<a
			href="#ref2">2</a>] for further details.</p>

		<table>
			<tr><td><b>Method</b></td>
				<td><b>Implemented with</b></td>
				<td><b>Description</b></td>
			</tr>
			<tr><td><code>rand:__tostring()</code></td>
				<td><code>N/A</code></td>
			</tr>
			<tr><td><code>rand:__gc()</code></td>
				<td><code>gmp_randclear</code></td>
			</tr>
			<tr><td><code>rand:seed(a)</code></td>
				<td><code>gmp_randseed<br>
						gmp_randseed_ui</code></td>
				<td>Set a seed value for the random state.</td>
			</tr>
			<tr><td><code>rand:zbits(a<i>, res</i>)</code></td>
				<td><code>mpz_urandomb</code></td>
				<td>Generate an integer of at most <code>a</code> bits.</td>
			</tr>
			<tr><td><code>rand:z(a<i>, res</i>)</code></td>
				<td><code>mpz_urandomm</code></td>
				<td>Generate an integer in the interval [0, <code>a</code>).</td>
			</tr>
			<tr><td><code>rand:fbits(a<i>,&nbsp;res</i>)</code></td>
				<td><code>mpf_urandomb</code></td>
				<td>Generate a floating point in the interval [0, 1) with a
					mantissa of at most <code>a</code> bits.</td>
			</tr>
		</table>

		<h3>License</h3>
		<p>The lgmp package is distributed under the MIT license.  See the
		&ldquo;COPYRIGHT&rdquo; file in the distribution of lgmp.</p>

		<h3>References</h3>
		<p><table>
			<tr><td><a name="ref1"/>[1]</td>
				<td><a href="http://gmplib.org">GMP &laquo;Arithmetic without
						limitations&raquo;</a></td>
			</tr>
			<tr><td><a name="ref2"/>[2]</td>
				<td><a href="http://gmplib.org/manual"/>GNU MP Manual</a></td>
			</tr>
		</table></p>
	</body>
</html>
