show stoppers:
- associate features and categories

unsorted:
- OK: answer in network data loader, params: ("REQUEST", "CategoryHierarchyRequest") 
  content:
  "<?xml version="1.0" encoding="UTF-8" standalone="no"?><!DOCTYPE tree SYSTEM "CategoryHierarchy.simpleform"><tree><item id="1">     <category>Categorii</category>       <description>Categorii de obiecte din sistem</description></i" m></tree>
  ERROR: answer for unknown request of doctype "CategoryHierarchyRequest" true 
  handle result of command "QUIT" 
- initial look and feel, theme (windows 7, menu on right, why?) => test again
- new picture picker
  - upload a set of images, keep them on the server
  - use them from a picklist (with images)
  
musts:
- SSL: allow to ignore certain error, most prominent ones are
  - host mismatch
  - self-signed certificate
  - must be checkable in PreferencesDialog
- problems with size of main window to follow size of form ui
- frontend:
  - associating categories and features
- Linux, shared lib for custom widgets, similar to windows, for now
  it works on Linux, but for instance not on Solaris or Freebsd (PIC
  mixing!)
- element operations
  - reorganize tree
    - add elements 
    - delete elements/subtrees
- tab stop order for file choose, picture chooser
- element operations
  - reorganize tree
    - move elements/subtrees
- protocol
  - network loader via protocol or use client library?
- designer custom widgets
  - them in MainWindow:
    - the now case is FormWidget<init>
    - MDI or tabbed view
  - picture viewer
    - show 0 to N pictures, scrollable
- localize forms:
  - Windows doesn't retranslate on the fly! Why?
  - Windows doesn't respect language on startup for form
- localize data:
  - lists and trees need id and translations.
  - where to store the translations? server side, same as domains,
    maybe language attributes for now and separated translations later?
  - classes to map from/to:
    - QListWidget
      - localization
      - form init doesn't work when language is not en_US
    - QTreeWidget
      - localization
      - keep state of
        - sorting order of columns
        - header width
      - expandAll on load
      - open and make an item visible (for instance the location of the
        last add)
- for completion and presentation of big data
  - QListView: with model for big data, on request
  - QTreeView: with model for big data, on request
- file download, later, for reports, PDFs, etc.
- default focus on a textfield (funny, designer has no way to do it?)

nice to do:
- FormWidget:
  - provide a preview of the form?
- work more on Android port
- use QNetworkSession (for mobiles and roaming profiles)
- designer mode
  - call designer, linguist, lupdate and lrelease as external processes
  - have a spooler to delegate editing of ui, ts, qss, data to external processes
    - multiple repositores, move objects between them
    - sqlite storage
    - configuration dialog
    - http://www.vision.ee.ethz.ch/computing/sepp-irix/qt-3.0-mo/designer-manual-6.html
- add a data handler
- completion
  - combobox with linedit combined search
  - lists? trees?
- validators
  - add dynamic property for a series of validators like
    - mandatory/optional
    - integer range
    - regex
- tooltips
- how to handle domain enums with internal and presentation
  (e.g. combobox, selection)
- representation of lists of variable size, e.g. list of
  phone numbers
- states (enable/disabled, read/write or read/only) can depend
  on states of other widgets, best example is a checked group
  box for a bunch of settings, see preferences dialog)
- stop flickering in hour glas
- add authentication dialog
- language picker must show the union of all languages of all forms
  and the languages/translations in themes
- action/form switchForm:
  - need a small state machine for handling the sequence [{action}] <form>
    correctly with error handling
  - as with state machines we would have a "go back wherever you came from"
- most likely not the idea
  - 1:n relations (pick a foreign reference to another
    object), domains (e.g. pick a city in a list of possibilities)
  - grid views
- QIODevice for data loader and handler instead of a fixed byte
  array in the signal (otherwise the debug window gets complicated)
