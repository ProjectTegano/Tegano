now:
- stop the "whiteout", especially seen after assigning pictures
  (must be a protocol thing), happens mainly on Windows 7/8, not
  on Linux/Windows XPL:
  on FreeBSD: REQUEST, still in Data state, so the protocol misses
  the end somehow, the last m_answer contains a category tree (so
  it's a domain read), the tree stops in the middle: <tree><item id="45">,
  requests get stuffed into the queue, nothing gets ever executed,
  second time with printqstring m_answer (QString)0x7bae258 (length=0): ""
  - can be provoked by using non-debug XML sending and textwolf XML filter
    on Windows XP, so it is a failed signal for a partial line, must add
    a state like DataLeft (Data gets DataReading or so)
- ILLEGAL STATE 4 in dataAvailable!
- CRITICAL: "Premature end of document."
- package version switching

- open info box (modal) in feature/category/component edit and add to
  show picture information
- search with flag (with children)

musts:
- avoid table empty rows if not all attributes are set, the problem are
  answers with just one root element
- tags picked from a list and added (needs events)
- linking of categories and features
- rewrite categories, so that joins to picutes, requires/provides, tags,
  etc. are possible trhough the lua layer
- optimal size on qtreewidget to fit items (needed for linking categories
  and features linking view)
- tabbed preferences dialog, like thunderbird (in security, form management,
  etc.)
- eliminate empty row when empty result (e.g. picture search)
- show pictures in tree view
- show titles of forms somewhere in the qtclient
- scroll to selected element in a single-selection list
- push button state (disabled/enabled) based on a
  condition like {picture.id>0}
- PDF widget poppler qt4
- get sensible error message from business layer, not "lua call faled"
  - e.g. avoid deletion of in-use-pictures
  - better even: provide conditions for buttons, so they can't be
    pressed (button.state={something})
- improve group_concat to take a parameter as separator
- use simpleforms instead of funny lua parsers (example
  picture parsers)
- allow grouping into tags without a dummy groupbox or
  similar widget around it, where to put the data then?
- how to comminicate tags which are used by picture and 
  they should not be deletable?
- QTableWidget
  - implement other selection modes (column, cells)
  - remember states like sort order, column width, etc.
- QDialog instead of QWidget for forms
  - would allow to have default Enter and ESC behaviour
  - must be treated specially, as the form should NOT
    replace the UI currently being shown
- associate features and categories
- save global state to settings and read it from there
  - global.XXX variables
  - last form
- unselect trees
- frontend:
  - associating categories and features
- Linux, shared lib for custom widgets, similar to windows, for now
  it works on Linux, but for instance not on Solaris or Freebsd (PIC
  mixing!)
- element operations
  - reorganize tree
    - move elements/subtrees
- tab stop order for file choose, picture chooser
- protocol
  - network loader via protocol or use client library?
- designer custom widgets
  - them in MainWindow:
    - the now case is FormWidget<init>
    - MDI or tabbed view
  - picture viewer
    - show 0 to N pictures, scrollable
    - alternative to QTableWidget approach
- localize forms:
  - Windows doesn't retranslate on the fly! Why?
  - Windows doesn't respect language on startup for form
- localize data:
  - lists and trees need id and translations.
  - where to store the translations? server side, same as domains,
    maybe language attributes for now and separated translations later?
  - classes to map from/to:
    - QListWidget
      - localization
      - form init doesn't work when language is not en_US
    - QTreeWidget
      - localization
      - keep state of
        - sorting order of columns
        - header width
      - expandAll on load
      - open and make an item visible (for instance the location of the
        last add)
- for completion and presentation of big data
  - QListView: with model for big data, on request
  - QTreeView: with model for big data, on request
- file download, later, for reports, PDFs, etc.

nice to do:
- FormWidget:
  - provide a preview of the form?
- work more on Android port
- use QNetworkSession (for mobiles and roaming profiles)
- designer mode
  - call designer, linguist, lupdate and lrelease as external processes
  - have a spooler to delegate editing of ui, ts, qss, data to external processes
    - multiple repositores, move objects between them
    - sqlite storage
    - configuration dialog
    - http://www.vision.ee.ethz.ch/computing/sepp-irix/qt-3.0-mo/designer-manual-6.html
- add a data handler
- completion
  - combobox with linedit combined search
  - lists? trees?
- validators
  - add dynamic property for a series of validators like
    - mandatory/optional
    - integer range
    - regex
- tooltips
- how to handle domain enums with internal and presentation
  (e.g. combobox, selection)
- representation of lists of variable size, e.g. list of
  phone numbers
- states (enable/disabled, read/write or read/only) can depend
  on states of other widgets, best example is a checked group
  box for a bunch of settings, see preferences dialog)
- stop flickering in hour glas
- add authentication dialog
- language picker must show the union of all languages of all forms
  and the languages/translations in themes
- action/form switchForm:
  - need a small state machine for handling the sequence [{action}] <form>
    correctly with error handling
  - as with state machines we would have a "go back wherever you came from"
- most likely not the idea
  - 1:n relations (pick a foreign reference to another
    object), domains (e.g. pick a city in a list of possibilities)
  - grid views
- QIODevice for data loader and handler instead of a fixed byte
  array in the signal (otherwise the debug window gets complicated)
