show-stoppers:
- workflow for form
  - forms in forms: show multiple views, in theory a widget of
    FormWidget's should to the trick
  - what has to be communicated between forms? example: edit
    existing item, add new item, show item data (example form5 in test)
  - passing hidden parameters between forms (example ID of a
    product to show)
  - action (CRUD) is a parameter to REQUEST <action>
- define actions (CRUD)
  - init: empty form with default values (I)
  - create: request new item from server (C)
  - get: request data from server (R)
  - send: send data to server (U)
  - delete (D)
  => first step, so we can do the file/db implementations, the network
     sees only request(action), action being a mere parameter
- protocol
  - add action
  - add doctype to data XML
  - content handling by line
  - base64
- element operations
  - reorganize tree
    - add elements 
    - move elements/subtrees
    - delete elements/subtrees
  - file upload: we need that for product images, etc.
    - base64 encoding of file uploads
  
musts:
- protocol
  - network loader via protocol or use client library?
- designer custom widgets
  - FormWidget:
    - implement a form widget as placeholder for the real thing
    - loads via a form/data loader?
    - provide a preview of the form?
  - them in MainWindow:
    - the now case is FormWidget<init>
    - MDI or tabbed view
  - picture viewer
    - show 0 to N pictures, scrollable
- localize forms:
  - Windows doesn't retranslate on the fly! Why?
  - Windows doesn't respect language on startup for form
- localize data:
  - lists and trees need id and translations.
  - where to store the translations? server side, same as domains,
    maybe language attributes for now and separated translations later?
  - classes to map from/to:
    - QListWidget
      - localization
      - form init doesn't work when language is not en_US
    - QTreeWidget
      - localization
- for completion and presentation of big data
  - QListView: with model for big data, on request
  - QTreeView: with model for big data, on request
- file download, later, for reports, PDFs, etc.
- default focus on a textfield (funny, designer has no way to do it?)

nice to do:
- work more on Android port
- use QNetworkSession (for mobiles and roaming profiles)
- designer mode
  - call designer, linguist, lupdate and lrelease as external processes
  - have a spooler to delegate editing of ui, ts, qss, data to external processes
    - multiple repositores, move objects between them
    - sqlite storage
    - configuration dialog
    - http://www.vision.ee.ethz.ch/computing/sepp-irix/qt-3.0-mo/designer-manual-6.html
- add a data handler
- completion
  - combobox with linedit combined search
  - lists? trees?
- validators
  - add dynamic property for a series of validators like
    - mandatory/optional
    - integer range
    - regex
- tooltips
- how to handle domain enums with internal and presentation
  (e.g. combobox, selection)
- representation of lists of variable size, e.g. list of
  phone numbers
- states (enable/disabled, read/write or read/only) can depend
  on states of other widgets, best example is a checked group
  box for a bunch of settings, see preferences dialog)
- stop flickering in hour glas
- add authentication dialog
- language picker must show the union of all languages of all forms
  and the languages/translations in themes
- action/form switchForm:
  - need a small state machine for handling the sequence [{action}] <form>
    correctly with error handling
  - as with state machines we would have a "go back wherever you came from"
- most likely not the idea
  - 1:n relations (pick a foreign reference to another
    object), domains (e.g. pick a city in a list of possibilities)
  - grid views
- QIODevice for data loader and handler instead of a fixed byte
  array in the signal (otherwise the debug window gets complicated)
