Description: [result_of] Inconsistent results between function references and function pointers
 For function references, decltype-based boost::result_of uses decltype to determine the type. But, for function pointers, decltype-based boost::result_of falls back to boost::tr1_result_of and does not use decltype.

This inconsistency makes different results for function references and function pointers. On clang trunk and gcc-4.7 in a C++11 mode, for "typedef const int F();",

    decltype-based boost::result_of<F&()> is int, but
    decltype-based boost::result_of<F*()> is const int. 

To remove the inconsistency, decltype-based boost::result_of should use decltype for function pointers. 

Applied upstream patch https://svn.boost.org/trac/boost/changeset/77702

Author: djwalker 
Bug: 671409
Forwarded: https://svn.boost.org/trac/boost/ticket/6755

Index: boost/utility/detail/result_of_iterate.hpp
===================================================================
--- a/boost/utility/detail/result_of_iterate.hpp	(revision 77701)
+++ b/boost/utility/detail/result_of_iterate.hpp	(revision 77702)
@@ -5,6 +5,11 @@
 //  1.0. (See accompanying file LICENSE_1_0.txt or copy at
 //  http://www.boost.org/LICENSE_1_0.txt)
 
+//  Copyright Daniel Walker, Eric Niebler, Michel Morin 2008-2012.
+//  Use, modification and distribution is subject to the Boost Software
+//  License, Version 1.0. (See accompanying file LICENSE_1_0.txt or
+//  copy at http://www.boost.org/LICENSE_1_0.txt)
+
 // For more information, see http://www.boost.org/libs/utility
 #if !defined(BOOST_PP_IS_ITERATING)
 # error Boost result_of - do not include this file!
@@ -40,7 +45,7 @@
          BOOST_PP_ENUM_PARAMS(BOOST_PP_ITERATION(),typename T)>
 struct result_of<F(BOOST_PP_ENUM_PARAMS(BOOST_PP_ITERATION(),T))>
     : mpl::if_<
-          mpl::or_< is_pointer<F>, is_member_function_pointer<F> >
+          is_member_function_pointer<F>
         , detail::tr1_result_of_impl<
             typename remove_cv<F>::type, 
             typename remove_cv<F>::type(BOOST_PP_ENUM_PARAMS(BOOST_PP_ITERATION(),T)), false
Index: libs/utility/test/result_of_test.cpp
===================================================================
--- a/libs/utility/test/result_of_test.cpp	(revision 77701)
+++ b/libs/utility/test/result_of_test.cpp	(revision 77702)
@@ -193,7 +193,6 @@
   BOOST_STATIC_ASSERT((is_same<result_of<mem_func_ptr_v(X,char)>::type, int>::value));
   BOOST_STATIC_ASSERT((is_same<result_of<mem_func_ptr_cv(X,char)>::type, int>::value));
   BOOST_STATIC_ASSERT((is_same<result_of<mem_func_ptr_0(X)>::type, int>::value)); 
-  BOOST_STATIC_ASSERT((is_same<result_of<func_ptr(void)>::type, int>::value));
 
   BOOST_STATIC_ASSERT((is_same<tr1_result_of<func_ptr(char, float)>::type, int>::value));
   BOOST_STATIC_ASSERT((is_same<tr1_result_of<func_ref(char, float)>::type, int>::value));
@@ -205,6 +204,7 @@
   BOOST_STATIC_ASSERT((is_same<tr1_result_of<mem_func_ptr_cv(X,char)>::type, int>::value));
   BOOST_STATIC_ASSERT((is_same<tr1_result_of<mem_func_ptr_0(X)>::type, int>::value)); 
   BOOST_STATIC_ASSERT((is_same<tr1_result_of<func_ptr(void)>::type, int>::value));
+  BOOST_STATIC_ASSERT((is_same<tr1_result_of<func_ref(void)>::type, int>::value));
 
   BOOST_STATIC_ASSERT((is_same<result_of<result_of_member_function_template(double)>::type, double>::value));
   BOOST_STATIC_ASSERT((is_same<result_of<const result_of_member_function_template(double)>::type, const double>::value));
