Description: boost/random/detail/integer_log2.hpp:71:35: warning: always_inline function might not be inlinable
 When compiled with GCC 4.7.0, boost/random/detail/integer_log2.hpp triggers a warning:

#include <boost/random/mersenne_twister.hpp>

int main() { return 0; }

In file included from boost_1_49_0/include/boost/random/detail/large_arithmetic.hpp:19:0,
                 from boost_1_49_0/include/boost/random/detail/const_mod.hpp:23,
                 from boost_1_49_0/include/boost/random/detail/seed_impl.hpp:27,
                 from boost_1_49_0/include/boost/random/mersenne_twister.hpp:29,
                 from /tmp/always_inline.cpp:1:
boost_1_49_0/include/boost/random/detail/integer_log2.hpp:71:35: warning: always_inline function might not be inlinable [-Wattributes]

Author: peter@… 
Bug: 671409
Forwarded: https://svn.boost.org/trac/boost/ticket/6854



--- boost_1_49_0.orig/boost/random/detail/integer_log2.hpp
+++ boost_1_49_0/boost/random/detail/integer_log2.hpp
@@ -27,7 +27,7 @@
 #elif defined(BOOST_MSVC)
 #define BOOST_RANDOM_DETAIL_CONSTEXPR __forceinline
 #elif defined(__GNUC__) && __GNUC__ >= 4
-#define BOOST_RANDOM_DETAIL_CONSTEXPR __attribute__((const)) __attribute__((always_inline))
+#define BOOST_RANDOM_DETAIL_CONSTEXPR inline __attribute__((const)) __attribute__((always_inline))
 #else
 #define BOOST_RANDOM_DETAIL_CONSTEXPR inline
 #endif
