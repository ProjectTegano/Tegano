The example template 'mylang' binding:

	The example implements a function call of a language binding with its input passed
	as structure and the output returned as structure.
		See mylang::StructureR mylang::call( const proc::ProcessorProvider*,Instance*,const StructureR&);

	Besides the call you have to implement iterators on the data structure for the result
	and setters and getters to build the structure that is passed as argument.

	The implementation is in mylangFunctionCall.cpp


Special cases in bindings:

1) Handling bindings without declaration of data structures (for example python):

Scripting that do not know declaration of data cannot distinguish themselves between
arrays containing one element and a single value. These languages can set the flag
TypedInputFilter::SerializeWithIndices in their input to get the information needed,
if available. Please note that some filters cannot provide this information and may
throw an exception because of this. For example ordinary input filters throw
"filter cannot serialize with indices". This error message is not very much user
friendly and explaining the problem. So exception thrown should be catched by the
language binding when calling setFlag and be translated into something more
explicit like for example "the python binding cannot handle input without input form declaration".
When TypedInputFilter::SerializeWithIndices is set then arrays are transfered with an
open for the element name, a correspoding close and an open and close with an incremental
index starting from 1 for every element.


