--  EMPLOYEE
TRANSACTION InsertEmployee
BEGIN
	DO INSERT INTO Employee (name, status, addr_line1, addr_line2, addr_postalcode, addr_district, addr_country)
		VALUES ($(name), $(status), $(addr_line1), $(addr_line2), $(addr_postalcode), $(addr_district), $(addr_country));
	DO getLastIdEmployee();
	INTO . DO UNIQUE NONEMPTY SELECT * FROM Employee WHERE id = $1;
END

TRANSACTION UpdateEmployee
BEGIN
	DO UPDATE Employee SET
			name=$(name), status=$(status), addr_line1=$(addr_line1), addr_line2=$(addr_line2),
			addr_postalcode=$(addr_postalcode), addr_district=$(addr_district), addr_country=$(addr_country)
		WHERE id=$(id);
END

TRANSACTION DeleteEmployee
BEGIN
	DO DELETE FROM Employee WHERE id=$(id);
END

TRANSACTION GetEmployee
BEGIN
	INTO . DO UNIQUE NONEMPTY SELECT id, name, status, addr_line1, addr_line2, addr_postalcode, addr_district, addr_country FROM Employee WHERE id=$(id);
END

--  Not very efficient search :-)
TRANSACTION SearchEmployee
BEGIN
	DO CREATE TEMPORARY TABLE tmpSearchEmployeeResult( id int);
	FOREACH pattern DO INSERT INTO tmpSearchEmployeeResult SELECT id FROM Employee
		WHERE name LIKE '%$(.)%'
		OR status LIKE '%$(.)%'
		OR addr_line1 LIKE '%$(.)%'
		OR addr_line2 LIKE '%$(.)%'
		OR addr_postalcode LIKE '%$(.)%'
		OR addr_district LIKE '%$(.)%'
		OR addr_country LIKE '%$(.)%';
	INTO employee DO SELECT * FROM Employee WHERE id IN (SELECT DISTINCT id FROM tmpSearchEmployeeResult);
	DO DROP TABLE tmpSearchEmployeeResult;
END

TRANSACTION ListEmployee
BEGIN
	INTO employee DO SELECT * FROM Employee;
END




--  CUSTOMER
TRANSACTION InsertCustomer
BEGIN
	DO INSERT INTO Customer (name, description, addr_line1, addr_line2, addr_postalcode, addr_district, addr_country)
		VALUES ($(name), $(description), $(addr_line1), $(addr_line2), $(addr_postalcode), $(addr_district), $(addr_country));
	DO getLastIdCustomer();
	INTO . DO UNIQUE NONEMPTY SELECT * FROM Customer WHERE id = $1;
END

TRANSACTION UpdateCustomer
BEGIN
	DO UPDATE Customer SET
			name=$(name), description=$(description), addr_line1=$(addr_line1), addr_line2=$(addr_line2),
			addr_postalcode=$(addr_postalcode), addr_district=$(addr_district), addr_country=$(addr_country)
		WHERE id=$(id);
END

TRANSACTION DeleteCustomer
BEGIN
	DO DELETE FROM Customer WHERE id=$(id);
END

TRANSACTION GetCustomer
BEGIN
	INTO . DO UNIQUE NONEMPTY SELECT id, name, description, addr_line1, addr_line2, addr_postalcode, addr_district, addr_country FROM Customer WHERE id=$(id);
END

--  Not very efficient search :-)
TRANSACTION SearchCustomer
BEGIN
	DO CREATE TEMPORARY TABLE tmpSearchCustomerResult( id int);
	FOREACH pattern DO INSERT INTO tmpSearchCustomerResult SELECT id FROM Customer
		WHERE name LIKE '%$(.)%'
		OR description LIKE '%$(.)%'
		OR addr_line1 LIKE '%$(.)%'
		OR addr_line2 LIKE '%$(.)%'
		OR addr_postalcode LIKE '%$(.)%'
		OR addr_district LIKE '%$(.)%'
		OR addr_country LIKE '%$(.)%';
	INTO customer DO SELECT * FROM Customer WHERE id IN (SELECT DISTINCT id FROM tmpSearchCustomerResult);
	DO DROP TABLE tmpSearchCustomerResult;
END

TRANSACTION ListCustomer
BEGIN
	INTO customer DO SELECT * FROM Customer;
END
TRANSACTION ListCustomerShort
BEGIN
	INTO customer DO SELECT id,name,description FROM Customer;
END
TRANSACTION ListCustomerRef
BEGIN
	INTO customer DO SELECT id,name AS _ FROM Customer;
END



-- CUSTOMER RELATION
TRANSACTION InsertCustomerRelation
BEGIN
	DO INSERT INTO CustomerRelation (employeeid, customerid, description)
		VALUES ($(employeeid), $(customerid), $(description));
END

TRANSACTION UpdateCustomerRelation
BEGIN
	DO UPDATE CustomerRelation SET
			description=$(description)
		WHERE employeeid=$(employeeid) AND customerid=$(customerid);
END

TRANSACTION DeleteCustomerRelation
BEGIN
	DO DELETE FROM CustomerRelation
		WHERE employeeid=$(employeeid) AND customerid=$(customerid);
END

TRANSACTION GetCustomerRelation
BEGIN
	INTO . DO UNIQUE SELECT employeeid, customerid, description FROM CustomerRelation
		WHERE employeeid=$(employeeid) AND customerid=$(customerid);
END
TRANSACTION GetCustomerRelationEmployee
BEGIN
	INTO . DO SELECT CustomerRelation.employeeid, Customer.name AS customername, CustomerRelation.customerid, CustomerRelation.description FROM Customer,CustomerRelation
		WHERE employeeid=$(employeeid) AND Customer.id=$(CustomerRelation.customerid);
END
TRANSACTION GetCustomerRelationCustomer
BEGIN
	INTO relation DO SELECT CustomerRelation.employeeid, Employee.name AS employeename, Employee.status AS employeestatus, CustomerRelation.customerid, CustomerRelation.description FROM Employee,CustomerRelation
		WHERE customerid=$(customerid) AND Employee.id=$(CustomerRelation.employeeid);
END





--  PROJECT
TRANSACTION InsertProject
BEGIN
	DO INSERT INTO Project (customerid, name, description)
		VALUES ($(customerid), $(name), $(description));
END

TRANSACTION UpdateProject
BEGIN
	DO UPDATE Project SET
			customerid=$(customerid), name=$(name), description=$(description)
		WHERE id=$(id);
END

TRANSACTION DeleteProject
BEGIN
	DO DELETE FROM Project WHERE id=$(id);
END

TRANSACTION GetProjectEdit
BEGIN
	DO UNIQUE NONEMPTY
		SELECT Project.id,Project.customerid,Customer.name AS customername,Project.name,Project.description
		FROM Project,Customer WHERE Project.id=$(id) AND Project.customerid = Customer.id;
	INTO . DO SELECT $1 AS id, $4 AS name, $5 AS description;
	DO UNIQUE NONEMPTY
		SELECT Project.id,Project.customerid,Customer.name AS customername,Project.name,Project.description
		FROM Project,Customer WHERE Project.id=$(id) AND Project.customerid = Customer.id;
	INTO customer DO SELECT $2 AS id, $3 AS _;
END
TRANSACTION GetProject
BEGIN
	INTO . DO UNIQUE NONEMPTY
		SELECT Project.id,
			Project.customerid, Customer.name AS customername,
			Project.name,Project.description
		FROM Project,Customer WHERE Project.id=$(id) AND Project.customerid = Customer.id;
END

--  Not very efficient search :-)
TRANSACTION SearchProject
BEGIN
	DO CREATE TEMPORARY TABLE tmpSearchProjectResult( id int);
	FOREACH pattern DO INSERT INTO tmpSearchProjectResult SELECT id FROM Project
		WHERE name LIKE '%$(.)%'
		OR description LIKE '%$(.)%';
	INTO project DO
		SELECT Project.id,Project.customerid,Project.name,Project.description
		FROM Project,Customer
		WHERE Project.customerid = Customer.id
		AND Project.id IN (SELECT DISTINCT id FROM tmpSearchProjectResult);
	DO DROP TABLE tmpSearchProjectResult;
END

TRANSACTION ListProject
BEGIN
	INTO project DO SELECT Project.id,Customer.name as customername,Project.name,Project.description
		FROM Project,Customer
		WHERE Project.customerid = Customer.id;
END

TRANSACTION ListProjectCustomer
BEGIN
	INTO project DO SELECT Project.id,Customer.name as customername,Project.name,Project.description
		FROM Project,Customer
		WHERE Project.customerid = Customer.id AND Customer.id = $(customerid);
END




--  ACTIVITY CATEGORY
TRANSACTION InsertActivityCategory
BEGIN
	DO INSERT INTO ActivityCategory (name, description)
		VALUES ($(name), $(description));
	DO getLastIdActivityCategory();
	INTO . DO UNIQUE NONEMPTY SELECT * FROM ActivityCategory WHERE id = $1;
END

TRANSACTION UpdateActivityCategory
BEGIN
	DO UPDATE ActivityCategory SET
			name=$(name), description=$(description)
		WHERE id=$(id);
END

TRANSACTION DeleteActivityCategory
BEGIN
	DO DELETE FROM ActivityCategory WHERE id=$(id);
END

TRANSACTION GetActivityCategory
BEGIN
	INTO . DO UNIQUE NONEMPTY SELECT * FROM ActivityCategory WHERE id=$(id);
END

--  Not very efficient search :-)
TRANSACTION SearchActivityCategory
BEGIN
	DO CREATE TEMPORARY TABLE tmpSearchActivityCategoryResult( id int);
	FOREACH pattern DO INSERT INTO tmpSearchActivityCategoryResult SELECT id FROM ActivityCategory
		WHERE name LIKE '%$(.)%'
		OR description LIKE '%$(.)%';
	INTO category DO SELECT * FROM ActivityCategory WHERE id IN (SELECT DISTINCT id FROM tmpSearchActivityCategoryResult);
	DO DROP TABLE tmpSearchActivityCategoryResult;
END




--  ACTIVITY CHARGING
TRANSACTION InsertActivityCharging
BEGIN
	DO INSERT INTO ActivityCharging (categoryid, validfrom, fixum, timedep, timeunit, taxes)
		VALUES ($(categoryid), $(validfrom), $(fixum), $(timedep), $(timeunit), $(taxes));
	DO getLastIdActivityCharging();
	INTO . DO UNIQUE NONEMPTY SELECT * FROM ActivityCharging WHERE id = $1;
END

TRANSACTION UpdateActivityCharging
BEGIN
	DO UPDATE ActivityCharging SET
			categoryid=$(categoryid), validfrom=$(validfrom), fixum=$(fixum), timedep=$(timedep), timeunit=$(timeunit), taxes=$(taxes)
		WHERE id=$(id);
END

TRANSACTION DeleteActivityCharging
BEGIN
	DO DELETE FROM ActivityCharging WHERE id=$(id);
END

TRANSACTION GetActivityCharging
BEGIN
	INTO . DO UNIQUE NONEMPTY SELECT * FROM ActivityCharging WHERE id=$(id);
END

TRANSACTION EvalActivityCharging
BEGIN
	INTO . DO UNIQUE SELECT * FROM ActivityCharging WHERE categoryid=$(categoryid) AND validfrom<=$(validat) ORDER BY validfrom DESC LIMIT 1;
END




--  ACTIVITY
TRANSACTION InsertActivity
BEGIN
	DO NONEMPTY SELECT id FROM ActivityCharging WHERE categoryid=$(categoryid) AND validfrom<=$(start) ORDER BY validfrom DESC LIMIT 1;
	DO INSERT INTO Activity (chargingid, categoryid, projectid, employeeid, description, start, duration)
		VALUES ($1, $(categoryid), $(projectid), $(employeeid), $(description), $(start), $(duration));
	DO getLastIdActivity();
	INTO . DO UNIQUE NONEMPTY SELECT * FROM Activity WHERE id = $1;
END

TRANSACTION UpdateActivity
BEGIN
	DO NONEMPTY SELECT id FROM ActivityCharging WHERE categoryid=$(categoryid) AND validfrom<=$(start) ORDER BY validfrom DESC LIMIT 1;
	DO UPDATE Activity SET
			chargingid=$1, categoryid=$(categoryid), projectid=$(projectid), employeeid=$(employeeid),
			description=$(description), start=$(start), duration=$(duration)
		WHERE id=$(id);
END

TRANSACTION DeleteActivity
BEGIN
	DO DELETE FROM Activity WHERE id=$(id);
END

TRANSACTION GetActivity
BEGIN
	INTO . DO UNIQUE NONEMPTY SELECT * FROM Activity WHERE id=$(id);
END

--  Not very efficient search :-)
TRANSACTION SearchActivity
BEGIN
	DO CREATE TEMPORARY TABLE tmpSearchActivityResult( id int);
	FOREACH pattern DO INSERT INTO tmpSearchActivityResult SELECT id FROM Project
		WHERE description LIKE '%$(.)%'
		AND ($(emloyeeid) = NULL OR emloyeeid = $(emloyeeid))
		AND ($(customerid) = NULL OR customerid = $(customerid))
		AND ($(projectid) = NULL OR projectid = $(projectid))
		AND ($(categoryid) = NULL OR categoryid = $(categoryid))
		AND ($(rangefrom) = NULL OR start => $(rangefrom))
		AND ($(rangeto) = NULL OR (start + duration) <= $(rangeto));
	INTO project DO SELECT * FROM Project WHERE id IN (SELECT DISTINCT id FROM tmpSearchActivityResult);
	DO DROP TABLE tmpSearchActivityResult;
END


--  PICTURE
TRANSACTION UpdatePicture -- ($1=id, caption, info, image, width, height, thumbnail)
BEGIN
	DO UPDATE Picture SET
		caption = $(caption), info = $(info), image = $(image),
		width = $(width), height = $(height), thumbnail = $(thumbnail)
		WHERE id = $1;
END

OPERATION insertPicture -- (caption, info, image, width, height, thumbnail)
BEGIN
	DO INSERT INTO Picture( caption, info, image, width, height, thumbnail)
		VALUES ($(caption), $(info), $(image), $(width), $(height), $(thumbnail));
	DO NONEMPTY UNIQUE getLastIdPicture();
END

OPERATION deletePicture -- ($1=id)
BEGIN
	DO DELETE FROM Picture WHERE id = $1;
END

TRANSACTION GetPicture
BEGIN
	INTO . DO UNIQUE NONEMPTY SELECT id, caption, info, image, width, height, thumbnail
		FROM Picture WHERE Picture.id=$(id);
END



--  CUSTOMER PICTURE
TRANSACTION InsertCustomerPicture
BEGIN
	DO insertPicture();
	DO INSERT INTO CustomerPicture (customerid, pictureid) VALUES ($(customerid), $1);
	INTO . DO SELECT $1 AS pictureid;
END

TRANSACTION DeleteCustomerPicture
BEGIN
	DO SELECT $(pictureid);
	DO deletePicture( $1);
	DO DELETE FROM CustomerPicture WHERE pictureid=$(pictureid) AND customerid=$(customerid);
END

TRANSACTION GetCustomerPictureList
BEGIN
	INTO picture DO UNIQUE NONEMPTY SELECT id, caption, info, width, height, thumbnail
		FROM Picture,CustomerPicture
		WHERE CustomerPicture.customerid = $(customerid)
		AND CustomerPicture.pictureid = Picture.id;
END




--  CUSTOMER NOTE
TRANSACTION InsertCustomerNote
BEGIN
	DO INSERT INTO CustomerNote (customerid, content, link)
		VALUES ($(customerid), $(content), $(link));
	DO getLastIdCustomerNote();
	INTO . DO UNIQUE NONEMPTY SELECT * FROM CustomerNote WHERE id = $1;
END

TRANSACTION UpdateCustomerNote
BEGIN
	DO UPDATE CustomerNote SET
			customerid=$(customerid), content=$(content), link=$(link)
		WHERE id=$(id);
END

TRANSACTION DeleteCustomerNote
BEGIN
	DO DELETE FROM CustomerNote WHERE id=$(id);
END

TRANSACTION GetCustomerNote
BEGIN
	INTO . DO UNIQUE NONEMPTY SELECT * FROM CustomerNote WHERE id=$(id);
END

--  Not very efficient search :-)
TRANSACTION SearchCustomerNote
BEGIN
	DO CREATE TEMPORARY TABLE tmpSearchCustomerNoteResult( id int);
	FOREACH pattern DO INSERT INTO tmpSearchCustomerNoteResult SELECT id FROM CustomerNote
		WHERE (content LIKE '%$(.)%' OR link LIKE '%$(.)%')
		AND ($(customerid) = NULL OR customerid = $(customerid))
	INTO note DO SELECT * FROM CustomerNote WHERE id IN (SELECT DISTINCT id FROM tmpSearchCustomerNoteResult);
	DO DROP TABLE tmpSearchCustomerNoteResult;
END




--  PROJECT NOTE
TRANSACTION InsertProjectNote
BEGIN
	DO INSERT INTO ProjectNote (projectid, content, link)
		VALUES ($(projectid), $(content), $(link));
	DO getLastIdProjectNote();
	INTO . DO UNIQUE NONEMPTY SELECT * FROM ProjectNote WHERE id = $1;
END

TRANSACTION UpdateProjectNote
BEGIN
	DO UPDATE ProjectNote SET
			projectid=$(projectid), content=$(content), link=$(link)
		WHERE id=$(id);
END

TRANSACTION DeleteProjectNote
BEGIN
	DO DELETE FROM ProjectNote WHERE id=$(id);
END

TRANSACTION GetProjectNote
BEGIN
	INTO . DO UNIQUE NONEMPTY SELECT * FROM ProjectNote WHERE id=$(id);
END

--  Not very efficient search :-)
TRANSACTION SearchProjectNote
BEGIN
	DO CREATE TEMPORARY TABLE tmpSearchProjectNoteResult( id int);
	FOREACH pattern DO INSERT INTO tmpSearchProjectNoteResult SELECT id FROM ProjectNote
		WHERE (content LIKE '%$(.)%' OR link LIKE '%$(.)%')
		AND ($(projectid) = NULL OR projectid = $(projectid))
	INTO note DO SELECT * FROM ProjectNote WHERE id IN (SELECT DISTINCT id FROM tmpSearchProjectNoteResult);
	DO DROP TABLE tmpSearchProjectNoteResult;
END




--  ACTIVITY NOTE
TRANSACTION InsertActivityNote
BEGIN
	DO INSERT INTO ActivityNote (activityid, content, link)
		VALUES ($(activityid), $(content), $(link));
	DO getLastIdActivityNote();
	INTO . DO UNIQUE NONEMPTY SELECT * FROM ActivityNote WHERE id = $1;
END

TRANSACTION UpdateActivityNote
BEGIN
	DO UPDATE ActivityNote SET
			activityid=$(activityid), content=$(content), link=$(link)
		WHERE id=$(id);
END

TRANSACTION DeleteActivityNote
BEGIN
	DO DELETE FROM ActivityNote WHERE id=$(id);
END

TRANSACTION GetActivityNote
BEGIN
	INTO . DO UNIQUE NONEMPTY SELECT * FROM ActivityNote WHERE id=$(id);
END

--  Not very efficient search :-)
TRANSACTION SearchActivityNote
BEGIN
	DO CREATE TEMPORARY TABLE tmpSearchActivityNoteResult( id int);
	FOREACH pattern DO INSERT INTO tmpSearchActivityNoteResult SELECT id FROM ActivityNote
		WHERE (content LIKE '%$(.)%' OR link LIKE '%$(.)%')
		AND ($(activityid) = NULL OR activityid = $(activityid))
	INTO note DO SELECT * FROM ActivityNote WHERE id IN (SELECT DISTINCT id FROM tmpSearchActivityNoteResult);
	DO DROP TABLE tmpSearchActivityNoteResult;
END


