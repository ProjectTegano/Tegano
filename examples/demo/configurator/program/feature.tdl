--
-- addFeature
--
TRANSACTION addFeature -- (parentID, name, normalizedName, description, pictures/picture/id)
BEGIN
	DO NONEMPTY UNIQUE SELECT rgt FROM Feature WHERE ID = $(parentID);
	DO UPDATE Feature SET rgt = rgt + 2 WHERE rgt >= $1;
	DO UPDATE Feature SET lft = lft + 2 WHERE lft > $1;
	DO INSERT INTO Feature (parentID, name, normalizedName, description, lft, rgt) VALUES ($(parentID), $(name), $(normalizedName), $(description), $1, $1+1);
	INTO . DO NONEMPTY UNIQUE SELECT ID AS "ID" from Feature WHERE normalizedName = $(normalizedName);
	FOREACH pictures/picture DO INSERT INTO FeaturePicture( featureID, pictureID ) VALUES( $1, $(id) );
END

--
-- deleteFeature
--
TRANSACTION deleteFeature -- (id)
BEGIN
	DO NONEMPTY UNIQUE SELECT lft,rgt,rgt-lft+1 AS width FROM Feature WHERE ID = $(id) AND ID != '1';
	DO DELETE FROM FeaturePicture WHERE featureID = $(id);
	DO DELETE FROM Feature WHERE lft >= $1 AND lft <= $2;
	DO UPDATE Feature SET lft = lft-$3 WHERE lft>$2;
	DO UPDATE Feature SET rgt = rgt-$3 WHERE rgt>$2;
END

--
-- updateFeature
--
TRANSACTION updateFeature -- (id, name, normalizedName, description, pictures/picture/id)
BEGIN
	DO UPDATE Feature SET name = $(name), normalizedName = $(normalizedName), description = $(description) WHERE ID = $(id);
	DO DELETE FROM FeaturePicture WHERE featureID = $(id);
	FOREACH pictures/picture DO INSERT INTO FeaturePicture( featureID, pictureID ) VALUES( $(/id), $(id) );
END

--
-- selectFeature                 :Get the feature
-- selectFeatureByNormalizedName :Get the feature by name
-- selectFeatureList             :Get a list of categories
--
TRANSACTION selectFeature -- (id)
BEGIN
	INTO . DO NONEMPTY UNIQUE
		SELECT ID AS id, parentID AS "parentID", name,
			normalizedName AS "normalizedName", description
			FROM Feature WHERE ID = $(id);
	INTO picture DO
		SELECT pictureID AS "id"
			FROM FeaturePicture
			WHERE FeaturePicture.featureID = $(id);
END

TRANSACTION selectFeatureByNormalizedName -- (normalizedName)
BEGIN
	INTO . DO NONEMPTY UNIQUE
		SELECT ID AS id, parentID AS "parentID", name,
			normalizedName AS "normalizedName", description
			FROM Feature WHERE normalizedName = $(normalizedName);
	INTO picture DO SELECT pictureID AS id
		FROM FeaturePicture
		WHERE FeaturePicture.featureID = $1;
END

TRANSACTION selectFeatureSet -- (/feature/id)
BEGIN
	FOREACH /feature INTO feature DO NONEMPTY UNIQUE
		SELECT ID AS id, name, normalizedName AS "normalizedName", description
			FROM Feature WHERE ID = $(id) ORDER BY ID;
END

--
-- selectTopFeature       :Get the parents of a feature
--
TRANSACTION selectTopFeature -- (id)
BEGIN
	INTO /node DO SELECT P2.ID AS "ID",P2.parentID AS "parentID",P2.name,P2.normalizedName AS "normalizedName",P2.description FROM Feature AS P1, Feature AS P2 WHERE P1.lft > P2.lft AND P1.lft < P2.rgt AND P1.ID = $(id) ORDER BY P2.ID;
END

--
-- selectSubFeature       :Get the feature
--
TRANSACTION selectSubFeature -- (id)
BEGIN
	INTO /node DO SELECT P1.ID AS "ID",P1.parentID AS "parentID",P1.name,P1.normalizedName AS "normalizedName",P1.description FROM Feature AS P1, Feature AS P2 WHERE P1.lft BETWEEN P2.lft AND P2.rgt AND P2.ID = $(id) ORDER BY P1.ID;
END
